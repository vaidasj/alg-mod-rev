GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 11:23:22 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1  option MIP=convert;
   2  option MIP=convert;
   3  option MIP=convert;
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 11:23:22 Page 2
Non-transitive Dice Design - Enhanced (DICEX,SEQ=272)
C o m p i l a t i o n


       
       Robert A Bosch, suggested in a recent Optima Newsletter an extension
       to the original DICE (SEQ=176) model: Each number on a face can appear
       only once. This has been formulated by adding the 0/1 variable fmap
       and equations eq4 (to define the mapping of values to faces)
       and eq5 (to make this mapping unique). Note the importance of the
       '=e=' type in equation eq1 and the power of eq3.
       
       Probabilistic dice - an example of a non-transitive relation.
       We want to design a set of dice with an integer number on each face
       such that on average dice1 beats dice2, and dice2 on average beats
       dice3 etc, but diceN has to beat dice1.
       
       
       Martin Gardner, The Colossal Book of Mathematics, WW Norton, New
       York, NY, 2001.
       
       Robert A Bosch, Mindsharpener, Optima, MP Society Newsletter, Vol 70,
       June 2003, page 8-9
       
       Robert A Bosch, Monochromatic Squares, Optima, MP Society Newsletter,
       Vol 71, March 2004, page 6-7
       
  30   
  31  sets    f  faces on a dice  / face1*face6 /
  32          d  number of dice   / dice1*dice3 / ;
  33   
  34   
  35  parameters  wn        min wins needed
  36              fnum(d,f) assigned face values
  37              big       big m  ;
  38   
  39  wn        = floor(0.5 * sqr(card(f))) + 1;
  40  fnum(d,f) = card(f)*(ord(d)-1)+ord(f);
  41  big       = card(d)*card(f) - 1;
  42   
  43  alias(f,fp),(d,dp);
  44   
  45  variables  wnx             number of wins
  46             fval(d,f)       value of dice - will be integer
  47             comp(d,f,fp)    one if f beats fp
  48             fmap(d,f,dp,fp) assigns values to dice faces
  49  binary variable comp, fmap;
  50   
  51  fval.lo(d,f) = 1;
  52  fval.up(d,f) = card(d)*card(f);
  53   
  54  fval.fx(d,f)$(ord(d)=1 and ord(f)=1) = 1;
  55   
  56  equation eq1(d)       count the wins
  57           eq2(d,f,fp)  definition of non-transitive relation
  58           eq3(d,f)     different face values for a single dice
  59           eq4(d,f)     assign values to faces
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 11:23:22 Page 3
Non-transitive Dice Design - Enhanced (DICEX,SEQ=272)
C o m p i l a t i o n


  60           eq5(d,f)     make face assignment unique;
  61   
  62  eq1(d)     .. sum((f,fp), comp(d,f,fp)) =e= wnx;
  63   
  64  eq2(d,f,fp).. fval(d,f) + big*(1-comp(d,f,fp)) =g= fval(d++1,fp) + 1;
  65   
  66  eq3(d,f-1) .. fval(d,f-1) + 1 =l= fval(d,f);
  67   
  68  eq4(d,f)   .. sum((dp,fp), fnum(dp,fp)*fmap(d,f,dp,fp)) =e= fval(d,f);
  69   
  70  eq5(dp,fp)   .. sum((d,f), fmap(d,f,dp,fp)) =e= 1;
  71   
  72  model dice1 each dice with unique faces / eq1 ,eq2, eq3  /
  73        dice2 all faces are unique        / eq1, eq2, eq3, eq4, eq5 /;
  74   
  76   
  77  option reslim = 50, optcr = 0.0, optca = 0.99;
  78   
  79  solve dice2 using mip maximizing wnx;
  80   
  81  option fval:0; display wn,fval.l;
  82   
  84  set vals 'possible face values' / 1 * 18 /;
  85  parameter rep1 Chance of winning against next;
  86  parameter chk(vals);
  87  parameter fv(d,f) 'computed face values';
  88   
  89  if( dice2.modelstat = 1 or dice2.modelstat = 8,
  90    rep1(d,f) = 100*sum(fp, comp.l(d,f,fp)) / card(f);
  91    rep1(d,'chance') = sum(f, rep1(d,f))/card(f);
  92    option rep1:0; display rep1;
  93    fv(d,f) = round(fval.l(d,f));
  94    abort$[card(fv) <> card(vals)] 'inconsistent face values';
  95    chk(vals) = 1;
  96    loop{(d,f)$fv(d,f),
  97      chk(vals)$[ord(vals) eq fv(d,f)] = chk(vals) - 1;
  98    };
  99    if {card(chk), execute_unload 'diceDebug'; };
 100    abort$[card(chk)] 'non-unique face values found', chk, fv;
 101  );


COMPILATION TIME     =        0.001 SECONDS      3 MB  24.7.4 r58773 LEX-LEG
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 11:23:22 Page 4
Non-transitive Dice Design - Enhanced (DICEX,SEQ=272)
Equation Listing    SOLVE dice2 Using MIP From line 79


---- eq1  =E=  count the wins

eq1(dice1)..  - wnx + comp(dice1,face1,face1) + comp(dice1,face1,face2) + comp(dice1,face1,face3) + comp(dice1,face1,face4) + comp(dice1,face1,face5) + comp(dice1,face1,face6) + comp(dice1,face2,face1) + comp(dice1,face2,face2) + comp(dice1,face2,face3)
     
      + comp(dice1,face2,face4) + comp(dice1,face2,face5) + comp(dice1,face2,face6) + comp(dice1,face3,face1) + comp(dice1,face3,face2) + comp(dice1,face3,face3) + comp(dice1,face3,face4) + comp(dice1,face3,face5) + comp(dice1,face3,face6)
     
      + comp(dice1,face4,face1) + comp(dice1,face4,face2) + comp(dice1,face4,face3) + comp(dice1,face4,face4) + comp(dice1,face4,face5) + comp(dice1,face4,face6) + comp(dice1,face5,face1) + comp(dice1,face5,face2) + comp(dice1,face5,face3)
     
      + comp(dice1,face5,face4) + comp(dice1,face5,face5) + comp(dice1,face5,face6) + comp(dice1,face6,face1) + comp(dice1,face6,face2) + comp(dice1,face6,face3) + comp(dice1,face6,face4) + comp(dice1,face6,face5) + comp(dice1,face6,face6) =E= 0 ;
     
      (LHS = 0)
     
eq1(dice2)..  - wnx + comp(dice2,face1,face1) + comp(dice2,face1,face2) + comp(dice2,face1,face3) + comp(dice2,face1,face4) + comp(dice2,face1,face5) + comp(dice2,face1,face6) + comp(dice2,face2,face1) + comp(dice2,face2,face2) + comp(dice2,face2,face3)
     
      + comp(dice2,face2,face4) + comp(dice2,face2,face5) + comp(dice2,face2,face6) + comp(dice2,face3,face1) + comp(dice2,face3,face2) + comp(dice2,face3,face3) + comp(dice2,face3,face4) + comp(dice2,face3,face5) + comp(dice2,face3,face6)
     
      + comp(dice2,face4,face1) + comp(dice2,face4,face2) + comp(dice2,face4,face3) + comp(dice2,face4,face4) + comp(dice2,face4,face5) + comp(dice2,face4,face6) + comp(dice2,face5,face1) + comp(dice2,face5,face2) + comp(dice2,face5,face3)
     
      + comp(dice2,face5,face4) + comp(dice2,face5,face5) + comp(dice2,face5,face6) + comp(dice2,face6,face1) + comp(dice2,face6,face2) + comp(dice2,face6,face3) + comp(dice2,face6,face4) + comp(dice2,face6,face5) + comp(dice2,face6,face6) =E= 0 ;
     
      (LHS = 0)
     
eq1(dice3)..  - wnx + comp(dice3,face1,face1) + comp(dice3,face1,face2) + comp(dice3,face1,face3) + comp(dice3,face1,face4) + comp(dice3,face1,face5) + comp(dice3,face1,face6) + comp(dice3,face2,face1) + comp(dice3,face2,face2) + comp(dice3,face2,face3)
     
      + comp(dice3,face2,face4) + comp(dice3,face2,face5) + comp(dice3,face2,face6) + comp(dice3,face3,face1) + comp(dice3,face3,face2) + comp(dice3,face3,face3) + comp(dice3,face3,face4) + comp(dice3,face3,face5) + comp(dice3,face3,face6)
     
      + comp(dice3,face4,face1) + comp(dice3,face4,face2) + comp(dice3,face4,face3) + comp(dice3,face4,face4) + comp(dice3,face4,face5) + comp(dice3,face4,face6) + comp(dice3,face5,face1) + comp(dice3,face5,face2) + comp(dice3,face5,face3)
     
      + comp(dice3,face5,face4) + comp(dice3,face5,face5) + comp(dice3,face5,face6) + comp(dice3,face6,face1) + comp(dice3,face6,face2) + comp(dice3,face6,face3) + comp(dice3,face6,face4) + comp(dice3,face6,face5) + comp(dice3,face6,face6) =E= 0 ;
     
      (LHS = 0)
     

---- eq2  =G=  definition of non-transitive relation

eq2(dice1,face1,face1)..  fval(dice1,face1) - fval(dice2,face1) - 17*comp(dice1,face1,face1) =G= -16 ; (LHS = 0)
     
eq2(dice1,face1,face2)..  fval(dice1,face1) - fval(dice2,face2) - 17*comp(dice1,face1,face2) =G= -16 ; (LHS = 0)
     
eq2(dice1,face1,face3)..  fval(dice1,face1) - fval(dice2,face3) - 17*comp(dice1,face1,face3) =G= -16 ; (LHS = 0)
     
REMAINING 105 ENTRIES SKIPPED


---- eq3  =L=  different face values for a single dice

eq3(dice1,face1)..  fval(dice1,face1) - fval(dice1,face2) =L= -1 ; (LHS = 0, INFES = 1 ****)
     
eq3(dice1,face2)..  fval(dice1,face2) - fval(dice1,face3) =L= -1 ; (LHS = 0, INFES = 1 ****)
     
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 11:23:22 Page 5
Non-transitive Dice Design - Enhanced (DICEX,SEQ=272)
Equation Listing    SOLVE dice2 Using MIP From line 79


     eq3  =L=  different face values for a single dice

eq3(dice1,face3)..  fval(dice1,face3) - fval(dice1,face4) =L= -1 ; (LHS = 0, INFES = 1 ****)
     
REMAINING 12 ENTRIES SKIPPED


---- eq4  =E=  assign values to faces

eq4(dice1,face1)..  - fval(dice1,face1) + fmap(dice1,face1,dice1,face1) + 2*fmap(dice1,face1,dice1,face2) + 3*fmap(dice1,face1,dice1,face3) + 4*fmap(dice1,face1,dice1,face4) + 5*fmap(dice1,face1,dice1,face5) + 6*fmap(dice1,face1,dice1,face6)
     
      + 7*fmap(dice1,face1,dice2,face1) + 8*fmap(dice1,face1,dice2,face2) + 9*fmap(dice1,face1,dice2,face3) + 10*fmap(dice1,face1,dice2,face4) + 11*fmap(dice1,face1,dice2,face5) + 12*fmap(dice1,face1,dice2,face6) + 13*fmap(dice1,face1,dice3,face1)
     
      + 14*fmap(dice1,face1,dice3,face2) + 15*fmap(dice1,face1,dice3,face3) + 16*fmap(dice1,face1,dice3,face4) + 17*fmap(dice1,face1,dice3,face5) + 18*fmap(dice1,face1,dice3,face6) =E= 0 ; (LHS = -1, INFES = 1 ****)
     
eq4(dice1,face2)..  - fval(dice1,face2) + fmap(dice1,face2,dice1,face1) + 2*fmap(dice1,face2,dice1,face2) + 3*fmap(dice1,face2,dice1,face3) + 4*fmap(dice1,face2,dice1,face4) + 5*fmap(dice1,face2,dice1,face5) + 6*fmap(dice1,face2,dice1,face6)
     
      + 7*fmap(dice1,face2,dice2,face1) + 8*fmap(dice1,face2,dice2,face2) + 9*fmap(dice1,face2,dice2,face3) + 10*fmap(dice1,face2,dice2,face4) + 11*fmap(dice1,face2,dice2,face5) + 12*fmap(dice1,face2,dice2,face6) + 13*fmap(dice1,face2,dice3,face1)
     
      + 14*fmap(dice1,face2,dice3,face2) + 15*fmap(dice1,face2,dice3,face3) + 16*fmap(dice1,face2,dice3,face4) + 17*fmap(dice1,face2,dice3,face5) + 18*fmap(dice1,face2,dice3,face6) =E= 0 ; (LHS = -1, INFES = 1 ****)
     
eq4(dice1,face3)..  - fval(dice1,face3) + fmap(dice1,face3,dice1,face1) + 2*fmap(dice1,face3,dice1,face2) + 3*fmap(dice1,face3,dice1,face3) + 4*fmap(dice1,face3,dice1,face4) + 5*fmap(dice1,face3,dice1,face5) + 6*fmap(dice1,face3,dice1,face6)
     
      + 7*fmap(dice1,face3,dice2,face1) + 8*fmap(dice1,face3,dice2,face2) + 9*fmap(dice1,face3,dice2,face3) + 10*fmap(dice1,face3,dice2,face4) + 11*fmap(dice1,face3,dice2,face5) + 12*fmap(dice1,face3,dice2,face6) + 13*fmap(dice1,face3,dice3,face1)
     
      + 14*fmap(dice1,face3,dice3,face2) + 15*fmap(dice1,face3,dice3,face3) + 16*fmap(dice1,face3,dice3,face4) + 17*fmap(dice1,face3,dice3,face5) + 18*fmap(dice1,face3,dice3,face6) =E= 0 ; (LHS = -1, INFES = 1 ****)
     
REMAINING 15 ENTRIES SKIPPED


---- eq5  =E=  make face assignment unique

eq5(dice1,face1)..  fmap(dice1,face1,dice1,face1) + fmap(dice1,face2,dice1,face1) + fmap(dice1,face3,dice1,face1) + fmap(dice1,face4,dice1,face1) + fmap(dice1,face5,dice1,face1) + fmap(dice1,face6,dice1,face1) + fmap(dice2,face1,dice1,face1)
     
      + fmap(dice2,face2,dice1,face1) + fmap(dice2,face3,dice1,face1) + fmap(dice2,face4,dice1,face1) + fmap(dice2,face5,dice1,face1) + fmap(dice2,face6,dice1,face1) + fmap(dice3,face1,dice1,face1) + fmap(dice3,face2,dice1,face1)
     
      + fmap(dice3,face3,dice1,face1) + fmap(dice3,face4,dice1,face1) + fmap(dice3,face5,dice1,face1) + fmap(dice3,face6,dice1,face1) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
eq5(dice1,face2)..  fmap(dice1,face1,dice1,face2) + fmap(dice1,face2,dice1,face2) + fmap(dice1,face3,dice1,face2) + fmap(dice1,face4,dice1,face2) + fmap(dice1,face5,dice1,face2) + fmap(dice1,face6,dice1,face2) + fmap(dice2,face1,dice1,face2)
     
      + fmap(dice2,face2,dice1,face2) + fmap(dice2,face3,dice1,face2) + fmap(dice2,face4,dice1,face2) + fmap(dice2,face5,dice1,face2) + fmap(dice2,face6,dice1,face2) + fmap(dice3,face1,dice1,face2) + fmap(dice3,face2,dice1,face2)
     
      + fmap(dice3,face3,dice1,face2) + fmap(dice3,face4,dice1,face2) + fmap(dice3,face5,dice1,face2) + fmap(dice3,face6,dice1,face2) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
eq5(dice1,face3)..  fmap(dice1,face1,dice1,face3) + fmap(dice1,face2,dice1,face3) + fmap(dice1,face3,dice1,face3) + fmap(dice1,face4,dice1,face3) + fmap(dice1,face5,dice1,face3) + fmap(dice1,face6,dice1,face3) + fmap(dice2,face1,dice1,face3)
     
      + fmap(dice2,face2,dice1,face3) + fmap(dice2,face3,dice1,face3) + fmap(dice2,face4,dice1,face3) + fmap(dice2,face5,dice1,face3) + fmap(dice2,face6,dice1,face3) + fmap(dice3,face1,dice1,face3) + fmap(dice3,face2,dice1,face3)
     
      + fmap(dice3,face3,dice1,face3) + fmap(dice3,face4,dice1,face3) + fmap(dice3,face5,dice1,face3) + fmap(dice3,face6,dice1,face3) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
REMAINING 15 ENTRIES SKIPPED

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 11:23:22 Page 6
Non-transitive Dice Design - Enhanced (DICEX,SEQ=272)
Column Listing      SOLVE dice2 Using MIP From line 79


---- wnx  number of wins

wnx
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -1       eq1(dice1)
       -1       eq1(dice2)
       -1       eq1(dice3)


---- fval  value of dice - will be integer

fval(dice1,face1)
                (.LO, .L, .UP, .M = 1, 1, 1, 0)
        1       eq2(dice1,face1,face1)
        1       eq2(dice1,face1,face2)
        1       eq2(dice1,face1,face3)
        1       eq2(dice1,face1,face4)
        1       eq2(dice1,face1,face5)
        1       eq2(dice1,face1,face6)
       -1       eq2(dice3,face1,face1)
       -1       eq2(dice3,face2,face1)
       -1       eq2(dice3,face3,face1)
       -1       eq2(dice3,face4,face1)
       -1       eq2(dice3,face5,face1)
       -1       eq2(dice3,face6,face1)
        1       eq3(dice1,face1)
       -1       eq4(dice1,face1)

fval(dice1,face2)
                (.LO, .L, .UP, .M = 1, 1, 18, 0)
        1       eq2(dice1,face2,face1)
        1       eq2(dice1,face2,face2)
        1       eq2(dice1,face2,face3)
        1       eq2(dice1,face2,face4)
        1       eq2(dice1,face2,face5)
        1       eq2(dice1,face2,face6)
       -1       eq2(dice3,face1,face2)
       -1       eq2(dice3,face2,face2)
       -1       eq2(dice3,face3,face2)
       -1       eq2(dice3,face4,face2)
       -1       eq2(dice3,face5,face2)
       -1       eq2(dice3,face6,face2)
       -1       eq3(dice1,face1)
        1       eq3(dice1,face2)
       -1       eq4(dice1,face2)
        0       (OLD LEVEL ****)

fval(dice1,face3)
                (.LO, .L, .UP, .M = 1, 1, 18, 0)
        1       eq2(dice1,face3,face1)
        1       eq2(dice1,face3,face2)
        1       eq2(dice1,face3,face3)
        1       eq2(dice1,face3,face4)
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 11:23:22 Page 7
Non-transitive Dice Design - Enhanced (DICEX,SEQ=272)
Column Listing      SOLVE dice2 Using MIP From line 79


     fval  value of dice - will be integer

        1       eq2(dice1,face3,face5)
        1       eq2(dice1,face3,face6)
       -1       eq2(dice3,face1,face3)
       -1       eq2(dice3,face2,face3)
       -1       eq2(dice3,face3,face3)
       -1       eq2(dice3,face4,face3)
       -1       eq2(dice3,face5,face3)
       -1       eq2(dice3,face6,face3)
       -1       eq3(dice1,face2)
        1       eq3(dice1,face3)
       -1       eq4(dice1,face3)
        0       (OLD LEVEL ****)

REMAINING 15 ENTRIES SKIPPED

---- comp  one if f beats fp

comp(dice1,face1,face1)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       eq1(dice1)
      -17       eq2(dice1,face1,face1)

comp(dice1,face1,face2)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       eq1(dice1)
      -17       eq2(dice1,face1,face2)

comp(dice1,face1,face3)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       eq1(dice1)
      -17       eq2(dice1,face1,face3)

REMAINING 105 ENTRIES SKIPPED

---- fmap  assigns values to dice faces

fmap(dice1,face1,dice1,face1)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       eq4(dice1,face1)
        1       eq5(dice1,face1)

fmap(dice1,face1,dice1,face2)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        2       eq4(dice1,face1)
        1       eq5(dice1,face2)

fmap(dice1,face1,dice1,face3)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        3       eq4(dice1,face1)
        1       eq5(dice1,face3)

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 11:23:22 Page 8
Non-transitive Dice Design - Enhanced (DICEX,SEQ=272)
Column Listing      SOLVE dice2 Using MIP From line 79


     fmap  assigns values to dice faces

REMAINING 321 ENTRIES SKIPPED
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 11:23:22 Page 9
Non-transitive Dice Design - Enhanced (DICEX,SEQ=272)
Model Statistics    SOLVE dice2 Using MIP From line 79


MODEL STATISTICS

BLOCKS OF EQUATIONS           5     SINGLE EQUATIONS          162
BLOCKS OF VARIABLES           4     SINGLE VARIABLES          451  17 projected
NON ZERO ELEMENTS         1,131     DISCRETE VARIABLES        432


GENERATION TIME      =        0.005 SECONDS      4 MB  24.7.4 r58773 LEX-LEG


EXECUTION TIME       =        0.005 SECONDS      4 MB  24.7.4 r58773 LEX-LEG
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:23:22 Page 10
Non-transitive Dice Design - Enhanced (DICEX,SEQ=272)
Solution Report     SOLVE dice2 Using MIP From line 79


               S O L V E      S U M M A R Y

     MODEL   dice2               OBJECTIVE  wnx
     TYPE    MIP                 DIRECTION  MAXIMIZE
     SOLVER  CONVERT             FROM LINE  79

**** SOLVER STATUS     1 Normal Completion         
**** MODEL STATUS      14 No Solution Returned     
**** OBJECTIVE VALUE                0.0000

 RESOURCE USAGE, LIMIT          0.000        50.000
 ITERATION COUNT, LIMIT         0    2000000000

Convert 2.0      24.7.4 r58773 Released Sep 19, 2016 LEG x86 64bit/Linux      

--- Using Option File
Reading parameter(s) from "/home/renigijus/gams/opt-mod-lib/gamslib/dicex/convert.opt"
>>  pyomo dicex-scalar.py
Finished reading from "/home/renigijus/gams/opt-mod-lib/gamslib/dicex/convert.opt"
Pyomo     : dicex-scalar.py


No solution returned
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:23:22 Page 11
Non-transitive Dice Design - Enhanced (DICEX,SEQ=272)
E x e c u t i o n


----     81 PARAMETER wn                   =       19.000  min wins needed

----     81 VARIABLE fval.L  value of dice - will be integer

            face1

dice1           1



EXECUTION TIME       =        0.000 SECONDS      3 MB  24.7.4 r58773 LEX-LEG


USER: Remigijus Paulavicius, Single User License     S170731:0859AO-LNX
      Imperial College London, Dept. of Chemical Engineering    DC13449
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      /home/renigijus/gams/opt-mod-lib/gamslib/dicex/dicex.gms
Output     /home/renigijus/gams/opt-mod-lib/gamslib/dicex/dicex-scalar.py.lst
