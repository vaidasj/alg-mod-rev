GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 11:30:32 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1  option LP=convert;
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 11:30:32 Page 2
Scenario Tree Construction Example (SRPCHASE,SEQ=344)
C o m p i l a t i o n


       
      SCENRED2 - Scenario Tree Construction Example
      3-stage stochastic purchase example problem
       
      Analytical solution:
          OPT  = 4.167 (Optimal value)
          VOPI = 3.667 (Value of perfect information)
       
      H. Heitsch, W. Roemisch, and C. Strugarek 
      Stability of Multistage Stochastic Programs
      SIAM Journal on Optimization 17 (2006), 511-525
       
  17   
  18  * Dimension (even number)
  21   
  22  Sets n              nodes            / n0*n1000 /
  23       t              time periods     / t1*t3 /
  24       stage(n,t)     stage mapping
  25       ancestor(n,n)  ancestor matrix
  26       leaf(n)        leaf nodes;
  27   
  28  * Build a fan
  29   
  30  * Assign stage mapping and leaf nodes
  31  stage('n0','t1') = yes;
  32  stage( n  ,'t2') = ord(n)>1 and ord(n)<=1000/2+1;
  33  stage( n  ,'t3') = ord(n)>1000/2+1;
  34   
  35  leaf(n) = stage(n,'t3');
  36   
  37  * Build ancenstor relations to represent the fan
  38  ancestor(n,'n0')$stage(n,'t2') = yes;
  39  ancestor(n,n-card(leaf))$stage(n,'t3') = yes;
  40   
  41  * Random variables (price) and probabilities
  42  Parameters
  43       price(n)       node prices
  44       prob(n)        node probabilities;
  45  prob(n) = 1/card(leaf);
  46   
  47  * First stage
  48  price('n0') = 1; prob('n0') = 1;
  49   
  50  * Second stage - price is uniformly distributed in [0,1]
  51  price(n)$stage(n,'t2') = uniform(0,1);
  52   
  53  * Third stage - price is conditional linearly distributed
  54  Scalar alpha, beta;
  55  loop(stage(n,'t3'),
  56      alpha    = 1-price(n-card(leaf));
  57      beta     = 1-2*price(n-card(leaf));
  58      price(n) = uniform(0,1);
  59      price(n)$beta = alpha/beta
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 11:30:32 Page 3
Scenario Tree Construction Example (SRPCHASE,SEQ=344)
C o m p i l a t i o n


  60                 - sign(beta)*sqrt(sqr(alpha/beta) - price(n)/beta);
  61  );
  62   
  63  * Initialize ScenRed2
LIBINCLUDE /opt/gams/gams24.7_linux_x64_64_sfx/inclib/scenred2.gms
  66  SET SR_Parms 'ScenRed input parameters' /
  67    num_time_steps  'path length from root to leaf'
  68    num_leaves      'leaves/scenarios in the initial tree'
  69    num_nodes       'nodes in the initial tree'
  70    num_random      'random variables assigned to a scenario or node'
  71    red_num_leaves  'desired number of preserved scenarios or leaves'
  72    red_percentage  'desired relative distance from initial to reduced tree'
  73    where_random    '100*inObj + 10*inRHS + inMatrix'
  74    reduction_method 'desired reduction method'
  75    num_stages      'branching levels ???'
  76    run_time_limit  'in seconds'
  77    report_level    '0-default, 1-additional log info'
  78  * New  S C E N R E D 2  Parms *
  79    construction_method 'desired construction method'
  80    scen_red        'scenario reduction command'
  81    tree_con        'tree construction command'
  82    sroption        'option file'
  83    visual_init     'visualization of initial tree'
  84    visual_red      'visualization of reduced (constructed) tree'
  85    out_scen        'output of scenario data'
  86    out_tree        'output of tree structure'
  87    plot_scen       'visualization of scenario processes'
  88  /;
  89   
  90  SET SR_Stats 'ScenRed output statistics' /
  91    ScenRedWarnings
  92    ScenRedErrors
  93    run_time        'in seconds'
  94    orig_nodes      'nodes in the initial tree'
  95    orig_leaves     'leaves/scenarios in the initial tree'
  96    red_nodes       'nodes in the reduced tree'
  97    red_leaves      'leaves/scenarios in the reduced tree'
  98    red_percentage  'relative distance from initial to reduced tree'
  99    red_absolute    'absolute distance from initial to reduced tree'
 100    reduction_method 'method used'
 101  * New  S C E N R E D 2  stats *
 102    construction_method 'method used'
 103  /;
 104   
 105  SCALAR
 106    scenRedRC;
 107   
 108  PARAMETERS
 109    scenRedParms (SR_Parms),
 110    scenRedReport(SR_Stats);
 111   
 112  file fopts Scenred option file / 'sr2srpchase.opt' /;
 113  putclose fopts 'order           1'
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 11:30:32 Page 4
Scenario Tree Construction Example (SRPCHASE,SEQ=344)
C o m p i l a t i o n


 114               / 'section   epsilon'
 115               / ' 2           0.05'
 116               / ' 3           0.05'
 117               / 'end';
 118   
 119  * Scenred2 method choice
 120  ScenRedParms('construction_method') = 2;
 121  ScenRedParms('reduction_method'   ) = 2;
 122  ScenRedParms('sroption'           ) = 1;
 123   
 124  * Scenred2 call
LIBINCLUDE /opt/gams/gams24.7_linux_x64_64_sfx/inclib/runscenred2.gms
 126  * runscenred2.gms
 127  * %1 ident to keep files distinct
 128  * %2 instruction tree_con or scen_red
 129  * %3 nodes
 130  * %4 ancestor relation
 131  * %5 probability
 132  * %6 ancestor relation of reduced tree
 133  * %7 probability of reduced tree
 134  * %8 ... random value
 135   
 138   
 139  scenRedParms('tree_con') = 1;
 140   
 141  * Remove GDX files to ensure that we don't get old stuff
 144  execute "rm -f sr2srpchase_in.gdx "
 145  execute "=test -e sr2srpchase_in.gdx"; abort$(errorlevel=0) 'sr2srpchase_in.gdx still exists';
 147  execute "rm -f sr2srpchase_out.gdx "
 148  execute "=test -e sr2srpchase_out.gdx"; abort$(errorlevel=0) 'sr2srpchase_out.gdx still exists';
 149   
 150  execute_unload 'sr2srpchase_in.gdx', scenRedParms, n, ancestor, prob
 154  ,price;
 155   
 156  * Call scenred2
 159  execute 'scenred2  -p srpchase  >> "/home/renigijus/gams/opt-mod-lib/gamslib/srpchase/ampl-convert.log"';
 160  scenRedRC = errorlevel;
 161  abort$scenRedRC "Nonzero return code from scenred2 indicates error : ", scenRedRC;
 162   
 163  execute_load 'sr2srpchase_out.gdx', ScenRedReport
 164  , ancestor=red_ancestor
 165  , prob=red_prob
 166  ;
 167   
 168   
 169  Variables
 170      x(n)       amount of purchase
 171      y(n)       slack variable
 172      cost       objective value;
 173   
 174  Positive variables x,y;
 175   
 176  Equations
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 11:30:32 Page 5
Scenario Tree Construction Example (SRPCHASE,SEQ=344)
C o m p i l a t i o n


 177      objective  expected cost
 178      slack(n)   slack equation
 179      demand(n)  demand inequality;
 180   
 181  Set srn(n)     subset of nodes after tree construction;
 182  srn(n) = prob(n);
 183   
 184  objective..
 185      cost   =e= sum(srn, prob(srn)*price(srn)*x(srn));
 186   
 187  slack(srn)$(not leaf(srn))..
 188      y(srn) =e= x(srn) + sum(ancestor(srn,n), y(n));
 189   
 190  demand(leaf(srn))..
 191      x(srn) + sum(ancestor(srn,n), y(n)) =g= 1;
 192   
 193  Model purchase / all /;
 194   
 195  Solve purchase minimizing cost using lp;
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 11:30:32 Page 6
Scenario Tree Construction Example (SRPCHASE,SEQ=344)
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  /home/renigijus/gams/opt-mod-lib/gamslib/srpchase/srpchase.gms
     2       65 LIBINCLUDE     1      65  ./opt/gams/gams24.7_linux_x64_64_sfx/inclib/scenred2.gms
     3      125 LIBINCLUDE     1      80  ./opt/gams/gams24.7_linux_x64_64_sfx/inclib/runscenred2.gms


COMPILATION TIME     =        0.002 SECONDS      3 MB  24.7.4 r58773 LEX-LEG
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 11:30:32 Page 7
Scenario Tree Construction Example (SRPCHASE,SEQ=344)
Equation Listing    SOLVE purchase Using LP From line 195


---- objective  =E=  expected cost

objective..  - x(n0) - 0.080974037844*x(n90) - 0.06298166245*x(n275) - 0.007258758552*x(n278) - 0.058226987028*x(n336) - 0.08008834568*x(n373) - 0.045833726652*x(n378) - 0.04553907666*x(n387) - 0.06408962448*x(n428) - 0.022962373764*x(n434)
     
      - 0.001120420976*x(n443) - 0.00336572274157864*x(n533) - 0.00101827350420911*x(n558) - 0.00262674864250621*x(n561) - 0.00283696104402397*x(n562) - 2.22301600538088E-6*x(n577) - 0.000756861005869382*x(n588) - 0.00815916723192756*x(n590)
     
      - 3.83102431804083E-6*x(n595) - 0.000619543732009134*x(n597) - 0.000837212214607246*x(n602) - 0.00629038196458779*x(n619) - 0.0011001387722344*x(n620) - 0.00172633860064771*x(n621) - 0.00202939672968222*x(n633) - 9.72308898238801E-5*x(n639)
     
      - 0.000768677938643549*x(n641) - 0.00347483599951483*x(n643) - 0.00149275494452211*x(n648) - 0.00365934457936474*x(n650) - 0.00325520161616446*x(n653) - 0.000780326954613105*x(n654) - 0.00218777937607949*x(n655) - 0.001258034435536*x(n657)
     
      - 0.00310580645193932*x(n664) - 0.000922832984161498*x(n670) - 0.00768348338051926*x(n682) - 0.00554317344642831*x(n690) - 0.00558771046297615*x(n692) - 0.00250965078988669*x(n701) - 0.00435159199864626*x(n708) - 0.00216892069071819*x(n710)
     
      - 0.00484529205292612*x(n717) - 0.00688451918845347*x(n718) - 0.0035452550766699*x(n720) - 0.00679049756383187*x(n722) - 0.00264152313612098*x(n726) - 0.00101123375174686*x(n736) - 0.00385407561525169*x(n737) - 0.00771440929779874*x(n739)
     
      - 0.00553384720615069*x(n746) - 0.000958504544182276*x(n747) - 0.00720928714512881*x(n750) - 0.00231357981027474*x(n751) - 0.00193502430178828*x(n757) - 0.0100292302127232*x(n763) - 0.00586923998260571*x(n765) - 0.00440970337382992*x(n768)
     
      - 0.0044033577629193*x(n773) - 0.00654174463509765*x(n775) - 0.00563430588097975*x(n776) - 0.000200319794638761*x(n778) - 0.000821619210591793*x(n793) - 0.00293276619406415*x(n804) - 0.00713813435729441*x(n806) - 0.00184635655537454*x(n809)
     
      - 0.00547421881830473*x(n811) - 0.00104283089608845*x(n813) - 0.00368210610355045*x(n816) - 0.00716820270599932*x(n817) - 8.25497892846638E-5*x(n818) - 0.000819676739315786*x(n819) - 0.00165175427371017*x(n821) - 0.0100754441867998*x(n823)
     
      - 0.00444709974894708*x(n824) - 0.00320828076625745*x(n829) - 0.0098019049607729*x(n835) - 0.00596751278401516*x(n836) - 0.00037829979877213*x(n837) - 0.000496441219658525*x(n838) - 0.00267064534607768*x(n839) - 0.00124851130735319*x(n840)
     
      - 0.0051435784578595*x(n844) - 0.00335137109522716*x(n847) - 0.00125857747945631*x(n850) - 0.00626004582462345*x(n851) - 0.00111020366448434*x(n853) - 0.00277081196487037*x(n856) - 0.00773712403323243*x(n858) - 0.00382939130906471*x(n859)
     
      - 0.00283083423722311*x(n863) - 0.00305935409855113*x(n864) - 0.00307513465313198*x(n865) - 0.00223509849772626*x(n867) - 0.000275374084181898*x(n869) - 0.000701754924492107*x(n873) - 0.00075231745699317*x(n875) - 0.00518649144692681*x(n878)
     
      - 0.00133753257501625*x(n880) - 0.00432509034272093*x(n881) - 0.00147155834215524*x(n883) - 0.0102407778419989*x(n887) - 0.000818834550381364*x(n890) - 0.000935247155521584*x(n892) - 0.00356450249148091*x(n894) - 0.00215113257082189*x(n897)
     
      - 0.00234233109133731*x(n899) - 0.00325153945579905*x(n901) - 0.00468760269378838*x(n903) - 0.00187452165585971*x(n904) - 0.00402187559474737*x(n906) - 0.00612324620844291*x(n908) - 0.00257332388938634*x(n911) - 0.00777804708096101*x(n916)
     
      - 0.00179693991744296*x(n917) - 0.00283919259912033*x(n918) - 0.00326955479711356*x(n919) - 0.0044864483628577*x(n925) - 0.0071568716210616*x(n928) - 0.00535010115103024*x(n929) - 0.000326836946634268*x(n931) - 0.00568907141989392*x(n932)
     
      - 0.00438908111365014*x(n933) - 0.00784996494585283*x(n934) - 0.00163968752399519*x(n936) - 0.00838360484268558*x(n937) - 0.00439126660429051*x(n939) - 0.00116941964657498*x(n942) - 0.00603649284274796*x(n943) - 0.00121638267396879*x(n950)
     
      - 0.00454450074082352*x(n954) - 0.000151923958538576*x(n956) - 0.00594628949953065*x(n958) - 0.000438668622129342*x(n960) - 0.00506506076886676*x(n964) - 0.00247552224940751*x(n965) - 0.00323869008293068*x(n966) - 0.00568908759760121*x(n968)
     
      - 0.00302174094231101*x(n969) - 0.00242471414533727*x(n970) - 0.00442519394123758*x(n972) - 0.00236425972753211*x(n973) - 0.00234754174298313*x(n975) - 0.00371833904258767*x(n977) - 0.000636057572268682*x(n978) - 0.00119610843137578*x(n979)
     
      - 0.000731266685523024*x(n983) - 0.000601064301636256*x(n985) - 0.00786227644789204*x(n986) - 0.00233687591267553*x(n987) - 0.00188007602969642*x(n988) - 0.00300120106946929*x(n990) - 0.00755151483991548*x(n992) - 0.00370700849235465*x(n993)
     
      - 0.000751794414197832*x(n994) - 0.00424612035072884*x(n998) + cost =E= 0 ; (LHS = 0)
     

---- slack  =E=  slack equation

slack(n0)..  - x(n0) + y(n0) =E= 0 ; (LHS = 0)
     
slack(n90)..  - x(n90) - y(n0) + y(n90) =E= 0 ; (LHS = 0)
     
slack(n275)..  - x(n275) - y(n0) + y(n275) =E= 0 ; (LHS = 0)
     
REMAINING 8 ENTRIES SKIPPED

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 11:30:32 Page 8
Scenario Tree Construction Example (SRPCHASE,SEQ=344)
Equation Listing    SOLVE purchase Using LP From line 195


---- demand  =G=  demand inequality

demand(n533)..  x(n533) + y(n434) =G= 1 ; (LHS = 0, INFES = 1 ****)
     
demand(n558)..  x(n558) + y(n373) =G= 1 ; (LHS = 0, INFES = 1 ****)
     
demand(n561)..  x(n561) + y(n278) =G= 1 ; (LHS = 0, INFES = 1 ****)
     
REMAINING 142 ENTRIES SKIPPED

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 11:30:32 Page 9
Scenario Tree Construction Example (SRPCHASE,SEQ=344)
Column Listing      SOLVE purchase Using LP From line 195


---- x  amount of purchase

x(n0)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -1       objective
       -1       slack(n0)

x(n90)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -0.081   objective
       -1       slack(n90)

x(n275)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -0.063   objective
       -1       slack(n275)

REMAINING 153 ENTRIES SKIPPED

---- y  slack variable

y(n0)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        1       slack(n0)
       -1       slack(n90)
       -1       slack(n275)
       -1       slack(n278)
       -1       slack(n336)
       -1       slack(n373)
       -1       slack(n378)
       -1       slack(n387)
       -1       slack(n428)
       -1       slack(n434)
       -1       slack(n443)

y(n90)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        1       slack(n90)
        1       demand(n590)
        1       demand(n641)
        1       demand(n701)
        1       demand(n710)
        1       demand(n736)
        1       demand(n750)
        1       demand(n835)
        1       demand(n851)
        1       demand(n858)
        1       demand(n906)
        1       demand(n929)
        1       demand(n956)
        1       demand(n969)

y(n275)
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:30:32 Page 10
Scenario Tree Construction Example (SRPCHASE,SEQ=344)
Column Listing      SOLVE purchase Using LP From line 195


     y  slack variable

                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        1       slack(n275)
        1       demand(n643)
        1       demand(n650)
        1       demand(n739)
        1       demand(n746)
        1       demand(n775)
        1       demand(n776)
        1       demand(n818)
        1       demand(n823)
        1       demand(n824)
        1       demand(n881)
        1       demand(n904)
        1       demand(n950)
        1       demand(n975)
        1       demand(n993)

REMAINING 8 ENTRIES SKIPPED

---- cost  objective value

cost
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       objective

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:30:32 Page 11
Scenario Tree Construction Example (SRPCHASE,SEQ=344)
Model Statistics    SOLVE purchase Using LP From line 195


MODEL STATISTICS

BLOCKS OF EQUATIONS           3     SINGLE EQUATIONS          157
BLOCKS OF VARIABLES           3     SINGLE VARIABLES          168
NON ZERO ELEMENTS           479


GENERATION TIME      =        0.002 SECONDS      4 MB  24.7.4 r58773 LEX-LEG


EXECUTION TIME       =        0.138 SECONDS      4 MB  24.7.4 r58773 LEX-LEG
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:30:32 Page 12
Scenario Tree Construction Example (SRPCHASE,SEQ=344)
Solution Report     SOLVE purchase Using LP From line 195


               S O L V E      S U M M A R Y

     MODEL   purchase            OBJECTIVE  cost
     TYPE    LP                  DIRECTION  MINIMIZE
     SOLVER  CONVERT             FROM LINE  195

**** SOLVER STATUS     1 Normal Completion         
**** MODEL STATUS      14 No Solution Returned     
**** OBJECTIVE VALUE                0.0000

 RESOURCE USAGE, LIMIT          0.000      1000.000
 ITERATION COUNT, LIMIT         0    2000000000

Convert 2.0      24.7.4 r58773 Released Sep 19, 2016 LEG x86 64bit/Linux      

--- Using Option File
Reading parameter(s) from "/home/renigijus/gams/opt-mod-lib/gamslib/srpchase/convert.opt"
>>  ampl srpchase-scalar.mod
Finished reading from "/home/renigijus/gams/opt-mod-lib/gamslib/srpchase/convert.opt"
Ampl      : srpchase-scalar.mod


No solution returned

**** REPORT FILE SUMMARY

fopts /home/renigijus/gams/opt-mod-lib/gamslib/srpchase/sr2srpchase.opt


EXECUTION TIME       =        0.000 SECONDS      2 MB  24.7.4 r58773 LEX-LEG


USER: Remigijus Paulavicius, Single User License     S170731:0859AO-LNX
      Imperial College London, Dept. of Chemical Engineering    DC13449
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      /home/renigijus/gams/opt-mod-lib/gamslib/srpchase/srpchase.gms
Output     /home/renigijus/gams/opt-mod-lib/gamslib/srpchase/srpchase-scalar.mod.lst
