GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 11:22:58 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1  option NLP=convert;
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 11:22:58 Page 2
The Pooling Problem (POOL,SEQ=254)
C o m p i l a t i o n


   3   
      This model presents a number of pooling problems from the
      literature in a unified framework. It represents the
      pq-formulation as of the pooling problem described in:
       
      M. Tawarmalani and N. V. Sahinidis, in "Convexification
      and Global Optimization of the Pooling Problem," May 2002,
      Mathematical Programming, submitted.
       
      All 14 problems have known global solutions.
       
      Summary reports across all 14 problems allow quick assessment
      of local and global solution methods. Also note the importance
      of good starting points for local solvers.
       
      This model and the generic pq-formulation has been provided
      by Mohit Tawarmalani, August 2002.
       
       
      References:
       
      Tawarmalani, M. and Sahinidis, N., Convexification and Global
      Optimization in Continuous and Mixed-Integer Nonlinear
      Programming: Theory, Algorithms, Software, and Applications,
      Kluwer, 2002.
       
      Adhya, N. and Tawarmalani, M. and Sahinidis, N. V.,
      "Global optimization of the pooling problem", Industrial and
      Engineering Chemistry, 38, pp. 1956-1972, 1999.
       
      C. Audet and J. Brimberg and P. Hansen and N. Mladenovic,
      "Pooling problem: Alternate formulations and solution methods",
      Technical Report Les Cashiers Du GERAD G-2000-23, Montreal,
      2000.
       
      Ben-Tal, A and Eiger, G and Gershovitz, V, "Global Minimization
      by Reducing the Duality Gap", Mathematical Programming, 63,
      pp. 193-212, 1994.
       
      Foulds, L. R. and Haugland, D. and Jornsten, K., "A bilinear
      approach to the pooling problem", Optimization, 24, pp. 165-180,
      1992.
       
      Haverly, C A, Studies of the Behavior of Recursion for the
      Pooling Problem, ACM SIGMAP Bull, 25, pp. 19-28, 1978.
       
      Haverly, C. A., "Behaviour of recursion model - More studies",
      ACM SIGMAP Bulletin, 26, pp. 22-28, 1979.
       
  54   
  55   
INCLUDE    /home/renigijus/gams/opt-mod-lib/gamslib/pool/poolmod.inc
       
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 11:22:58 Page 3
The Pooling Problem (POOL,SEQ=254)
C o m p i l a t i o n


      Author: Mohit Tawarmalani, August 2002
       
      Purpose:
      To encode the pq-formulation of the pooling problem described in:
      M. Tawarmalani and N. V. Sahinidis, "Convexification and
      Global Optimization of the Pooling Problem," May 2002,
      Mathematical Programming, submitted.
       
  68   
  69  Sets comp_ Components and Raw Matereials
  70       pro_  Products
  71       qual_ Qualities
  72       pool_ Pools
  73   
  74  Sets comp(comp_) Instance of Components and Raw Matereials
  75       pro(pro_)   Instance of Products
  76       qual(qual_) Instance of Qualities
  77       pool(pool_) Instance of Pools
  78   
  79   
  80   
  81  parameters cl(comp_)          min use of raw material
  82             cu(comp_)          max avaialbility of raw material
  83             cprice(comp_)      unit cost of raw materials
  84             cqual(comp_,qual_) quality of raw material
  85   
  86             prl(pro_)          min product output
  87             pru(pro_)          max product output
  88             pprice(pro_)       product price
  89             pqlbd(pro_,qual_)  min product quality
  90             pqubd(pro_,qual_)  max product quality
  91   
  92             psize(pool_)      pool capacity
  93   
  94   
  95  variables  q(comp_, pool_) pool quality from pooling raw materials
  96             y(pool_, pro_)  flow from pool to product
  97             z(comp_, pro_)  direct flow of rawmaterials to product
  98             cost          total cost
  99  positive variables q,y,z;
 100   
 101  equations obj                    objective function,
 102            clower(comp_)          lower bound component availability
 103            cupper(comp_)          upper bound component availability
 104            pszrlt(comp_,pool_)    ss-rlt on pool size constraints
 105            plower(pro_)           minimum product production
 106            pupper(pro_)           maximum product demand
 107            pqlower(pro_,qual_)    minimum product quality requirement
 108            pqupper(pro_,qual_)    maximum product quality
 109            fraction(pool_)        fractions sum to one
 110            extensions(pool_,pro_) convexification constraints;
 111   
 112  set z_dom(comp_,pro_)        domain of z
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 11:22:58 Page 4
The Pooling Problem (POOL,SEQ=254)
C o m p i l a t i o n


 113      y_dom(pool_,pro_)        domain of y
 114      q_dom(comp_,pool_)       domain of q
 115      qy_dom(comp_,pool_,pro_) domain of q*y;
 116   
 117   
 118  obj.. cost =e=
 119   
 120    sum(qy_dom(comp,pool,pro), cprice(comp)*q(comp,pool)*y(pool,pro))
 121   
 122   - sum(y_dom(pool,pro), pprice(pro)*y(pool, pro))
 123   
 124   + sum(z_dom(comp,pro), (cprice(comp)-pprice(pro))*z(comp,pro));
 125   
 126   
 127  clower(comp).. sum(qy_dom(comp,pool,pro), q(comp,pool)*y(pool,pro))
 128               + sum(z_dom(comp,pro), z(comp, pro)) =g= cl(comp);
 129   
 130  cupper(comp).. sum(qy_dom(comp,pool,pro), q(comp,pool)*y(pool,pro))
 131               + sum(z_dom(comp,pro), z(comp, pro)) =l= cu(comp);
 132   
 133  pszrlt(q_dom(comp,pool))..
 134     sum(y_dom(pool,pro), q(comp,pool)*y(pool,pro)) =l= q(comp,pool)*psize(pool);
 135   
 136  plower(pro).. sum(y_dom(pool,pro),  y(pool,pro))
 137              + sum(z_dom(comp, pro), z(comp, pro)) =g= prl(pro);
 138   
 139  pupper(pro).. sum(y_dom(pool,pro),  y(pool,pro))
 140              + sum(z_dom(comp, pro), z(comp, pro)) =l= pru(pro);
 141   
 142   
 143  pqlower(pro,qual)..
 144      sum(qy_dom(comp,pool,pro), cqual(comp, qual)*q(comp,pool)*y(pool,pro))
 145    + sum(z_dom(comp,pro),       cqual(comp,qual)*z(comp, pro))
 146  =g= sum(y_dom(pool,pro),       pqlbd(pro,qual)*y(pool,pro))
 147    + sum(z_dom(comp,pro),       pqlbd(pro,qual)*z(comp,pro));
 148   
 149  pqupper(pro,qual)..
 150      sum(qy_dom(comp,pool,pro), cqual(comp, qual)*q(comp,pool)*y(pool,pro))
 151    + sum(z_dom(comp,pro),       cqual(comp,qual)*z(comp, pro))
 152  =l= sum(y_dom(pool,pro),       pqubd(pro,qual)*y(pool,pro))
 153    + sum(z_dom(comp,pro),       pqubd(pro,qual)*z(comp,pro));
 154   
 155  fraction(pool).. sum(q_dom(comp,pool), q(comp, pool)) =e= 1;
 156   
 157  extensions(y_dom(pool, pro))..
 158     sum(q_dom(comp,pool), q(comp,pool)*y(pool,pro)) =e= y(pool,pro);
 159   
 160  model poolprob /all/;
 161   
 163  Sets comp_ Components and Raw Materials / c1*c32 /
 164       pro_  Products                     / p1*p16 /
 165       qual_ Qualities                    / q1*q10 /
 166       pool_ Pools                        / o1*o10 /
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 11:22:58 Page 5
The Pooling Problem (POOL,SEQ=254)
C o m p i l a t i o n


 167   
 168       case case index / haverly1*haverly3
 169                         foulds2*foulds5
 170                         bental4*bental5
 171                         rt2
 172                         adhya1*adhya4        /
 173   
 174       labels / lo lower bound, up upper bound, price /
 175   
 176  parameter sol(case) global solution /
 177                      haverly1 -400,
 178                      haverly2 -600,
 179                      haverly3 -750
 180                      foulds2 -1100,
 181                      foulds3*foulds5 - 8
 182                      bental4 -450,
 183                      bental5 -3500
 184                      rt2 -4391.8258928
 185                      adhya1*adhya2 -549.80305,
 186                      adhya3 -561.044687,
 187                      adhya4 -877.64574   /
 188   
 189  table ComponentData(case,comp_,labels)
 190   
 191                lo   up      price
 192  adhya1 .c1     0   75        7
 193  adhya1 .c2     0   75        3
 194  adhya1 .c3     0   75        2
 195  adhya1 .c4     0   75       10
 196  adhya1 .c5     0   75        5
 197   
 198  adhya2 .c1     0   75        7
 199  adhya2 .c2     0   75        3
 200  adhya2 .c3     0   75        2
 201  adhya2 .c4     0   75       10
 202  adhya2 .c5     0   75        5
 203   
 204  adhya3 .c1     0   75        7
 205  adhya3 .c2     0   75        3
 206  adhya3 .c3     0   75        2
 207  adhya3 .c4     0   75       10
 208  adhya3 .c5     0   75        5
 209  adhya3 .c6     0   75        5
 210  adhya3 .c7     0   75        9
 211  adhya3 .c8     0   75       11
 212   
 213  adhya4 .c1     0   85       15
 214  adhya4 .c2     0   85        7
 215  adhya4 .c3     0   85        4
 216  adhya4 .c4     0   85        5
 217  adhya4 .c5     0   85        6
 218  adhya4 .c6     0   85        3
 219  adhya4 .c7     0   85        5
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 11:22:58 Page 6
The Pooling Problem (POOL,SEQ=254)
C o m p i l a t i o n


 220  adhya4 .c8     0   85        5
 221   
 222  rt2    .c1     0   60.9756  49.2
 223  rt2    .c2     0  161.29    62
 224  rt2    .c3     0    5      300
 225   
 226  bental4.c1     0  300        6
 227  bental4.c2     0   50       15
 228  bental4.c3     0  300       16
 229  bental4.c4     0  300       10
 230   
 231  bental5.c1    0   600        6
 232  bental5.c2    0   600       16
 233  bental5.c3    0   600       15
 234  bental5.c4    0   600       12
 235  bental5.c5    0   600        6
 236  bental5.c6    0   600       16
 237  bental5.c7    0   600       15
 238  bental5.c8    0   600       12
 239  bental5.c9    0   600        6
 240  bental5.c10   0   600       16
 241  bental5.c11   0   600       15
 242  bental5.c12   0   600       12
 243  bental5.c13   0   600       10
 244   
 245  haverly1.c1   0   300        6
 246  haverly1.c2   0   300       16
 247  haverly1.c3   0   300       10
 248   
 249  haverly2.c1   0   800        6
 250  haverly2.c2   0   800       16
 251  haverly2.c3   0   800       10
 252   
 253  haverly3.c1   0   300        6
 254  haverly3.c2   0   300       13
 255  haverly3.c3   0   300       10
 256   
 257  foulds2 .c1   0   600        6
 258  foulds2 .c2   0   600       16
 259  foulds2 .c3   0   600       10
 260  foulds2 .c4   0   600        3
 261  foulds2 .c5   0   600       13
 262  foulds2 .c6   0   600        7
 263   
 264  foulds3 .c1   0    16       20
 265  foulds3 .c2   0    16       19
 266  foulds3 .c3   0    16       18
 267  foulds3 .c4   0    16       17
 268  foulds3 .c5   0    16       19
 269  foulds3 .c6   0    16       18
 270  foulds3 .c7   0    16       17
 271  foulds3 .c8   0    16       16
 272  foulds3 .c9   0    16       18
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 11:22:58 Page 7
The Pooling Problem (POOL,SEQ=254)
C o m p i l a t i o n


 273  foulds3 .c10  0    16       17
 274  foulds3 .c11  0    16       16
 275  foulds3 .c12  0    16       15
 276  foulds3 .c13  0    16       17
 277  foulds3 .c14  0    16       16
 278  foulds3 .c15  0    16       15
 279  foulds3 .c16  0    16       14
 280  foulds3 .c17  0    16       16
 281  foulds3 .c18  0    16       15
 282  foulds3 .c19  0    16       14
 283  foulds3 .c20  0    16       13
 284  foulds3 .c21  0    16       15
 285  foulds3 .c22  0    16       14
 286  foulds3 .c23  0    16       13
 287  foulds3 .c24  0    16       12
 288  foulds3 .c25  0    16       14
 289  foulds3 .c26  0    16       13
 290  foulds3 .c27  0    16       12
 291  foulds3 .c28  0    16       11
 292  foulds3 .c29  0    16       13
 293  foulds3 .c30  0    16       12
 294  foulds3 .c31  0    16       11
 295  foulds3 .c32  0    16       10
 296   
 297  foulds4 .c1   0    16       20
 298  foulds4 .c2   0    16       19
 299  foulds4 .c3   0    16       18
 300  foulds4 .c4   0    16       17
 301  foulds4 .c5   0    16       16
 302  foulds4 .c6   0    16       15
 303  foulds4 .c7   0    16       14
 304  foulds4 .c8   0    16       13
 305  foulds4 .c9   0    16       12
 306  foulds4 .c10  0    16       11
 307  foulds4 .c11  0    16       10
 308   
 309  foulds5 .c1   0    16       20
 310  foulds5 .c2   0    16       19
 311  foulds5 .c3   0    16       18
 312  foulds5 .c4   0    16       17
 313  foulds5 .c5   0    16       16
 314  foulds5 .c6   0    16       15
 315  foulds5 .c7   0    16       14
 316  foulds5 .c8   0    16       13
 317  foulds5 .c9   0    16       12
 318  foulds5 .c10  0    16       11
 319  foulds5 .c11  0    16       10
 320   
 321   
 322   
 323  table ComponentQuality(case,comp_,qual_)
 324   
 325                  q1   q2   q3   q4   q5   q6
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 11:22:58 Page 8
The Pooling Problem (POOL,SEQ=254)
C o m p i l a t i o n


 326  adhya1 .c1       1    6    4  0.5
 327  adhya1 .c2       4    1    3    2
 328  adhya1 .c3       4  5.5    3  0.9
 329  adhya1 .c4       3    3    3    1
 330  adhya1 .c5       1  2.7    4  1.6
 331   
 332  adhya2 .c1       1    6    4  0.5    5    9
 333  adhya2 .c2       4    1    3    2    4    4
 334  adhya2 .c3       4  5.5    3  0.9    7   10
 335  adhya2 .c4       3    3    3    1    3    4
 336  adhya2 .c5       1  2.7    4  1.6    3    7
 337   
 338  adhya3 .c1       1    6    4  0.5    5    9
 339  adhya3 .c2       4    1    3    2    4    4
 340  adhya3 .c3       4  5.5    3  0.9    7   10
 341  adhya3 .c4       3    3    3    1    3    4
 342  adhya3 .c5       1  2.7    4  1.6    3    7
 343  adhya3 .c6     1.8  2.7    4  3.5  6.1    3
 344  adhya3 .c7       5    1  1.7  2.9  3.5  2.9
 345  adhya3 .c8       3    3    3    1    5    2
 346   
 347  adhya4 .c1     0.5  1.9  1.3    1
 348  adhya4 .c2     1.4  1.8  1.7  1.6
 349  adhya4 .c3     1.2  1.9  1.4  1.4
 350  adhya4 .c4     1.5  1.2  1.7  1.3
 351  adhya4 .c5     1.6  1.8  1.6    2
 352  adhya4 .c6     1.2  1.1  1.4    2
 353  adhya4 .c7     1.5  1.5  1.5  1.5
 354  adhya4 .c8     1.4  1.6  1.2  1.6
 355   
 356  rt2    .c1     0.82 3    99.2 90.5
 357  rt2    .c2     0.62 0    87.9 83.5
 358  rt2    .c3     0.75 0    114  98.7
 359   
 360  bental4.c1      3
 361  bental4.c2      1
 362  bental4.c3      1
 363  bental4.c4      2
 364   
 365  bental5.c1      3     1
 366  bental5.c2      1     3
 367  bental5.c3    1.2     5
 368  bental5.c4    1.5   2.5
 369  bental5.c5      3     1
 370  bental5.c6      1     3
 371  bental5.c7    1.2     5
 372  bental5.c8    1.5   2.5
 373  bental5.c9      3     1
 374  bental5.c10     1     3
 375  bental5.c11   1.2     5
 376  bental5.c12   1.5   2.5
 377  bental5.c13     2   2.5
 378   
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 11:22:58 Page 9
The Pooling Problem (POOL,SEQ=254)
C o m p i l a t i o n


 379  haverly1.c1     3
 380  haverly1.c2     1
 381  haverly1.c3     2
 382   
 383  haverly2.c1     3
 384  haverly2.c2     1
 385  haverly2.c3     2
 386   
 387  haverly3.c1     3
 388  haverly3.c2     1
 389  haverly3.c3     2
 390   
 391  foulds2 .c1     3
 392  foulds2 .c2     1
 393  foulds2 .c3     2
 394  foulds2 .c4   3.5
 395  foulds2 .c5   1.5
 396  foulds2 .c6   2.5
 397   
 398  foulds3 .c1   1
 399  foulds3 .c2   1.1
 400  foulds3 .c3   1.2
 401  foulds3 .c4   1.3
 402  foulds3 .c5   1.1
 403  foulds3 .c6   1.2
 404  foulds3 .c7   1.3
 405  foulds3 .c8   1.4
 406  foulds3 .c9   1.2
 407  foulds3 .c10  1.3
 408  foulds3 .c11  1.4
 409  foulds3 .c12  1.5
 410  foulds3 .c13  1.3
 411  foulds3 .c14  1.4
 412  foulds3 .c15  1.5
 413  foulds3 .c16  1.6
 414  foulds3 .c17  1.4
 415  foulds3 .c18  1.5
 416  foulds3 .c19  1.6
 417  foulds3 .c20  1.7
 418  foulds3 .c21  1.5
 419  foulds3 .c22  1.6
 420  foulds3 .c23  1.7
 421  foulds3 .c24  1.8
 422  foulds3 .c25  1.6
 423  foulds3 .c26  1.7
 424  foulds3 .c27  1.8
 425  foulds3 .c28  1.9
 426  foulds3 .c29  1.7
 427  foulds3 .c30  1.8
 428  foulds3 .c31  1.9
 429  foulds3 .c32  2
 430   
 431  foulds4 .c1   1
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 10
The Pooling Problem (POOL,SEQ=254)
C o m p i l a t i o n


 432  foulds4 .c2   1.1
 433  foulds4 .c3   1.2
 434  foulds4 .c4   1.3
 435  foulds4 .c5   1.4
 436  foulds4 .c6   1.5
 437  foulds4 .c7   1.6
 438  foulds4 .c8   1.7
 439  foulds4 .c9   1.8
 440  foulds4 .c10  1.9
 441  foulds4 .c11  2
 442   
 443  foulds5 .c1   1
 444  foulds5 .c2   1.1
 445  foulds5 .c3   1.2
 446  foulds5 .c4   1.3
 447  foulds5 .c5   1.4
 448  foulds5 .c6   1.5
 449  foulds5 .c7   1.6
 450  foulds5 .c8   1.7
 451  foulds5 .c9   1.8
 452  foulds5 .c10  1.9
 453  foulds5 .c11  2
 454   
 455   
 456  table ProductData(case,pro_,labels)
 457   
 458                lo   up  price
 459  adhya1 .p1     0   10   16
 460  adhya1 .p2     0   25   25
 461  adhya1 .p3     0   30   15
 462  adhya1 .p4     0   10   10
 463   
 464  adhya2 .p1     0   10   16
 465  adhya2 .p2     0   25   25
 466  adhya2 .p3     0   30   15
 467  adhya2 .p4     0   10   10
 468   
 469  adhya3 .p1     0   10   16
 470  adhya3 .p2     0   25   25
 471  adhya3 .p3     0   30   15
 472  adhya3 .p4     0   10   10
 473   
 474  adhya4 .p1     0   15   10
 475  adhya4 .p2     0   25   25
 476  adhya4 .p3     0   10   30
 477  adhya4 .p4     0   20    6
 478  adhya4 .p5     0   15   10
 479   
 480  rt2    .p1     5  300  190
 481  rt2    .p2     5  300  230
 482  rt2    .p3     5  300  150
 483   
 484  bental4.p1     0  100    9
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 11
The Pooling Problem (POOL,SEQ=254)
C o m p i l a t i o n


 485  bental4.p2     0  200   15
 486   
 487  bental5.p1     0  100   18
 488  bental5.p2     0  200   15
 489  bental5.p3     0  100   19
 490  bental5.p4     0  100   16
 491  bental5.p5     0  100   14
 492   
 493  haverly1.p1    0  100    9
 494  haverly1.p2    0  200   15
 495   
 496  haverly2.p1    0  600    9
 497  haverly2.p2    0  200   15
 498   
 499  haverly3.p1    0  100    9
 500  haverly3.p2    0  200   15
 501   
 502  foulds2 .p1    0  100    9
 503  foulds2 .p2    0  200   15
 504  foulds2 .p3    0  100    6
 505  foulds2 .p4    0  200   12
 506   
 507  foulds3 .p1    0    1   20
 508  foulds3 .p2    0    1   19.5
 509  foulds3 .p3    0    1   19
 510  foulds3 .p4    0    1   18.5
 511  foulds3 .p5    0    1   18
 512  foulds3 .p6    0    1   17.5
 513  foulds3 .p7    0    1   17
 514  foulds3 .p8    0    1   16.5
 515  foulds3 .p9    0    1   16
 516  foulds3 .p10   0    1   15.5
 517  foulds3 .p11   0    1   15
 518  foulds3 .p12   0    1   14.5
 519  foulds3 .p13   0    1   14
 520  foulds3 .p14   0    1   13.5
 521  foulds3 .p15   0    1   13
 522  foulds3 .p16   0    1   12.5
 523   
 524  foulds4 .p1    0    1   20
 525  foulds4 .p2    0    1   19.5
 526  foulds4 .p3    0    1   19
 527  foulds4 .p4    0    1   18.5
 528  foulds4 .p5    0    1   18
 529  foulds4 .p6    0    1   17.5
 530  foulds4 .p7    0    1   17
 531  foulds4 .p8    0    1   16.5
 532  foulds4 .p9    0    1   16
 533  foulds4 .p10   0    1   15.5
 534  foulds4 .p11   0    1   15
 535  foulds4 .p12   0    1   14.5
 536  foulds4 .p13   0    1   14
 537  foulds4 .p14   0    1   13.5
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 12
The Pooling Problem (POOL,SEQ=254)
C o m p i l a t i o n


 538  foulds4 .p15   0    1   13
 539  foulds4 .p16   0    1   12.5
 540   
 541  foulds5 .p1    0    1   20
 542  foulds5 .p2    0    1   19.5
 543  foulds5 .p3    0    1   19
 544  foulds5 .p4    0    1   18.5
 545  foulds5 .p5    0    1   18
 546  foulds5 .p6    0    1   17.5
 547  foulds5 .p7    0    1   17
 548  foulds5 .p8    0    1   16.5
 549  foulds5 .p9    0    1   16
 550  foulds5 .p10   0    1   15.5
 551  foulds5 .p11   0    1   15
 552  foulds5 .p12   0    1   14.5
 553  foulds5 .p13   0    1   14
 554  foulds5 .p14   0    1   13.5
 555  foulds5 .p15   0    1   13
 556  foulds5 .p16   0    1   12.5
 557   
 558   
 559  table ProductQualityLower(case,pro_,qual_)
 560   
 561                q1   q2   q3   q4   q5   q6
 562   
 563  rt2    .p1   0.74  0    95   85
 564  rt2    .p2   0.74  0    96   88
 565  rt2    .p3   0.74  0    91 83.5
 566   
 567   
 568  table ProductQualityUpper(case,pro_,qual_)
 569   
 570                  q1    q2    q3    q4    q5    q6
 571  adhya1 .p1       3     3  3.25  0.75
 572  adhya1 .p2       4   2.5  3.5   1.5
 573  adhya1 .p3     1.5   5.5  3.9   0.8
 574  adhya1 .p4       3     4    4   1.8
 575   
 576  adhya2 .p1       3     3  3.25  0.75    6     5
 577  adhya2 .p2       4   2.5  3.5   1.5     7     6
 578  adhya2 .p3     1.5   5.5  3.9   0.8     7     6
 579  adhya2 .p4       3     4    4   1.8     8     6
 580   
 581  adhya3 .p1       3     3  3.25  0.75    6     5
 582  adhya3 .p2       4   2.5  3.5   1.5     7     6
 583  adhya3 .p3     1.5   5.5  3.9   0.8     7     6
 584  adhya3 .p4       3     4    4   1.8     8     6
 585   
 586  adhya4 .p1     1.2   1.7  1.4   1.7
 587  adhya4 .p2     1.4   1.3  1.8   1.4
 588  adhya4 .p3     1.3   1.3  1.9   1.9
 589  adhya4 .p4     1.2   1.1  1.7   1.6
 590  adhya4 .p5     1.6   1.9    2   2.5
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 13
The Pooling Problem (POOL,SEQ=254)
C o m p i l a t i o n


 591   
 592  rt2    .p1     0.79  3    114  98.7
 593  rt2    .p2     0.79  0.9  114  98.7
 594  rt2    .p3     0.79  3    114  98.7
 595   
 596  bental4.p1     2.5
 597  bental4.p2     1.5
 598   
 599  bental5.p1     2.5   2
 600  bental5.p2     1.5   2.5
 601  bental5.p3       2   2.6
 602  bental5.p4       2   2
 603  bental5.p5       2   2
 604   
 605  haverly1.p1    2.5
 606  haverly1.p2    1.5
 607   
 608  haverly2.p1    2.5
 609  haverly2.p2    1.5
 610   
 611  haverly3.p1    2.5
 612  haverly3.p2    1.5
 613   
 614  foulds2 .p1    2.5
 615  foulds2 .p2    1.5
 616  foulds2 .p3    3
 617  foulds2 .p4    2
 618   
 619  foulds3 .p1    1.05
 620  foulds3 .p2    1.1
 621  foulds3 .p3    1.15
 622  foulds3 .p4    1.2
 623  foulds3 .p5    1.25
 624  foulds3 .p6    1.3
 625  foulds3 .p7    1.35
 626  foulds3 .p8    1.4
 627  foulds3 .p9    1.45
 628  foulds3 .p10   1.5
 629  foulds3 .p11   1.55
 630  foulds3 .p12   1.6
 631  foulds3 .p13   1.65
 632  foulds3 .p14   1.7
 633  foulds3 .p15   1.75
 634  foulds3 .p16   1.8
 635   
 636  foulds4 .p1    1.05
 637  foulds4 .p2    1.1
 638  foulds4 .p3    1.15
 639  foulds4 .p4    1.2
 640  foulds4 .p5    1.25
 641  foulds4 .p6    1.3
 642  foulds4 .p7    1.35
 643  foulds4 .p8    1.4
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 14
The Pooling Problem (POOL,SEQ=254)
C o m p i l a t i o n


 644  foulds4 .p9    1.45
 645  foulds4 .p10   1.5
 646  foulds4 .p11   1.55
 647  foulds4 .p12   1.6
 648  foulds4 .p13   1.65
 649  foulds4 .p14   1.7
 650  foulds4 .p15   1.75
 651  foulds4 .p16   1.8
 652   
 653  foulds5 .p1    1.05
 654  foulds5 .p2    1.1
 655  foulds5 .p3    1.15
 656  foulds5 .p4    1.2
 657  foulds5 .p5    1.25
 658  foulds5 .p6    1.3
 659  foulds5 .p7    1.35
 660  foulds5 .p8    1.4
 661  foulds5 .p9    1.45
 662  foulds5 .p10   1.5
 663  foulds5 .p11   1.55
 664  foulds5 .p12   1.6
 665  foulds5 .p13   1.65
 666  foulds5 .p14   1.7
 667  foulds5 .p15   1.75
 668  foulds5 .p16   1.8
 669   
 670   
 671  table Poolsize(case,pool_)
 672   
 673            o1   o2   o3   o4   o5   o6   o7   o8
 674   
 675  adhya1    75   75
 676  adhya2    75   75
 677  adhya3    75   75   75
 678  adhya4    85   85
 679  rt2       12.5 17.5
 680  bental4  300
 681  bental5  600  600  600
 682  haverly1 300
 683  haverly2 800
 684  haverly3 300
 685  foulds2  600  600
 686  foulds3   16   16   16   16   16   16   16   16
 687  foulds4   16   16   16   16   16   16   16   16
 688  foulds5   16   16   16   16   16   16   16   16
 689   
 690  table ComponentPoolFraction(case,comp_,pool_)  upper bound on q
 691   
 692                o1   o2   o3   o4   o5   o6   o7   o8
 693  adhya1 .c1     1
 694  adhya1 .c2     1
 695  adhya1 .c3          1
 696  adhya1 .c4          1
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 15
The Pooling Problem (POOL,SEQ=254)
C o m p i l a t i o n


 697  adhya1 .c5          1
 698   
 699  adhya2 .c1     1
 700  adhya2 .c2     1
 701  adhya2 .c3          1
 702  adhya2 .c4          1
 703  adhya2 .c5          1
 704   
 705  adhya3 .c1     1
 706  adhya3 .c2     1
 707  adhya3 .c3          1
 708  adhya3 .c4          1
 709  adhya3 .c5          1
 710  adhya3 .c6               1
 711  adhya3 .c7               1
 712  adhya3 .c8               1
 713   
 714  adhya4 .c1     1
 715  adhya4 .c2     1
 716  adhya4 .c3     1
 717  adhya4 .c4     1
 718  adhya4 .c5          1
 719  adhya4 .c6          1
 720  adhya4 .c7          1
 721  adhya4 .c8          1
 722   
 723  rt2    .c1     1    1
 724  rt2    .c2     1    1
 725  rt2    .c3     1    1
 726   
 727  bental4.c1     1
 728  bental4.c2     1
 729  bental4.c3     1
 730  bental4.c4
 731   
 732  bental5.c1     1
 733  bental5.c2     1
 734  bental5.c3     1
 735  bental5.c4     1
 736  bental5.c5          1
 737  bental5.c6          1
 738  bental5.c7          1
 739  bental5.c8          1
 740  bental5.c9               1
 741  bental5.c10              1
 742  bental5.c11              1
 743  bental5.c12              1
 744  bental5.c13
 745   
 746  haverly1.c1    1
 747  haverly1.c2    1
 748  haverly1.c3
 749   
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 16
The Pooling Problem (POOL,SEQ=254)
C o m p i l a t i o n


 750  haverly2.c1    1
 751  haverly2.c2    1
 752  haverly2.c3    0
 753   
 754  haverly3.c1    1
 755  haverly3.c2    1
 756  haverly3.c3
 757   
 758  foulds2 .c1    1
 759  foulds2 .c2    1
 760  foulds2 .c3
 761  foulds2 .c4         1
 762  foulds2 .c5         1
 763  foulds2 .c6
 764   
 765  *             o1   o2   o3   o4   o5   o6   o7   o8
 766   
 767  foulds3 .c1    1
 768  foulds3 .c2    1
 769  foulds3 .c3    1
 770  foulds3 .c4    1
 771  foulds3 .c5         1
 772  foulds3 .c6         1
 773  foulds3 .c7         1
 774  foulds3 .c8         1
 775  foulds3 .c9              1
 776  foulds3 .c10             1
 777  foulds3 .c11             1
 778  foulds3 .c12             1
 779  foulds3 .c13                  1
 780  foulds3 .c14                  1
 781  foulds3 .c15                  1
 782  foulds3 .c16                  1
 783  foulds3 .c17                       1
 784  foulds3 .c18                       1
 785  foulds3 .c19                       1
 786  foulds3 .c20                       1
 787  foulds3 .c21                            1
 788  foulds3 .c22                            1
 789  foulds3 .c23                            1
 790  foulds3 .c24                            1
 791  foulds3 .c25                                 1
 792  foulds3 .c26                                 1
 793  foulds3 .c27                                 1
 794  foulds3 .c28                                 1
 795  foulds3 .c29                                      1
 796  foulds3 .c30                                      1
 797  foulds3 .c31                                      1
 798  foulds3 .c32                                      1
 799   
 800  *             o1   o2   o3   o4   o5   o6   o7   o8
 801   
 802  foulds4 .c1    1
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 17
The Pooling Problem (POOL,SEQ=254)
C o m p i l a t i o n


 803  foulds4 .c2         1    1
 804  foulds4 .c3              1    1    1
 805  foulds4 .c4    1              1         1    1
 806  foulds4 .c5         1    1         1              1
 807  foulds4 .c6              1    1    1    1
 808  foulds4 .c7    1              1         1    1
 809  foulds4 .c8         1              1         1    1
 810  foulds4 .c9                             1    1    1
 811  foulds4 .c10   1                                  1
 812  foulds4 .c11        1
 813   
 814  *             o1   o2   o3   o4   o5   o6   o7   o8
 815   
 816  foulds5 .c1    1                             1
 817  foulds5 .c2    1         1                   1
 818  foulds5 .c3    1         1                   1
 819  foulds5 .c4    1         1         1         1
 820  foulds5 .c5              1         1              1
 821  foulds5 .c6                        1              1
 822  foulds5 .c7                   1    1              1
 823  foulds5 .c8         1         1         1         1
 824  foulds5 .c9         1         1         1
 825  foulds5 .c10        1         1         1
 826  foulds5 .c11        1                   1
 827   
 828   
 829  table PoolProductBound(case,pool_,pro_) upper bound on y
 830   
 831                    p1   p2   p3   p4   p5
 832  adhya1 .o1        10   25   30   10
 833  adhya1 .o2        30   10   10   25
 834   
 835  adhya2 .o1        10   25   30   10
 836  adhya2 .o2        30   10   10   25
 837   
 838  adhya3 .o1        10   25   30   10
 839  adhya3 .o2        10   10   25   30
 840  adhya3 .o3        30   10   10   25
 841   
 842  adhya4 .o1        15   25   10   20   15
 843  adhya4 .o2        10   20   15   15   25
 844   
 845  rt2    .o1       12.5 12.5 12.5
 846  rt2    .o2       17.5 17.5 17.5
 847   
 848  bental4.o1       100  200
 849   
 850  bental5.o1       100  200  100  100  100
 851  bental5.o2       100  100  100  200  100
 852  bental5.o3       200  100  100  100  100
 853   
 854  haverly1.o1      100  200
 855   
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 18
The Pooling Problem (POOL,SEQ=254)
C o m p i l a t i o n


 856  haverly2.o1      600  200
 857   
 858  haverly3.o1      100  200
 859   
 860  foulds2 .o1*o2   100  200  100  200
 861   
 862  foulds3. o1*o8    16   16   16   16   16
 863  foulds4. o1*o8    16   16   16   16   16
 864  foulds5. o1*o8    16   16   16   16   16
 865   
 866     +             p6*p16
 867  foulds3. o1*o8    16
 868  foulds4. o1*o8    16
 869  foulds5. o1*o8    16
 870   
 871   
 872  table ComponentProductBound(case,comp_,pro_)  upper bound on z
 873   
 874                   p1      p2      p3    p4    p5
 875  rt2    .c1        0     7.5       0
 876  rt2    .c2   161.29       0  161.29
 877  rt2    .c3      7.5       0       0
 878   
 879  bental4.c4      100     200
 880   
 881  bental5.c13     100     200     100   100   100
 882   
 883  haverly1.c3     100     200
 884  haverly2.c3     600     200
 885  haverly3.c3     100     200
 886   
 887  foulds2 .c3     100     200     100   200
 888  foulds2 .c6     100     200     100   200
 889   
 890   
 891  parameter rep1(case,*)  Problem Characteristics
 892            rep2(case,*)  Solution Summary;
 893   
 894  option optcr=0.0, optca=1e-6;
 895   
 896  loop(case,
 897   
 898     // extract domains for current problem
 899   
 900     comp(comp_) = ComponentData(case,comp_,'up');
 901     qual(qual_) = sum(comp_$ComponentQuality(case,comp_,qual_), 1);
 902     pool(pool_) = PoolSize(case,pool_);
 903     pro (pro_ ) = ProductData(case,pro_,'up');
 904   
 905   
 906     // extract data
 907   
 908     cl(comp)         = ComponentData(case,comp,'lo');
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 19
The Pooling Problem (POOL,SEQ=254)
C o m p i l a t i o n


 909     cu(comp)         = ComponentData(case,comp,'up');
 910     cprice(comp)     = ComponentData(case,comp,'price');
 911     cqual(comp,qual) = ComponentQuality(case,comp,qual);
 912   
 913     prl(pro)        = ProductData(case,pro,'lo');
 914     pru(pro)        = ProductData(case,pro,'up');
 915     pprice(pro)     = ProductData(case,pro,'price');
 916     pqlbd(pro,qual) = ProductQualityLower(case,pro,qual);
 917     pqubd(pro,qual) = ProductQualityUpper(case,pro,qual);
 918   
 919     psize(pool)     = PoolSize(case,pool);
 920   
 921     // find domain restrictions
 922   
 923     y_dom(pool,pro)       = PoolProductBound(case,pool,pro);
 924     z_dom(comp,pro)       = ComponentProductBound(case,comp,pro);
 925     q_dom(comp,pool)      = ComponentPoolFraction(case,comp,pool);
 926     qy_dom(comp,pool,pro) = q_dom(comp,pool)*y_dom(pool,pro);
 927   
 928     option clear=q,clear=y,clear=z;  // start from same default point
 929     option clear=obj,clear=clower,clear=cupper,clear=pszrlt,clear=plower,clear=pupper
 930            clear=pqlower,clear=pqupper,clear=fraction,clear=extensions;
 931   
 932     // set variable bounds
 933   
 934     q.up(comp,pool) = ComponentPoolFraction(case,comp, pool);
 935     y.up(pool,pro)  = PoolProductBound(case,pool,pro);
 936     z.up(comp,pro)  = ComponentProductBound(case,comp,pro);
 937   
 938     // loacl solvers need a better starting point than 0*0
 939     // anything better than 0 will do, without this starting
 940     // point, most local solvers will give very poor results or
 941     // get stuck at a local stationary point
 942   
 943     q.l(comp,pool) = 0.1;
 944     y.l(pool,pro)  = 0.1;
 945     z.l(comp,pro)  = 0.1;
 946   
 947     solve poolprob minimizing cost using nlp;
 948   
 949     rep1(case, 'RawMat')    = card(comp);
 950     rep1(case, 'Products')  = card(pro);
 951     rep1(case, 'Qualities') = card(qual);
 952     rep1(case, 'Pools')     = card(pool);
 953     rep1(case, 'Equs')      = poolprob.numequ;
 954     rep1(case, 'Vars')      = poolprob.numvar;
 955     rep1(case, 'NZ')        = poolprob.numnz;
 956   
 957     rep2(case, 'Solstat')   = poolprob.solvestat;
 958     rep2(case, 'Modstat')   = poolprob.modelstat;
 959     rep2(case, 'Obj')       = poolprob.objval;
 960     rep2(case, 'CPU')       = poolprob.resusd;
 961   
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 20
The Pooling Problem (POOL,SEQ=254)
C o m p i l a t i o n


 962  );
 963   
 964  rep2(case,'GlobalObj') = sol(case);
 965  rep2(case,'optcr')$(abs(sol(case)) > 1e-6)= round(abs((rep2(case,'Obj') - sol(case))/sol(case)),6);
 966  rep2(case,'optca')$(abs(sol(case)) > 1e-6)= round(abs(rep2(case,'Obj') - sol(case)),6);
 967   
 968  display rep1, rep2;
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 21
The Pooling Problem (POOL,SEQ=254)
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  /home/renigijus/gams/opt-mod-lib/gamslib/pool/pool.gms
     2       56 INCLUDE        1      56  ./home/renigijus/gams/opt-mod-lib/gamslib/pool/poolmod.inc


COMPILATION TIME     =        0.004 SECONDS      3 MB  24.7.4 r58773 LEX-LEG
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 22
The Pooling Problem (POOL,SEQ=254)
Equation Listing    SOLVE poolprob Using NLP From line 947


---- obj  =E=  objective function

obj..  - (1.2)*q(c1,o1) - (3.2)*q(c2,o1) + (6.8)*y(o1,p1) + (12.8)*y(o1,p2) - z(c3,p1) + 5*z(c3,p2) + cost =E= 0 ; (LHS = 2.36, INFES = 2.36 ****)
     

---- clower  =G=  lower bound component availability

clower(c1)..  (0.2)*q(c1,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) =G= 0 ; (LHS = 0.02)
     
clower(c2)..  (0.2)*q(c2,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) =G= 0 ; (LHS = 0.02)
     
clower(c3)..  z(c3,p1) + z(c3,p2) =G= 0 ; (LHS = 0.2)
     

---- cupper  =L=  upper bound component availability

cupper(c1)..  (0.2)*q(c1,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) =L= 300 ; (LHS = 0.0199999999999818)
     
cupper(c2)..  (0.2)*q(c2,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) =L= 300 ; (LHS = 0.0199999999999818)
     
cupper(c3)..  z(c3,p1) + z(c3,p2) =L= 300 ; (LHS = 0.199999999999989)
     

---- pszrlt  =L=  ss-rlt on pool size constraints

pszrlt(c1,o1)..  - (299.8)*q(c1,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) =L= 0 ; (LHS = -29.98)
     
pszrlt(c2,o1)..  - (299.8)*q(c2,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) =L= 0 ; (LHS = -29.98)
     

---- plower  =G=  minimum product production

plower(p1)..  y(o1,p1) + z(c3,p1) =G= 0 ; (LHS = 0.2)
     
plower(p2)..  y(o1,p2) + z(c3,p2) =G= 0 ; (LHS = 0.2)
     

---- pupper  =L=  maximum product demand

pupper(p1)..  y(o1,p1) + z(c3,p1) =L= 100 ; (LHS = 0.200000000000003)
     
pupper(p2)..  y(o1,p2) + z(c3,p2) =L= 200 ; (LHS = 0.199999999999989)
     

---- pqlower  =G=  minimum product quality requirement

pqlower(p1,q1)..  (0.3)*q(c1,o1) + (0.1)*q(c2,o1) + (0.4)*y(o1,p1) + 2*z(c3,p1) =G= 0 ; (LHS = 0.24)
     
pqlower(p2,q1)..  (0.3)*q(c1,o1) + (0.1)*q(c2,o1) + (0.4)*y(o1,p2) + 2*z(c3,p2) =G= 0 ; (LHS = 0.24)
     
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 23
The Pooling Problem (POOL,SEQ=254)
Equation Listing    SOLVE poolprob Using NLP From line 947


---- pqupper  =L=  maximum product quality

pqupper(p1,q1)..  (0.3)*q(c1,o1) + (0.1)*q(c2,o1) - (2.1)*y(o1,p1) - 0.5*z(c3,p1) =L= 0 ; (LHS = -0.26)
     
pqupper(p2,q1)..  (0.3)*q(c1,o1) + (0.1)*q(c2,o1) - (1.1)*y(o1,p2) + 0.5*z(c3,p2) =L= 0 ; (LHS = -0.06)
     

---- fraction  =E=  fractions sum to one

fraction(o1)..  q(c1,o1) + q(c2,o1) =E= 1 ; (LHS = 0.2, INFES = 0.8 ****)
     

---- extensions  =E=  convexification constraints

extensions(o1,p1)..  (0.1)*q(c1,o1) + (0.1)*q(c2,o1) - (0.8)*y(o1,p1) =E= 0 ; (LHS = -0.08, INFES = 0.08 ****)
     
extensions(o1,p2)..  (0.1)*q(c1,o1) + (0.1)*q(c2,o1) - (0.8)*y(o1,p2) =E= 0 ; (LHS = -0.08, INFES = 0.08 ****)
     
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 24
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


---- q  pool quality from pooling raw materials

q(c1,o1)
                (.LO, .L, .UP, .M = 0, 0.1, 1, 0)
      (-1.2)    obj
       (0.2)    clower(c1)
       (0.2)    cupper(c1)
    (-299.8)    pszrlt(c1,o1)
       (0.3)    pqlower(p1,q1)
       (0.3)    pqlower(p2,q1)
       (0.3)    pqupper(p1,q1)
       (0.3)    pqupper(p2,q1)
        1       fraction(o1)
       (0.1)    extensions(o1,p1)
       (0.1)    extensions(o1,p2)

q(c2,o1)
                (.LO, .L, .UP, .M = 0, 0.1, 1, 0)
      (-3.2)    obj
       (0.2)    clower(c2)
       (0.2)    cupper(c2)
    (-299.8)    pszrlt(c2,o1)
       (0.1)    pqlower(p1,q1)
       (0.1)    pqlower(p2,q1)
       (0.1)    pqupper(p1,q1)
       (0.1)    pqupper(p2,q1)
        1       fraction(o1)
       (0.1)    extensions(o1,p1)
       (0.1)    extensions(o1,p2)


---- y  flow from pool to product

y(o1,p1)
                (.LO, .L, .UP, .M = 0, 0.1, 100, 0)
       (6.8)    obj
       (0.1)    clower(c1)
       (0.1)    clower(c2)
       (0.1)    cupper(c1)
       (0.1)    cupper(c2)
       (0.1)    pszrlt(c1,o1)
       (0.1)    pszrlt(c2,o1)
        1       plower(p1)
        1       pupper(p1)
       (0.4)    pqlower(p1,q1)
      (-2.1)    pqupper(p1,q1)
      (-0.8)    extensions(o1,p1)

y(o1,p2)
                (.LO, .L, .UP, .M = 0, 0.1, 200, 0)
      (12.8)    obj
       (0.1)    clower(c1)
       (0.1)    clower(c2)
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 25
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


     y  flow from pool to product

       (0.1)    cupper(c1)
       (0.1)    cupper(c2)
       (0.1)    pszrlt(c1,o1)
       (0.1)    pszrlt(c2,o1)
        1       plower(p2)
        1       pupper(p2)
       (0.4)    pqlower(p2,q1)
      (-1.1)    pqupper(p2,q1)
      (-0.8)    extensions(o1,p2)


---- z  direct flow of rawmaterials to product

z(c3,p1)
                (.LO, .L, .UP, .M = 0, 0.1, 100, 0)
       -1       obj
        1       clower(c3)
        1       cupper(c3)
        1       plower(p1)
        1       pupper(p1)
        2       pqlower(p1,q1)
       -0.5     pqupper(p1,q1)

z(c3,p2)
                (.LO, .L, .UP, .M = 0, 0.1, 200, 0)
        5       obj
        1       clower(c3)
        1       cupper(c3)
        1       plower(p2)
        1       pupper(p2)
        2       pqlower(p2,q1)
        0.5     pqupper(p2,q1)


---- cost  total cost

cost
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       obj

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 26
The Pooling Problem (POOL,SEQ=254)
Model Statistics    SOLVE poolprob Using NLP From line 947


LOOPS                                 case   haverly1


MODEL STATISTICS

BLOCKS OF EQUATIONS          10     SINGLE EQUATIONS           20
BLOCKS OF VARIABLES           4     SINGLE VARIABLES            7
NON ZERO ELEMENTS            61     NON LINEAR N-Z             40
DERIVATIVE POOL              20     CONSTANT POOL              23
CODE LENGTH                 121


GENERATION TIME      =        0.003 SECONDS      4 MB  24.7.4 r58773 LEX-LEG


EXECUTION TIME       =        0.003 SECONDS      4 MB  24.7.4 r58773 LEX-LEG
               L O O P S               case haverly1

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 27
The Pooling Problem (POOL,SEQ=254)
Solution Report     SOLVE poolprob Using NLP From line 947


               S O L V E      S U M M A R Y

     MODEL   poolprob            OBJECTIVE  cost
     TYPE    NLP                 DIRECTION  MINIMIZE
     SOLVER  CONVERT             FROM LINE  947

**** SOLVER STATUS     1 Normal Completion         
**** MODEL STATUS      14 No Solution Returned     
**** OBJECTIVE VALUE                0.0000

 RESOURCE USAGE, LIMIT          0.000      1000.000
 ITERATION COUNT, LIMIT         0    2000000000
 EVALUATION ERRORS              0             0

Convert 2.0      24.7.4 r58773 Released Sep 19, 2016 LEG x86 64bit/Linux      

--- Using Option File
Reading parameter(s) from "/home/renigijus/gams/opt-mod-lib/gamslib/pool/convert.opt"
>>  ampl pool-scalar.mod
Finished reading from "/home/renigijus/gams/opt-mod-lib/gamslib/pool/convert.opt"
Ampl      : pool-scalar.mod


No solution returned
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 28
The Pooling Problem (POOL,SEQ=254)
Equation Listing    SOLVE poolprob Using NLP From line 947


---- obj  =E=  objective function

obj..  - (1.2)*q(c1,o1) - (3.2)*q(c2,o1) + (6.8)*y(o1,p1) + (12.8)*y(o1,p2) - z(c3,p1) + 5*z(c3,p2) + cost =E= 0 ; (LHS = 2.36, INFES = 2.36 ****)
     

---- clower  =G=  lower bound component availability

clower(c1)..  (0.2)*q(c1,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) =G= 0 ; (LHS = 0.02)
     
clower(c2)..  (0.2)*q(c2,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) =G= 0 ; (LHS = 0.02)
     
clower(c3)..  z(c3,p1) + z(c3,p2) =G= 0 ; (LHS = 0.2)
     

---- cupper  =L=  upper bound component availability

cupper(c1)..  (0.2)*q(c1,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) =L= 800 ; (LHS = 0.0199999999999818)
     
cupper(c2)..  (0.2)*q(c2,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) =L= 800 ; (LHS = 0.0199999999999818)
     
cupper(c3)..  z(c3,p1) + z(c3,p2) =L= 800 ; (LHS = 0.200000000000045)
     

---- pszrlt  =L=  ss-rlt on pool size constraints

pszrlt(c1,o1)..  - (799.8)*q(c1,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) =L= 0 ; (LHS = -79.98)
     
pszrlt(c2,o1)..  - (799.8)*q(c2,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) =L= 0 ; (LHS = -79.98)
     

---- plower  =G=  minimum product production

plower(p1)..  y(o1,p1) + z(c3,p1) =G= 0 ; (LHS = 0.2)
     
plower(p2)..  y(o1,p2) + z(c3,p2) =G= 0 ; (LHS = 0.2)
     

---- pupper  =L=  maximum product demand

pupper(p1)..  y(o1,p1) + z(c3,p1) =L= 600 ; (LHS = 0.200000000000045)
     
pupper(p2)..  y(o1,p2) + z(c3,p2) =L= 200 ; (LHS = 0.199999999999989)
     

---- pqlower  =G=  minimum product quality requirement

pqlower(p1,q1)..  (0.3)*q(c1,o1) + (0.1)*q(c2,o1) + (0.4)*y(o1,p1) + 2*z(c3,p1) =G= 0 ; (LHS = 0.24)
     
pqlower(p2,q1)..  (0.3)*q(c1,o1) + (0.1)*q(c2,o1) + (0.4)*y(o1,p2) + 2*z(c3,p2) =G= 0 ; (LHS = 0.24)
     
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 29
The Pooling Problem (POOL,SEQ=254)
Equation Listing    SOLVE poolprob Using NLP From line 947


---- pqupper  =L=  maximum product quality

pqupper(p1,q1)..  (0.3)*q(c1,o1) + (0.1)*q(c2,o1) - (2.1)*y(o1,p1) - 0.5*z(c3,p1) =L= 0 ; (LHS = -0.26)
     
pqupper(p2,q1)..  (0.3)*q(c1,o1) + (0.1)*q(c2,o1) - (1.1)*y(o1,p2) + 0.5*z(c3,p2) =L= 0 ; (LHS = -0.06)
     

---- fraction  =E=  fractions sum to one

fraction(o1)..  q(c1,o1) + q(c2,o1) =E= 1 ; (LHS = 0.2, INFES = 0.8 ****)
     

---- extensions  =E=  convexification constraints

extensions(o1,p1)..  (0.1)*q(c1,o1) + (0.1)*q(c2,o1) - (0.8)*y(o1,p1) =E= 0 ; (LHS = -0.08, INFES = 0.08 ****)
     
extensions(o1,p2)..  (0.1)*q(c1,o1) + (0.1)*q(c2,o1) - (0.8)*y(o1,p2) =E= 0 ; (LHS = -0.08, INFES = 0.08 ****)
     
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 30
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


---- q  pool quality from pooling raw materials

q(c1,o1)
                (.LO, .L, .UP, .M = 0, 0.1, 1, 0)
      (-1.2)    obj
       (0.2)    clower(c1)
       (0.2)    cupper(c1)
    (-799.8)    pszrlt(c1,o1)
       (0.3)    pqlower(p1,q1)
       (0.3)    pqlower(p2,q1)
       (0.3)    pqupper(p1,q1)
       (0.3)    pqupper(p2,q1)
        1       fraction(o1)
       (0.1)    extensions(o1,p1)
       (0.1)    extensions(o1,p2)

q(c2,o1)
                (.LO, .L, .UP, .M = 0, 0.1, 1, 0)
      (-3.2)    obj
       (0.2)    clower(c2)
       (0.2)    cupper(c2)
    (-799.8)    pszrlt(c2,o1)
       (0.1)    pqlower(p1,q1)
       (0.1)    pqlower(p2,q1)
       (0.1)    pqupper(p1,q1)
       (0.1)    pqupper(p2,q1)
        1       fraction(o1)
       (0.1)    extensions(o1,p1)
       (0.1)    extensions(o1,p2)


---- y  flow from pool to product

y(o1,p1)
                (.LO, .L, .UP, .M = 0, 0.1, 600, 0)
       (6.8)    obj
       (0.1)    clower(c1)
       (0.1)    clower(c2)
       (0.1)    cupper(c1)
       (0.1)    cupper(c2)
       (0.1)    pszrlt(c1,o1)
       (0.1)    pszrlt(c2,o1)
        1       plower(p1)
        1       pupper(p1)
       (0.4)    pqlower(p1,q1)
      (-2.1)    pqupper(p1,q1)
      (-0.8)    extensions(o1,p1)

y(o1,p2)
                (.LO, .L, .UP, .M = 0, 0.1, 200, 0)
      (12.8)    obj
       (0.1)    clower(c1)
       (0.1)    clower(c2)
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 31
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


     y  flow from pool to product

       (0.1)    cupper(c1)
       (0.1)    cupper(c2)
       (0.1)    pszrlt(c1,o1)
       (0.1)    pszrlt(c2,o1)
        1       plower(p2)
        1       pupper(p2)
       (0.4)    pqlower(p2,q1)
      (-1.1)    pqupper(p2,q1)
      (-0.8)    extensions(o1,p2)


---- z  direct flow of rawmaterials to product

z(c3,p1)
                (.LO, .L, .UP, .M = 0, 0.1, 600, 0)
       -1       obj
        1       clower(c3)
        1       cupper(c3)
        1       plower(p1)
        1       pupper(p1)
        2       pqlower(p1,q1)
       -0.5     pqupper(p1,q1)

z(c3,p2)
                (.LO, .L, .UP, .M = 0, 0.1, 200, 0)
        5       obj
        1       clower(c3)
        1       cupper(c3)
        1       plower(p2)
        1       pupper(p2)
        2       pqlower(p2,q1)
        0.5     pqupper(p2,q1)


---- cost  total cost

cost
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       obj

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 32
The Pooling Problem (POOL,SEQ=254)
Model Statistics    SOLVE poolprob Using NLP From line 947


LOOPS                                 case   haverly2


MODEL STATISTICS

BLOCKS OF EQUATIONS          10     SINGLE EQUATIONS           20
BLOCKS OF VARIABLES           4     SINGLE VARIABLES            7
NON ZERO ELEMENTS            61     NON LINEAR N-Z             40
DERIVATIVE POOL              20     CONSTANT POOL              23
CODE LENGTH                 121


GENERATION TIME      =        0.001 SECONDS      3 MB  24.7.4 r58773 LEX-LEG


EXECUTION TIME       =        0.003 SECONDS      3 MB  24.7.4 r58773 LEX-LEG
               L O O P S               case haverly2

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 33
The Pooling Problem (POOL,SEQ=254)
Solution Report     SOLVE poolprob Using NLP From line 947


               S O L V E      S U M M A R Y

     MODEL   poolprob            OBJECTIVE  cost
     TYPE    NLP                 DIRECTION  MINIMIZE
     SOLVER  CONVERT             FROM LINE  947

**** SOLVER STATUS     1 Normal Completion         
**** MODEL STATUS      14 No Solution Returned     
**** OBJECTIVE VALUE                0.0000

 RESOURCE USAGE, LIMIT          0.000      1000.000
 ITERATION COUNT, LIMIT         0    2000000000
 EVALUATION ERRORS              0             0

Convert 2.0      24.7.4 r58773 Released Sep 19, 2016 LEG x86 64bit/Linux      

--- Using Option File
Reading parameter(s) from "/home/renigijus/gams/opt-mod-lib/gamslib/pool/convert.opt"
>>  ampl pool-scalar.mod
Finished reading from "/home/renigijus/gams/opt-mod-lib/gamslib/pool/convert.opt"
Ampl      : pool-scalar.mod


No solution returned
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 34
The Pooling Problem (POOL,SEQ=254)
Equation Listing    SOLVE poolprob Using NLP From line 947


---- obj  =E=  objective function

obj..  - (1.2)*q(c1,o1) - (2.6)*q(c2,o1) + (7.1)*y(o1,p1) + (13.1)*y(o1,p2) - z(c3,p1) + 5*z(c3,p2) + cost =E= 0 ; (LHS = 2.42, INFES = 2.42 ****)
     

---- clower  =G=  lower bound component availability

clower(c1)..  (0.2)*q(c1,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) =G= 0 ; (LHS = 0.02)
     
clower(c2)..  (0.2)*q(c2,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) =G= 0 ; (LHS = 0.02)
     
clower(c3)..  z(c3,p1) + z(c3,p2) =G= 0 ; (LHS = 0.2)
     

---- cupper  =L=  upper bound component availability

cupper(c1)..  (0.2)*q(c1,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) =L= 300 ; (LHS = 0.0199999999999818)
     
cupper(c2)..  (0.2)*q(c2,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) =L= 300 ; (LHS = 0.0199999999999818)
     
cupper(c3)..  z(c3,p1) + z(c3,p2) =L= 300 ; (LHS = 0.199999999999989)
     

---- pszrlt  =L=  ss-rlt on pool size constraints

pszrlt(c1,o1)..  - (299.8)*q(c1,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) =L= 0 ; (LHS = -29.98)
     
pszrlt(c2,o1)..  - (299.8)*q(c2,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) =L= 0 ; (LHS = -29.98)
     

---- plower  =G=  minimum product production

plower(p1)..  y(o1,p1) + z(c3,p1) =G= 0 ; (LHS = 0.2)
     
plower(p2)..  y(o1,p2) + z(c3,p2) =G= 0 ; (LHS = 0.2)
     

---- pupper  =L=  maximum product demand

pupper(p1)..  y(o1,p1) + z(c3,p1) =L= 100 ; (LHS = 0.200000000000003)
     
pupper(p2)..  y(o1,p2) + z(c3,p2) =L= 200 ; (LHS = 0.199999999999989)
     

---- pqlower  =G=  minimum product quality requirement

pqlower(p1,q1)..  (0.3)*q(c1,o1) + (0.1)*q(c2,o1) + (0.4)*y(o1,p1) + 2*z(c3,p1) =G= 0 ; (LHS = 0.24)
     
pqlower(p2,q1)..  (0.3)*q(c1,o1) + (0.1)*q(c2,o1) + (0.4)*y(o1,p2) + 2*z(c3,p2) =G= 0 ; (LHS = 0.24)
     
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 35
The Pooling Problem (POOL,SEQ=254)
Equation Listing    SOLVE poolprob Using NLP From line 947


---- pqupper  =L=  maximum product quality

pqupper(p1,q1)..  (0.3)*q(c1,o1) + (0.1)*q(c2,o1) - (2.1)*y(o1,p1) - 0.5*z(c3,p1) =L= 0 ; (LHS = -0.26)
     
pqupper(p2,q1)..  (0.3)*q(c1,o1) + (0.1)*q(c2,o1) - (1.1)*y(o1,p2) + 0.5*z(c3,p2) =L= 0 ; (LHS = -0.06)
     

---- fraction  =E=  fractions sum to one

fraction(o1)..  q(c1,o1) + q(c2,o1) =E= 1 ; (LHS = 0.2, INFES = 0.8 ****)
     

---- extensions  =E=  convexification constraints

extensions(o1,p1)..  (0.1)*q(c1,o1) + (0.1)*q(c2,o1) - (0.8)*y(o1,p1) =E= 0 ; (LHS = -0.08, INFES = 0.08 ****)
     
extensions(o1,p2)..  (0.1)*q(c1,o1) + (0.1)*q(c2,o1) - (0.8)*y(o1,p2) =E= 0 ; (LHS = -0.08, INFES = 0.08 ****)
     
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 36
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


---- q  pool quality from pooling raw materials

q(c1,o1)
                (.LO, .L, .UP, .M = 0, 0.1, 1, 0)
      (-1.2)    obj
       (0.2)    clower(c1)
       (0.2)    cupper(c1)
    (-299.8)    pszrlt(c1,o1)
       (0.3)    pqlower(p1,q1)
       (0.3)    pqlower(p2,q1)
       (0.3)    pqupper(p1,q1)
       (0.3)    pqupper(p2,q1)
        1       fraction(o1)
       (0.1)    extensions(o1,p1)
       (0.1)    extensions(o1,p2)

q(c2,o1)
                (.LO, .L, .UP, .M = 0, 0.1, 1, 0)
      (-2.6)    obj
       (0.2)    clower(c2)
       (0.2)    cupper(c2)
    (-299.8)    pszrlt(c2,o1)
       (0.1)    pqlower(p1,q1)
       (0.1)    pqlower(p2,q1)
       (0.1)    pqupper(p1,q1)
       (0.1)    pqupper(p2,q1)
        1       fraction(o1)
       (0.1)    extensions(o1,p1)
       (0.1)    extensions(o1,p2)


---- y  flow from pool to product

y(o1,p1)
                (.LO, .L, .UP, .M = 0, 0.1, 100, 0)
       (7.1)    obj
       (0.1)    clower(c1)
       (0.1)    clower(c2)
       (0.1)    cupper(c1)
       (0.1)    cupper(c2)
       (0.1)    pszrlt(c1,o1)
       (0.1)    pszrlt(c2,o1)
        1       plower(p1)
        1       pupper(p1)
       (0.4)    pqlower(p1,q1)
      (-2.1)    pqupper(p1,q1)
      (-0.8)    extensions(o1,p1)

y(o1,p2)
                (.LO, .L, .UP, .M = 0, 0.1, 200, 0)
      (13.1)    obj
       (0.1)    clower(c1)
       (0.1)    clower(c2)
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 37
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


     y  flow from pool to product

       (0.1)    cupper(c1)
       (0.1)    cupper(c2)
       (0.1)    pszrlt(c1,o1)
       (0.1)    pszrlt(c2,o1)
        1       plower(p2)
        1       pupper(p2)
       (0.4)    pqlower(p2,q1)
      (-1.1)    pqupper(p2,q1)
      (-0.8)    extensions(o1,p2)


---- z  direct flow of rawmaterials to product

z(c3,p1)
                (.LO, .L, .UP, .M = 0, 0.1, 100, 0)
       -1       obj
        1       clower(c3)
        1       cupper(c3)
        1       plower(p1)
        1       pupper(p1)
        2       pqlower(p1,q1)
       -0.5     pqupper(p1,q1)

z(c3,p2)
                (.LO, .L, .UP, .M = 0, 0.1, 200, 0)
        5       obj
        1       clower(c3)
        1       cupper(c3)
        1       plower(p2)
        1       pupper(p2)
        2       pqlower(p2,q1)
        0.5     pqupper(p2,q1)


---- cost  total cost

cost
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       obj

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 38
The Pooling Problem (POOL,SEQ=254)
Model Statistics    SOLVE poolprob Using NLP From line 947


LOOPS                                 case   haverly3


MODEL STATISTICS

BLOCKS OF EQUATIONS          10     SINGLE EQUATIONS           20
BLOCKS OF VARIABLES           4     SINGLE VARIABLES            7
NON ZERO ELEMENTS            61     NON LINEAR N-Z             40
DERIVATIVE POOL              20     CONSTANT POOL              23
CODE LENGTH                 121


GENERATION TIME      =        0.003 SECONDS      3 MB  24.7.4 r58773 LEX-LEG


EXECUTION TIME       =        0.003 SECONDS      3 MB  24.7.4 r58773 LEX-LEG
               L O O P S               case haverly3

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 39
The Pooling Problem (POOL,SEQ=254)
Solution Report     SOLVE poolprob Using NLP From line 947


               S O L V E      S U M M A R Y

     MODEL   poolprob            OBJECTIVE  cost
     TYPE    NLP                 DIRECTION  MINIMIZE
     SOLVER  CONVERT             FROM LINE  947

**** SOLVER STATUS     1 Normal Completion         
**** MODEL STATUS      14 No Solution Returned     
**** OBJECTIVE VALUE                0.0000

 RESOURCE USAGE, LIMIT          0.000      1000.000
 ITERATION COUNT, LIMIT         0    2000000000
 EVALUATION ERRORS              0             0

Convert 2.0      24.7.4 r58773 Released Sep 19, 2016 LEG x86 64bit/Linux      

--- Using Option File
Reading parameter(s) from "/home/renigijus/gams/opt-mod-lib/gamslib/pool/convert.opt"
>>  ampl pool-scalar.mod
Finished reading from "/home/renigijus/gams/opt-mod-lib/gamslib/pool/convert.opt"
Ampl      : pool-scalar.mod


No solution returned
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 40
The Pooling Problem (POOL,SEQ=254)
Equation Listing    SOLVE poolprob Using NLP From line 947


---- obj  =E=  objective function

obj..  - (2.4)*q(c1,o1) - (6.4)*q(c2,o1) - (1.2)*q(c4,o2) - (5.2)*q(c5,o2) + (6.8)*y(o1,p1) + (12.8)*y(o1,p2) + (3.8)*y(o1,p3) + (9.8)*y(o1,p4) + (7.4)*y(o2,p1) + (13.4)*y(o2,p2) + (4.4)*y(o2,p3) + (10.4)*y(o2,p4) - z(c3,p1) + 5*z(c3,p2) - 4*z(c3,p3)
     
      + 2*z(c3,p4) + 2*z(c6,p1) + 8*z(c6,p2) - z(c6,p3) + 5*z(c6,p4) + cost =E= 0 ; (LHS = 8.48, INFES = 8.48 ****)
     

---- clower  =G=  lower bound component availability

clower(c1)..  (0.4)*q(c1,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) =G= 0 ; (LHS = 0.04)
     
clower(c2)..  (0.4)*q(c2,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) =G= 0 ; (LHS = 0.04)
     
clower(c3)..  z(c3,p1) + z(c3,p2) + z(c3,p3) + z(c3,p4) =G= 0 ; (LHS = 0.4)
     
REMAINING 3 ENTRIES SKIPPED


---- cupper  =L=  upper bound component availability

cupper(c1)..  (0.4)*q(c1,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) =L= 600 ; (LHS = 0.0399999999999636)
     
cupper(c2)..  (0.4)*q(c2,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) =L= 600 ; (LHS = 0.0399999999999636)
     
cupper(c3)..  z(c3,p1) + z(c3,p2) + z(c3,p3) + z(c3,p4) =L= 600 ; (LHS = 0.399999999999977)
     
REMAINING 3 ENTRIES SKIPPED


---- pszrlt  =L=  ss-rlt on pool size constraints

pszrlt(c1,o1)..  - (599.6)*q(c1,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) =L= 0 ; (LHS = -59.96)
     
pszrlt(c2,o1)..  - (599.6)*q(c2,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) =L= 0 ; (LHS = -59.96)
     
pszrlt(c4,o2)..  - (599.6)*q(c4,o2) + (0.1)*y(o2,p1) + (0.1)*y(o2,p2) + (0.1)*y(o2,p3) + (0.1)*y(o2,p4) =L= 0 ; (LHS = -59.96)
     
REMAINING ENTRY SKIPPED


---- plower  =G=  minimum product production

plower(p1)..  y(o1,p1) + y(o2,p1) + z(c3,p1) + z(c6,p1) =G= 0 ; (LHS = 0.4)
     
plower(p2)..  y(o1,p2) + y(o2,p2) + z(c3,p2) + z(c6,p2) =G= 0 ; (LHS = 0.4)
     
plower(p3)..  y(o1,p3) + y(o2,p3) + z(c3,p3) + z(c6,p3) =G= 0 ; (LHS = 0.4)
     
REMAINING ENTRY SKIPPED

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 41
The Pooling Problem (POOL,SEQ=254)
Equation Listing    SOLVE poolprob Using NLP From line 947


---- pupper  =L=  maximum product demand

pupper(p1)..  y(o1,p1) + y(o2,p1) + z(c3,p1) + z(c6,p1) =L= 100 ; (LHS = 0.400000000000006)
     
pupper(p2)..  y(o1,p2) + y(o2,p2) + z(c3,p2) + z(c6,p2) =L= 200 ; (LHS = 0.400000000000006)
     
pupper(p3)..  y(o1,p3) + y(o2,p3) + z(c3,p3) + z(c6,p3) =L= 100 ; (LHS = 0.400000000000006)
     
REMAINING ENTRY SKIPPED


---- pqlower  =G=  minimum product quality requirement

pqlower(p1,q1)..  (0.3)*q(c1,o1) + (0.1)*q(c2,o1) + (0.35)*q(c4,o2) + (0.15)*q(c5,o2) + (0.4)*y(o1,p1) + (0.5)*y(o2,p1) + 2*z(c3,p1) + 2.5*z(c6,p1) =G= 0 ; (LHS = 0.54)
     
pqlower(p2,q1)..  (0.3)*q(c1,o1) + (0.1)*q(c2,o1) + (0.35)*q(c4,o2) + (0.15)*q(c5,o2) + (0.4)*y(o1,p2) + (0.5)*y(o2,p2) + 2*z(c3,p2) + 2.5*z(c6,p2) =G= 0 ; (LHS = 0.54)
     
pqlower(p3,q1)..  (0.3)*q(c1,o1) + (0.1)*q(c2,o1) + (0.35)*q(c4,o2) + (0.15)*q(c5,o2) + (0.4)*y(o1,p3) + (0.5)*y(o2,p3) + 2*z(c3,p3) + 2.5*z(c6,p3) =G= 0 ; (LHS = 0.54)
     
REMAINING ENTRY SKIPPED


---- pqupper  =L=  maximum product quality

pqupper(p1,q1)..  (0.3)*q(c1,o1) + (0.1)*q(c2,o1) + (0.35)*q(c4,o2) + (0.15)*q(c5,o2) - (2.1)*y(o1,p1) - (2)*y(o2,p1) - 0.5*z(c3,p1) =L= 0 ; (LHS = -0.46)
     
pqupper(p2,q1)..  (0.3)*q(c1,o1) + (0.1)*q(c2,o1) + (0.35)*q(c4,o2) + (0.15)*q(c5,o2) - (1.1)*y(o1,p2) - (1)*y(o2,p2) + 0.5*z(c3,p2) + z(c6,p2) =L= 0 ; (LHS = -0.0600000000000001)
     
pqupper(p3,q1)..  (0.3)*q(c1,o1) + (0.1)*q(c2,o1) + (0.35)*q(c4,o2) + (0.15)*q(c5,o2) - (2.6)*y(o1,p3) - (2.5)*y(o2,p3) - z(c3,p3) - 0.5*z(c6,p3) =L= 0 ; (LHS = -0.66)
     
REMAINING ENTRY SKIPPED


---- fraction  =E=  fractions sum to one

fraction(o1)..  q(c1,o1) + q(c2,o1) =E= 1 ; (LHS = 0.2, INFES = 0.8 ****)
     
fraction(o2)..  q(c4,o2) + q(c5,o2) =E= 1 ; (LHS = 0.2, INFES = 0.8 ****)
     

---- extensions  =E=  convexification constraints

extensions(o1,p1)..  (0.1)*q(c1,o1) + (0.1)*q(c2,o1) - (0.8)*y(o1,p1) =E= 0 ; (LHS = -0.08, INFES = 0.08 ****)
     
extensions(o1,p2)..  (0.1)*q(c1,o1) + (0.1)*q(c2,o1) - (0.8)*y(o1,p2) =E= 0 ; (LHS = -0.08, INFES = 0.08 ****)
     
extensions(o1,p3)..  (0.1)*q(c1,o1) + (0.1)*q(c2,o1) - (0.8)*y(o1,p3) =E= 0 ; (LHS = -0.08, INFES = 0.08 ****)
     
REMAINING 5 ENTRIES SKIPPED

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 42
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


---- q  pool quality from pooling raw materials

q(c1,o1)
                (.LO, .L, .UP, .M = 0, 0.1, 1, 0)
      (-2.4)    obj
       (0.4)    clower(c1)
       (0.4)    cupper(c1)
    (-599.6)    pszrlt(c1,o1)
       (0.3)    pqlower(p1,q1)
       (0.3)    pqlower(p2,q1)
       (0.3)    pqlower(p3,q1)
       (0.3)    pqlower(p4,q1)
       (0.3)    pqupper(p1,q1)
       (0.3)    pqupper(p2,q1)
       (0.3)    pqupper(p3,q1)
       (0.3)    pqupper(p4,q1)
        1       fraction(o1)
       (0.1)    extensions(o1,p1)
       (0.1)    extensions(o1,p2)
       (0.1)    extensions(o1,p3)
       (0.1)    extensions(o1,p4)

q(c2,o1)
                (.LO, .L, .UP, .M = 0, 0.1, 1, 0)
      (-6.4)    obj
       (0.4)    clower(c2)
       (0.4)    cupper(c2)
    (-599.6)    pszrlt(c2,o1)
       (0.1)    pqlower(p1,q1)
       (0.1)    pqlower(p2,q1)
       (0.1)    pqlower(p3,q1)
       (0.1)    pqlower(p4,q1)
       (0.1)    pqupper(p1,q1)
       (0.1)    pqupper(p2,q1)
       (0.1)    pqupper(p3,q1)
       (0.1)    pqupper(p4,q1)
        1       fraction(o1)
       (0.1)    extensions(o1,p1)
       (0.1)    extensions(o1,p2)
       (0.1)    extensions(o1,p3)
       (0.1)    extensions(o1,p4)

q(c4,o2)
                (.LO, .L, .UP, .M = 0, 0.1, 1, 0)
      (-1.2)    obj
       (0.4)    clower(c4)
       (0.4)    cupper(c4)
    (-599.6)    pszrlt(c4,o2)
       (0.35)   pqlower(p1,q1)
       (0.35)   pqlower(p2,q1)
       (0.35)   pqlower(p3,q1)
       (0.35)   pqlower(p4,q1)
       (0.35)   pqupper(p1,q1)
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 43
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


     q  pool quality from pooling raw materials

       (0.35)   pqupper(p2,q1)
       (0.35)   pqupper(p3,q1)
       (0.35)   pqupper(p4,q1)
        1       fraction(o2)
       (0.1)    extensions(o2,p1)
       (0.1)    extensions(o2,p2)
       (0.1)    extensions(o2,p3)
       (0.1)    extensions(o2,p4)

REMAINING ENTRY SKIPPED

---- y  flow from pool to product

y(o1,p1)
                (.LO, .L, .UP, .M = 0, 0.1, 100, 0)
       (6.8)    obj
       (0.1)    clower(c1)
       (0.1)    clower(c2)
       (0.1)    cupper(c1)
       (0.1)    cupper(c2)
       (0.1)    pszrlt(c1,o1)
       (0.1)    pszrlt(c2,o1)
        1       plower(p1)
        1       pupper(p1)
       (0.4)    pqlower(p1,q1)
      (-2.1)    pqupper(p1,q1)
      (-0.8)    extensions(o1,p1)

y(o1,p2)
                (.LO, .L, .UP, .M = 0, 0.1, 200, 0)
      (12.8)    obj
       (0.1)    clower(c1)
       (0.1)    clower(c2)
       (0.1)    cupper(c1)
       (0.1)    cupper(c2)
       (0.1)    pszrlt(c1,o1)
       (0.1)    pszrlt(c2,o1)
        1       plower(p2)
        1       pupper(p2)
       (0.4)    pqlower(p2,q1)
      (-1.1)    pqupper(p2,q1)
      (-0.8)    extensions(o1,p2)

y(o1,p3)
                (.LO, .L, .UP, .M = 0, 0.1, 100, 0)
       (3.8)    obj
       (0.1)    clower(c1)
       (0.1)    clower(c2)
       (0.1)    cupper(c1)
       (0.1)    cupper(c2)
       (0.1)    pszrlt(c1,o1)
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 44
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


     y  flow from pool to product

       (0.1)    pszrlt(c2,o1)
        1       plower(p3)
        1       pupper(p3)
       (0.4)    pqlower(p3,q1)
      (-2.6)    pqupper(p3,q1)
      (-0.8)    extensions(o1,p3)

REMAINING 5 ENTRIES SKIPPED

---- z  direct flow of rawmaterials to product

z(c3,p1)
                (.LO, .L, .UP, .M = 0, 0.1, 100, 0)
       -1       obj
        1       clower(c3)
        1       cupper(c3)
        1       plower(p1)
        1       pupper(p1)
        2       pqlower(p1,q1)
       -0.5     pqupper(p1,q1)

z(c3,p2)
                (.LO, .L, .UP, .M = 0, 0.1, 200, 0)
        5       obj
        1       clower(c3)
        1       cupper(c3)
        1       plower(p2)
        1       pupper(p2)
        2       pqlower(p2,q1)
        0.5     pqupper(p2,q1)

z(c3,p3)
                (.LO, .L, .UP, .M = 0, 0.1, 100, 0)
       -4       obj
        1       clower(c3)
        1       cupper(c3)
        1       plower(p3)
        1       pupper(p3)
        2       pqlower(p3,q1)
       -1       pqupper(p3,q1)

REMAINING 5 ENTRIES SKIPPED

---- cost  total cost

cost
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       obj

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 45
The Pooling Problem (POOL,SEQ=254)
Model Statistics    SOLVE poolprob Using NLP From line 947


LOOPS                                 case   foulds2


MODEL STATISTICS

BLOCKS OF EQUATIONS          10     SINGLE EQUATIONS           43
BLOCKS OF VARIABLES           4     SINGLE VARIABLES           21
NON ZERO ELEMENTS           219     NON LINEAR N-Z            144
DERIVATIVE POOL              20     CONSTANT POOL              30
CODE LENGTH                 455


GENERATION TIME      =        0.003 SECONDS      3 MB  24.7.4 r58773 LEX-LEG


EXECUTION TIME       =        0.004 SECONDS      3 MB  24.7.4 r58773 LEX-LEG
               L O O P S               case foulds2

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 46
The Pooling Problem (POOL,SEQ=254)
Solution Report     SOLVE poolprob Using NLP From line 947


               S O L V E      S U M M A R Y

     MODEL   poolprob            OBJECTIVE  cost
     TYPE    NLP                 DIRECTION  MINIMIZE
     SOLVER  CONVERT             FROM LINE  947

**** SOLVER STATUS     1 Normal Completion         
**** MODEL STATUS      14 No Solution Returned     
**** OBJECTIVE VALUE                0.0000

 RESOURCE USAGE, LIMIT          0.000      1000.000
 ITERATION COUNT, LIMIT         0    2000000000
 EVALUATION ERRORS              0             0

Convert 2.0      24.7.4 r58773 Released Sep 19, 2016 LEG x86 64bit/Linux      

--- Using Option File
Reading parameter(s) from "/home/renigijus/gams/opt-mod-lib/gamslib/pool/convert.opt"
>>  ampl pool-scalar.mod
Finished reading from "/home/renigijus/gams/opt-mod-lib/gamslib/pool/convert.opt"
Ampl      : pool-scalar.mod


No solution returned
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 47
The Pooling Problem (POOL,SEQ=254)
Equation Listing    SOLVE poolprob Using NLP From line 947


---- obj  =E=  objective function

obj..  - (32)*q(c1,o1) - (30.4)*q(c2,o1) - (28.8)*q(c3,o1) - (27.2)*q(c4,o1) - (30.4)*q(c5,o2) - (28.8)*q(c6,o2) - (27.2)*q(c7,o2) - (25.6)*q(c8,o2) - (28.8)*q(c9,o3) - (27.2)*q(c10,o3) - (25.6)*q(c11,o3) - (24)*q(c12,o3) - (27.2)*q(c13,o4)
     
      - (25.6)*q(c14,o4) - (24)*q(c15,o4) - (22.4)*q(c16,o4) - (25.6)*q(c17,o5) - (24)*q(c18,o5) - (22.4)*q(c19,o5) - (20.8)*q(c20,o5) - (24)*q(c21,o6) - (22.4)*q(c22,o6) - (20.8)*q(c23,o6) - (19.2)*q(c24,o6) - (22.4)*q(c25,o7) - (20.8)*q(c26,o7)
     
      - (19.2)*q(c27,o7) - (17.6)*q(c28,o7) - (20.8)*q(c29,o8) - (19.2)*q(c30,o8) - (17.6)*q(c31,o8) - (16)*q(c32,o8) + (12.6)*y(o1,p1) + (12.1)*y(o1,p2) + (11.6)*y(o1,p3) + (11.1)*y(o1,p4) + (10.6)*y(o1,p5) + (10.1)*y(o1,p6) + (9.6)*y(o1,p7)
     
      + (9.1)*y(o1,p8) + (8.6)*y(o1,p9) + (8.1)*y(o1,p10) + (7.6)*y(o1,p11) + (7.1)*y(o1,p12) + (6.6)*y(o1,p13) + (6.1)*y(o1,p14) + (5.6)*y(o1,p15) + (5.1)*y(o1,p16) + (13)*y(o2,p1) + (12.5)*y(o2,p2) + (12)*y(o2,p3) + (11.5)*y(o2,p4) + (11)*y(o2,p5)
     
      + (10.5)*y(o2,p6) + (10)*y(o2,p7) + (9.5)*y(o2,p8) + (9)*y(o2,p9) + (8.5)*y(o2,p10) + (8)*y(o2,p11) + (7.5)*y(o2,p12) + (7)*y(o2,p13) + (6.5)*y(o2,p14) + (6)*y(o2,p15) + (5.5)*y(o2,p16) + (13.4)*y(o3,p1) + (12.9)*y(o3,p2) + (12.4)*y(o3,p3)
     
      + (11.9)*y(o3,p4) + (11.4)*y(o3,p5) + (10.9)*y(o3,p6) + (10.4)*y(o3,p7) + (9.9)*y(o3,p8) + (9.4)*y(o3,p9) + (8.9)*y(o3,p10) + (8.4)*y(o3,p11) + (7.9)*y(o3,p12) + (7.4)*y(o3,p13) + (6.9)*y(o3,p14) + (6.4)*y(o3,p15) + (5.9)*y(o3,p16) + (13.8)*y(o4,p1)
     
      + (13.3)*y(o4,p2) + (12.8)*y(o4,p3) + (12.3)*y(o4,p4) + (11.8)*y(o4,p5) + (11.3)*y(o4,p6) + (10.8)*y(o4,p7) + (10.3)*y(o4,p8) + (9.8)*y(o4,p9) + (9.3)*y(o4,p10) + (8.8)*y(o4,p11) + (8.3)*y(o4,p12) + (7.8)*y(o4,p13) + (7.3)*y(o4,p14)
     
      + (6.8)*y(o4,p15) + (6.3)*y(o4,p16) + (14.2)*y(o5,p1) + (13.7)*y(o5,p2) + (13.2)*y(o5,p3) + (12.7)*y(o5,p4) + (12.2)*y(o5,p5) + (11.7)*y(o5,p6) + (11.2)*y(o5,p7) + (10.7)*y(o5,p8) + (10.2)*y(o5,p9) + (9.7)*y(o5,p10) + (9.2)*y(o5,p11)
     
      + (8.7)*y(o5,p12) + (8.2)*y(o5,p13) + (7.7)*y(o5,p14) + (7.2)*y(o5,p15) + (6.7)*y(o5,p16) + (14.6)*y(o6,p1) + (14.1)*y(o6,p2) + (13.6)*y(o6,p3) + (13.1)*y(o6,p4) + (12.6)*y(o6,p5) + (12.1)*y(o6,p6) + (11.6)*y(o6,p7) + (11.1)*y(o6,p8)
     
      + (10.6)*y(o6,p9) + (10.1)*y(o6,p10) + (9.6)*y(o6,p11) + (9.1)*y(o6,p12) + (8.6)*y(o6,p13) + (8.1)*y(o6,p14) + (7.6)*y(o6,p15) + (7.1)*y(o6,p16) + (15)*y(o7,p1) + (14.5)*y(o7,p2) + (14)*y(o7,p3) + (13.5)*y(o7,p4) + (13)*y(o7,p5) + (12.5)*y(o7,p6)
     
      + (12)*y(o7,p7) + (11.5)*y(o7,p8) + (11)*y(o7,p9) + (10.5)*y(o7,p10) + (10)*y(o7,p11) + (9.5)*y(o7,p12) + (9)*y(o7,p13) + (8.5)*y(o7,p14) + (8)*y(o7,p15) + (7.5)*y(o7,p16) + (15.4)*y(o8,p1) + (14.9)*y(o8,p2) + (14.4)*y(o8,p3) + (13.9)*y(o8,p4)
     
      + (13.4)*y(o8,p5) + (12.9)*y(o8,p6) + (12.4)*y(o8,p7) + (11.9)*y(o8,p8) + (11.4)*y(o8,p9) + (10.9)*y(o8,p10) + (10.4)*y(o8,p11) + (9.9)*y(o8,p12) + (9.4)*y(o8,p13) + (8.9)*y(o8,p14) + (8.4)*y(o8,p15) + (7.9)*y(o8,p16) + cost =E= 0 ;
     
      (LHS = 131.2, INFES = 131.2 ****)
     

---- clower  =G=  lower bound component availability

clower(c1)..  (1.6)*q(c1,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) + (0.1)*y(o1,p5) + (0.1)*y(o1,p6) + (0.1)*y(o1,p7) + (0.1)*y(o1,p8) + (0.1)*y(o1,p9) + (0.1)*y(o1,p10) + (0.1)*y(o1,p11) + (0.1)*y(o1,p12) + (0.1)*y(o1,p13)
     
      + (0.1)*y(o1,p14) + (0.1)*y(o1,p15) + (0.1)*y(o1,p16) =G= 0 ; (LHS = 0.16)
     
clower(c2)..  (1.6)*q(c2,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) + (0.1)*y(o1,p5) + (0.1)*y(o1,p6) + (0.1)*y(o1,p7) + (0.1)*y(o1,p8) + (0.1)*y(o1,p9) + (0.1)*y(o1,p10) + (0.1)*y(o1,p11) + (0.1)*y(o1,p12) + (0.1)*y(o1,p13)
     
      + (0.1)*y(o1,p14) + (0.1)*y(o1,p15) + (0.1)*y(o1,p16) =G= 0 ; (LHS = 0.16)
     
clower(c3)..  (1.6)*q(c3,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) + (0.1)*y(o1,p5) + (0.1)*y(o1,p6) + (0.1)*y(o1,p7) + (0.1)*y(o1,p8) + (0.1)*y(o1,p9) + (0.1)*y(o1,p10) + (0.1)*y(o1,p11) + (0.1)*y(o1,p12) + (0.1)*y(o1,p13)
     
      + (0.1)*y(o1,p14) + (0.1)*y(o1,p15) + (0.1)*y(o1,p16) =G= 0 ; (LHS = 0.16)
     
REMAINING 29 ENTRIES SKIPPED


---- cupper  =L=  upper bound component availability

cupper(c1)..  (1.6)*q(c1,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) + (0.1)*y(o1,p5) + (0.1)*y(o1,p6) + (0.1)*y(o1,p7) + (0.1)*y(o1,p8) + (0.1)*y(o1,p9) + (0.1)*y(o1,p10) + (0.1)*y(o1,p11) + (0.1)*y(o1,p12) + (0.1)*y(o1,p13)
     
      + (0.1)*y(o1,p14) + (0.1)*y(o1,p15) + (0.1)*y(o1,p16) =L= 16 ; (LHS = 0.16)
     
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 48
The Pooling Problem (POOL,SEQ=254)
Equation Listing    SOLVE poolprob Using NLP From line 947


     cupper  =L=  upper bound component availability

cupper(c2)..  (1.6)*q(c2,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) + (0.1)*y(o1,p5) + (0.1)*y(o1,p6) + (0.1)*y(o1,p7) + (0.1)*y(o1,p8) + (0.1)*y(o1,p9) + (0.1)*y(o1,p10) + (0.1)*y(o1,p11) + (0.1)*y(o1,p12) + (0.1)*y(o1,p13)
     
      + (0.1)*y(o1,p14) + (0.1)*y(o1,p15) + (0.1)*y(o1,p16) =L= 16 ; (LHS = 0.16)
     
cupper(c3)..  (1.6)*q(c3,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) + (0.1)*y(o1,p5) + (0.1)*y(o1,p6) + (0.1)*y(o1,p7) + (0.1)*y(o1,p8) + (0.1)*y(o1,p9) + (0.1)*y(o1,p10) + (0.1)*y(o1,p11) + (0.1)*y(o1,p12) + (0.1)*y(o1,p13)
     
      + (0.1)*y(o1,p14) + (0.1)*y(o1,p15) + (0.1)*y(o1,p16) =L= 16 ; (LHS = 0.16)
     
REMAINING 29 ENTRIES SKIPPED


---- pszrlt  =L=  ss-rlt on pool size constraints

pszrlt(c1,o1)..  - (14.4)*q(c1,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) + (0.1)*y(o1,p5) + (0.1)*y(o1,p6) + (0.1)*y(o1,p7) + (0.1)*y(o1,p8) + (0.1)*y(o1,p9) + (0.1)*y(o1,p10) + (0.1)*y(o1,p11) + (0.1)*y(o1,p12)
     
      + (0.1)*y(o1,p13) + (0.1)*y(o1,p14) + (0.1)*y(o1,p15) + (0.1)*y(o1,p16) =L= 0 ; (LHS = -1.44)
     
pszrlt(c2,o1)..  - (14.4)*q(c2,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) + (0.1)*y(o1,p5) + (0.1)*y(o1,p6) + (0.1)*y(o1,p7) + (0.1)*y(o1,p8) + (0.1)*y(o1,p9) + (0.1)*y(o1,p10) + (0.1)*y(o1,p11) + (0.1)*y(o1,p12)
     
      + (0.1)*y(o1,p13) + (0.1)*y(o1,p14) + (0.1)*y(o1,p15) + (0.1)*y(o1,p16) =L= 0 ; (LHS = -1.44)
     
pszrlt(c3,o1)..  - (14.4)*q(c3,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) + (0.1)*y(o1,p5) + (0.1)*y(o1,p6) + (0.1)*y(o1,p7) + (0.1)*y(o1,p8) + (0.1)*y(o1,p9) + (0.1)*y(o1,p10) + (0.1)*y(o1,p11) + (0.1)*y(o1,p12)
     
      + (0.1)*y(o1,p13) + (0.1)*y(o1,p14) + (0.1)*y(o1,p15) + (0.1)*y(o1,p16) =L= 0 ; (LHS = -1.44)
     
REMAINING 29 ENTRIES SKIPPED


---- plower  =G=  minimum product production

plower(p1)..  y(o1,p1) + y(o2,p1) + y(o3,p1) + y(o4,p1) + y(o5,p1) + y(o6,p1) + y(o7,p1) + y(o8,p1) =G= 0 ; (LHS = 0.8)
     
plower(p2)..  y(o1,p2) + y(o2,p2) + y(o3,p2) + y(o4,p2) + y(o5,p2) + y(o6,p2) + y(o7,p2) + y(o8,p2) =G= 0 ; (LHS = 0.8)
     
plower(p3)..  y(o1,p3) + y(o2,p3) + y(o3,p3) + y(o4,p3) + y(o5,p3) + y(o6,p3) + y(o7,p3) + y(o8,p3) =G= 0 ; (LHS = 0.8)
     
REMAINING 13 ENTRIES SKIPPED


---- pupper  =L=  maximum product demand

pupper(p1)..  y(o1,p1) + y(o2,p1) + y(o3,p1) + y(o4,p1) + y(o5,p1) + y(o6,p1) + y(o7,p1) + y(o8,p1) =L= 1 ; (LHS = 0.8)
     
pupper(p2)..  y(o1,p2) + y(o2,p2) + y(o3,p2) + y(o4,p2) + y(o5,p2) + y(o6,p2) + y(o7,p2) + y(o8,p2) =L= 1 ; (LHS = 0.8)
     
pupper(p3)..  y(o1,p3) + y(o2,p3) + y(o3,p3) + y(o4,p3) + y(o5,p3) + y(o6,p3) + y(o7,p3) + y(o8,p3) =L= 1 ; (LHS = 0.8)
     
REMAINING 13 ENTRIES SKIPPED

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 49
The Pooling Problem (POOL,SEQ=254)
Equation Listing    SOLVE poolprob Using NLP From line 947


---- pqlower  =G=  minimum product quality requirement

pqlower(p1,q1)..  (0.1)*q(c1,o1) + (0.11)*q(c2,o1) + (0.12)*q(c3,o1) + (0.13)*q(c4,o1) + (0.11)*q(c5,o2) + (0.12)*q(c6,o2) + (0.13)*q(c7,o2) + (0.14)*q(c8,o2) + (0.12)*q(c9,o3) + (0.13)*q(c10,o3) + (0.14)*q(c11,o3) + (0.15)*q(c12,o3) + (0.13)*q(c13,o4)
     
      + (0.14)*q(c14,o4) + (0.15)*q(c15,o4) + (0.16)*q(c16,o4) + (0.14)*q(c17,o5) + (0.15)*q(c18,o5) + (0.16)*q(c19,o5) + (0.17)*q(c20,o5) + (0.15)*q(c21,o6) + (0.16)*q(c22,o6) + (0.17)*q(c23,o6) + (0.18)*q(c24,o6) + (0.16)*q(c25,o7) + (0.17)*q(c26,o7)
     
      + (0.18)*q(c27,o7) + (0.19)*q(c28,o7) + (0.17)*q(c29,o8) + (0.18)*q(c30,o8) + (0.19)*q(c31,o8) + (0.2)*q(c32,o8) + (0.46)*y(o1,p1) + (0.5)*y(o2,p1) + (0.54)*y(o3,p1) + (0.58)*y(o4,p1) + (0.62)*y(o5,p1) + (0.66)*y(o6,p1) + (0.7)*y(o7,p1)
     
      + (0.74)*y(o8,p1) =G= 0 ; (LHS = 0.48)
     
pqlower(p2,q1)..  (0.1)*q(c1,o1) + (0.11)*q(c2,o1) + (0.12)*q(c3,o1) + (0.13)*q(c4,o1) + (0.11)*q(c5,o2) + (0.12)*q(c6,o2) + (0.13)*q(c7,o2) + (0.14)*q(c8,o2) + (0.12)*q(c9,o3) + (0.13)*q(c10,o3) + (0.14)*q(c11,o3) + (0.15)*q(c12,o3) + (0.13)*q(c13,o4)
     
      + (0.14)*q(c14,o4) + (0.15)*q(c15,o4) + (0.16)*q(c16,o4) + (0.14)*q(c17,o5) + (0.15)*q(c18,o5) + (0.16)*q(c19,o5) + (0.17)*q(c20,o5) + (0.15)*q(c21,o6) + (0.16)*q(c22,o6) + (0.17)*q(c23,o6) + (0.18)*q(c24,o6) + (0.16)*q(c25,o7) + (0.17)*q(c26,o7)
     
      + (0.18)*q(c27,o7) + (0.19)*q(c28,o7) + (0.17)*q(c29,o8) + (0.18)*q(c30,o8) + (0.19)*q(c31,o8) + (0.2)*q(c32,o8) + (0.46)*y(o1,p2) + (0.5)*y(o2,p2) + (0.54)*y(o3,p2) + (0.58)*y(o4,p2) + (0.62)*y(o5,p2) + (0.66)*y(o6,p2) + (0.7)*y(o7,p2)
     
      + (0.74)*y(o8,p2) =G= 0 ; (LHS = 0.48)
     
pqlower(p3,q1)..  (0.1)*q(c1,o1) + (0.11)*q(c2,o1) + (0.12)*q(c3,o1) + (0.13)*q(c4,o1) + (0.11)*q(c5,o2) + (0.12)*q(c6,o2) + (0.13)*q(c7,o2) + (0.14)*q(c8,o2) + (0.12)*q(c9,o3) + (0.13)*q(c10,o3) + (0.14)*q(c11,o3) + (0.15)*q(c12,o3) + (0.13)*q(c13,o4)
     
      + (0.14)*q(c14,o4) + (0.15)*q(c15,o4) + (0.16)*q(c16,o4) + (0.14)*q(c17,o5) + (0.15)*q(c18,o5) + (0.16)*q(c19,o5) + (0.17)*q(c20,o5) + (0.15)*q(c21,o6) + (0.16)*q(c22,o6) + (0.17)*q(c23,o6) + (0.18)*q(c24,o6) + (0.16)*q(c25,o7) + (0.17)*q(c26,o7)
     
      + (0.18)*q(c27,o7) + (0.19)*q(c28,o7) + (0.17)*q(c29,o8) + (0.18)*q(c30,o8) + (0.19)*q(c31,o8) + (0.2)*q(c32,o8) + (0.46)*y(o1,p3) + (0.5)*y(o2,p3) + (0.54)*y(o3,p3) + (0.58)*y(o4,p3) + (0.62)*y(o5,p3) + (0.66)*y(o6,p3) + (0.7)*y(o7,p3)
     
      + (0.74)*y(o8,p3) =G= 0 ; (LHS = 0.48)
     
REMAINING 13 ENTRIES SKIPPED


---- pqupper  =L=  maximum product quality

pqupper(p1,q1)..  (0.1)*q(c1,o1) + (0.11)*q(c2,o1) + (0.12)*q(c3,o1) + (0.13)*q(c4,o1) + (0.11)*q(c5,o2) + (0.12)*q(c6,o2) + (0.13)*q(c7,o2) + (0.14)*q(c8,o2) + (0.12)*q(c9,o3) + (0.13)*q(c10,o3) + (0.14)*q(c11,o3) + (0.15)*q(c12,o3) + (0.13)*q(c13,o4)
     
      + (0.14)*q(c14,o4) + (0.15)*q(c15,o4) + (0.16)*q(c16,o4) + (0.14)*q(c17,o5) + (0.15)*q(c18,o5) + (0.16)*q(c19,o5) + (0.17)*q(c20,o5) + (0.15)*q(c21,o6) + (0.16)*q(c22,o6) + (0.17)*q(c23,o6) + (0.18)*q(c24,o6) + (0.16)*q(c25,o7) + (0.17)*q(c26,o7)
     
      + (0.18)*q(c27,o7) + (0.19)*q(c28,o7) + (0.17)*q(c29,o8) + (0.18)*q(c30,o8) + (0.19)*q(c31,o8) + (0.2)*q(c32,o8) - (0.59)*y(o1,p1) - (0.55)*y(o2,p1) - (0.51)*y(o3,p1) - (0.47)*y(o4,p1) - (0.43)*y(o5,p1) - (0.39)*y(o6,p1) - (0.35)*y(o7,p1)
     
      - (0.31)*y(o8,p1) =L= 0 ; (LHS = -0.36)
     
pqupper(p2,q1)..  (0.1)*q(c1,o1) + (0.11)*q(c2,o1) + (0.12)*q(c3,o1) + (0.13)*q(c4,o1) + (0.11)*q(c5,o2) + (0.12)*q(c6,o2) + (0.13)*q(c7,o2) + (0.14)*q(c8,o2) + (0.12)*q(c9,o3) + (0.13)*q(c10,o3) + (0.14)*q(c11,o3) + (0.15)*q(c12,o3) + (0.13)*q(c13,o4)
     
      + (0.14)*q(c14,o4) + (0.15)*q(c15,o4) + (0.16)*q(c16,o4) + (0.14)*q(c17,o5) + (0.15)*q(c18,o5) + (0.16)*q(c19,o5) + (0.17)*q(c20,o5) + (0.15)*q(c21,o6) + (0.16)*q(c22,o6) + (0.17)*q(c23,o6) + (0.18)*q(c24,o6) + (0.16)*q(c25,o7) + (0.17)*q(c26,o7)
     
      + (0.18)*q(c27,o7) + (0.19)*q(c28,o7) + (0.17)*q(c29,o8) + (0.18)*q(c30,o8) + (0.19)*q(c31,o8) + (0.2)*q(c32,o8) - (0.64)*y(o1,p2) - (0.6)*y(o2,p2) - (0.56)*y(o3,p2) - (0.52)*y(o4,p2) - (0.48)*y(o5,p2) - (0.44)*y(o6,p2) - (0.4)*y(o7,p2)
     
      - (0.36)*y(o8,p2) =L= 0 ; (LHS = -0.4)
     
pqupper(p3,q1)..  (0.1)*q(c1,o1) + (0.11)*q(c2,o1) + (0.12)*q(c3,o1) + (0.13)*q(c4,o1) + (0.11)*q(c5,o2) + (0.12)*q(c6,o2) + (0.13)*q(c7,o2) + (0.14)*q(c8,o2) + (0.12)*q(c9,o3) + (0.13)*q(c10,o3) + (0.14)*q(c11,o3) + (0.15)*q(c12,o3) + (0.13)*q(c13,o4)
     
      + (0.14)*q(c14,o4) + (0.15)*q(c15,o4) + (0.16)*q(c16,o4) + (0.14)*q(c17,o5) + (0.15)*q(c18,o5) + (0.16)*q(c19,o5) + (0.17)*q(c20,o5) + (0.15)*q(c21,o6) + (0.16)*q(c22,o6) + (0.17)*q(c23,o6) + (0.18)*q(c24,o6) + (0.16)*q(c25,o7) + (0.17)*q(c26,o7)
     
      + (0.18)*q(c27,o7) + (0.19)*q(c28,o7) + (0.17)*q(c29,o8) + (0.18)*q(c30,o8) + (0.19)*q(c31,o8) + (0.2)*q(c32,o8) - (0.69)*y(o1,p3) - (0.65)*y(o2,p3) - (0.61)*y(o3,p3) - (0.57)*y(o4,p3) - (0.53)*y(o5,p3) - (0.49)*y(o6,p3) - (0.45)*y(o7,p3)
     
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 50
The Pooling Problem (POOL,SEQ=254)
Equation Listing    SOLVE poolprob Using NLP From line 947


     pqupper  =L=  maximum product quality     
     
      - (0.41)*y(o8,p3) =L= 0 ; (LHS = -0.44)
     
REMAINING 13 ENTRIES SKIPPED


---- fraction  =E=  fractions sum to one

fraction(o1)..  q(c1,o1) + q(c2,o1) + q(c3,o1) + q(c4,o1) =E= 1 ; (LHS = 0.4, INFES = 0.6 ****)
     
fraction(o2)..  q(c5,o2) + q(c6,o2) + q(c7,o2) + q(c8,o2) =E= 1 ; (LHS = 0.4, INFES = 0.6 ****)
     
fraction(o3)..  q(c9,o3) + q(c10,o3) + q(c11,o3) + q(c12,o3) =E= 1 ; (LHS = 0.4, INFES = 0.6 ****)
     
REMAINING 5 ENTRIES SKIPPED


---- extensions  =E=  convexification constraints

extensions(o1,p1)..  (0.1)*q(c1,o1) + (0.1)*q(c2,o1) + (0.1)*q(c3,o1) + (0.1)*q(c4,o1) - (0.6)*y(o1,p1) =E= 0 ; (LHS = -0.06, INFES = 0.06 ****)
     
extensions(o1,p2)..  (0.1)*q(c1,o1) + (0.1)*q(c2,o1) + (0.1)*q(c3,o1) + (0.1)*q(c4,o1) - (0.6)*y(o1,p2) =E= 0 ; (LHS = -0.06, INFES = 0.06 ****)
     
extensions(o1,p3)..  (0.1)*q(c1,o1) + (0.1)*q(c2,o1) + (0.1)*q(c3,o1) + (0.1)*q(c4,o1) - (0.6)*y(o1,p3) =E= 0 ; (LHS = -0.06, INFES = 0.06 ****)
     
REMAINING 125 ENTRIES SKIPPED

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 51
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


---- q  pool quality from pooling raw materials

q(c1,o1)
                (.LO, .L, .UP, .M = 0, 0.1, 1, 0)
     (-32)      obj
       (1.6)    clower(c1)
       (1.6)    cupper(c1)
     (-14.4)    pszrlt(c1,o1)
       (0.1)    pqlower(p1,q1)
       (0.1)    pqlower(p2,q1)
       (0.1)    pqlower(p3,q1)
       (0.1)    pqlower(p4,q1)
       (0.1)    pqlower(p5,q1)
       (0.1)    pqlower(p6,q1)
       (0.1)    pqlower(p7,q1)
       (0.1)    pqlower(p8,q1)
       (0.1)    pqlower(p9,q1)
       (0.1)    pqlower(p10,q1)
       (0.1)    pqlower(p11,q1)
       (0.1)    pqlower(p12,q1)
       (0.1)    pqlower(p13,q1)
       (0.1)    pqlower(p14,q1)
       (0.1)    pqlower(p15,q1)
       (0.1)    pqlower(p16,q1)
       (0.1)    pqupper(p1,q1)
       (0.1)    pqupper(p2,q1)
       (0.1)    pqupper(p3,q1)
       (0.1)    pqupper(p4,q1)
       (0.1)    pqupper(p5,q1)
       (0.1)    pqupper(p6,q1)
       (0.1)    pqupper(p7,q1)
       (0.1)    pqupper(p8,q1)
       (0.1)    pqupper(p9,q1)
       (0.1)    pqupper(p10,q1)
       (0.1)    pqupper(p11,q1)
       (0.1)    pqupper(p12,q1)
       (0.1)    pqupper(p13,q1)
       (0.1)    pqupper(p14,q1)
       (0.1)    pqupper(p15,q1)
       (0.1)    pqupper(p16,q1)
        1       fraction(o1)
       (0.1)    extensions(o1,p1)
       (0.1)    extensions(o1,p2)
       (0.1)    extensions(o1,p3)
       (0.1)    extensions(o1,p4)
       (0.1)    extensions(o1,p5)
       (0.1)    extensions(o1,p6)
       (0.1)    extensions(o1,p7)
       (0.1)    extensions(o1,p8)
       (0.1)    extensions(o1,p9)
       (0.1)    extensions(o1,p10)
       (0.1)    extensions(o1,p11)
       (0.1)    extensions(o1,p12)
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 52
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


     q  pool quality from pooling raw materials

       (0.1)    extensions(o1,p13)
       (0.1)    extensions(o1,p14)
       (0.1)    extensions(o1,p15)
       (0.1)    extensions(o1,p16)

q(c2,o1)
                (.LO, .L, .UP, .M = 0, 0.1, 1, 0)
     (-30.4)    obj
       (1.6)    clower(c2)
       (1.6)    cupper(c2)
     (-14.4)    pszrlt(c2,o1)
       (0.11)   pqlower(p1,q1)
       (0.11)   pqlower(p2,q1)
       (0.11)   pqlower(p3,q1)
       (0.11)   pqlower(p4,q1)
       (0.11)   pqlower(p5,q1)
       (0.11)   pqlower(p6,q1)
       (0.11)   pqlower(p7,q1)
       (0.11)   pqlower(p8,q1)
       (0.11)   pqlower(p9,q1)
       (0.11)   pqlower(p10,q1)
       (0.11)   pqlower(p11,q1)
       (0.11)   pqlower(p12,q1)
       (0.11)   pqlower(p13,q1)
       (0.11)   pqlower(p14,q1)
       (0.11)   pqlower(p15,q1)
       (0.11)   pqlower(p16,q1)
       (0.11)   pqupper(p1,q1)
       (0.11)   pqupper(p2,q1)
       (0.11)   pqupper(p3,q1)
       (0.11)   pqupper(p4,q1)
       (0.11)   pqupper(p5,q1)
       (0.11)   pqupper(p6,q1)
       (0.11)   pqupper(p7,q1)
       (0.11)   pqupper(p8,q1)
       (0.11)   pqupper(p9,q1)
       (0.11)   pqupper(p10,q1)
       (0.11)   pqupper(p11,q1)
       (0.11)   pqupper(p12,q1)
       (0.11)   pqupper(p13,q1)
       (0.11)   pqupper(p14,q1)
       (0.11)   pqupper(p15,q1)
       (0.11)   pqupper(p16,q1)
        1       fraction(o1)
       (0.1)    extensions(o1,p1)
       (0.1)    extensions(o1,p2)
       (0.1)    extensions(o1,p3)
       (0.1)    extensions(o1,p4)
       (0.1)    extensions(o1,p5)
       (0.1)    extensions(o1,p6)
       (0.1)    extensions(o1,p7)
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 53
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


     q  pool quality from pooling raw materials

       (0.1)    extensions(o1,p8)
       (0.1)    extensions(o1,p9)
       (0.1)    extensions(o1,p10)
       (0.1)    extensions(o1,p11)
       (0.1)    extensions(o1,p12)
       (0.1)    extensions(o1,p13)
       (0.1)    extensions(o1,p14)
       (0.1)    extensions(o1,p15)
       (0.1)    extensions(o1,p16)

q(c3,o1)
                (.LO, .L, .UP, .M = 0, 0.1, 1, 0)
     (-28.8)    obj
       (1.6)    clower(c3)
       (1.6)    cupper(c3)
     (-14.4)    pszrlt(c3,o1)
       (0.12)   pqlower(p1,q1)
       (0.12)   pqlower(p2,q1)
       (0.12)   pqlower(p3,q1)
       (0.12)   pqlower(p4,q1)
       (0.12)   pqlower(p5,q1)
       (0.12)   pqlower(p6,q1)
       (0.12)   pqlower(p7,q1)
       (0.12)   pqlower(p8,q1)
       (0.12)   pqlower(p9,q1)
       (0.12)   pqlower(p10,q1)
       (0.12)   pqlower(p11,q1)
       (0.12)   pqlower(p12,q1)
       (0.12)   pqlower(p13,q1)
       (0.12)   pqlower(p14,q1)
       (0.12)   pqlower(p15,q1)
       (0.12)   pqlower(p16,q1)
       (0.12)   pqupper(p1,q1)
       (0.12)   pqupper(p2,q1)
       (0.12)   pqupper(p3,q1)
       (0.12)   pqupper(p4,q1)
       (0.12)   pqupper(p5,q1)
       (0.12)   pqupper(p6,q1)
       (0.12)   pqupper(p7,q1)
       (0.12)   pqupper(p8,q1)
       (0.12)   pqupper(p9,q1)
       (0.12)   pqupper(p10,q1)
       (0.12)   pqupper(p11,q1)
       (0.12)   pqupper(p12,q1)
       (0.12)   pqupper(p13,q1)
       (0.12)   pqupper(p14,q1)
       (0.12)   pqupper(p15,q1)
       (0.12)   pqupper(p16,q1)
        1       fraction(o1)
       (0.1)    extensions(o1,p1)
       (0.1)    extensions(o1,p2)
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 54
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


     q  pool quality from pooling raw materials

       (0.1)    extensions(o1,p3)
       (0.1)    extensions(o1,p4)
       (0.1)    extensions(o1,p5)
       (0.1)    extensions(o1,p6)
       (0.1)    extensions(o1,p7)
       (0.1)    extensions(o1,p8)
       (0.1)    extensions(o1,p9)
       (0.1)    extensions(o1,p10)
       (0.1)    extensions(o1,p11)
       (0.1)    extensions(o1,p12)
       (0.1)    extensions(o1,p13)
       (0.1)    extensions(o1,p14)
       (0.1)    extensions(o1,p15)
       (0.1)    extensions(o1,p16)

REMAINING 29 ENTRIES SKIPPED

---- y  flow from pool to product

y(o1,p1)
                (.LO, .L, .UP, .M = 0, 0.1, 16, 0)
      (12.6)    obj
       (0.1)    clower(c1)
       (0.1)    clower(c2)
       (0.1)    clower(c3)
       (0.1)    clower(c4)
       (0.1)    cupper(c1)
       (0.1)    cupper(c2)
       (0.1)    cupper(c3)
       (0.1)    cupper(c4)
       (0.1)    pszrlt(c1,o1)
       (0.1)    pszrlt(c2,o1)
       (0.1)    pszrlt(c3,o1)
       (0.1)    pszrlt(c4,o1)
        1       plower(p1)
        1       pupper(p1)
       (0.46)   pqlower(p1,q1)
      (-0.59)   pqupper(p1,q1)
      (-0.6)    extensions(o1,p1)

y(o1,p2)
                (.LO, .L, .UP, .M = 0, 0.1, 16, 0)
      (12.1)    obj
       (0.1)    clower(c1)
       (0.1)    clower(c2)
       (0.1)    clower(c3)
       (0.1)    clower(c4)
       (0.1)    cupper(c1)
       (0.1)    cupper(c2)
       (0.1)    cupper(c3)
       (0.1)    cupper(c4)
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 55
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


     y  flow from pool to product

       (0.1)    pszrlt(c1,o1)
       (0.1)    pszrlt(c2,o1)
       (0.1)    pszrlt(c3,o1)
       (0.1)    pszrlt(c4,o1)
        1       plower(p2)
        1       pupper(p2)
       (0.46)   pqlower(p2,q1)
      (-0.64)   pqupper(p2,q1)
      (-0.6)    extensions(o1,p2)

y(o1,p3)
                (.LO, .L, .UP, .M = 0, 0.1, 16, 0)
      (11.6)    obj
       (0.1)    clower(c1)
       (0.1)    clower(c2)
       (0.1)    clower(c3)
       (0.1)    clower(c4)
       (0.1)    cupper(c1)
       (0.1)    cupper(c2)
       (0.1)    cupper(c3)
       (0.1)    cupper(c4)
       (0.1)    pszrlt(c1,o1)
       (0.1)    pszrlt(c2,o1)
       (0.1)    pszrlt(c3,o1)
       (0.1)    pszrlt(c4,o1)
        1       plower(p3)
        1       pupper(p3)
       (0.46)   pqlower(p3,q1)
      (-0.69)   pqupper(p3,q1)
      (-0.6)    extensions(o1,p3)

REMAINING 125 ENTRIES SKIPPED

---- cost  total cost

cost
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       obj

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 56
The Pooling Problem (POOL,SEQ=254)
Model Statistics    SOLVE poolprob Using NLP From line 947


LOOPS                                 case   foulds3


MODEL STATISTICS

BLOCKS OF EQUATIONS          10     SINGLE EQUATIONS          297
BLOCKS OF VARIABLES           3     SINGLE VARIABLES          161
NON ZERO ELEMENTS         4,001     NON LINEAR N-Z          3,712
DERIVATIVE POOL              20     CONSTANT POOL              67
CODE LENGTH              13,219


GENERATION TIME      =        0.011 SECONDS      3 MB  24.7.4 r58773 LEX-LEG


EXECUTION TIME       =        0.011 SECONDS      3 MB  24.7.4 r58773 LEX-LEG
               L O O P S               case foulds3

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 57
The Pooling Problem (POOL,SEQ=254)
Solution Report     SOLVE poolprob Using NLP From line 947


               S O L V E      S U M M A R Y

     MODEL   poolprob            OBJECTIVE  cost
     TYPE    NLP                 DIRECTION  MINIMIZE
     SOLVER  CONVERT             FROM LINE  947

**** SOLVER STATUS     1 Normal Completion         
**** MODEL STATUS      14 No Solution Returned     
**** OBJECTIVE VALUE                0.0000

 RESOURCE USAGE, LIMIT          0.000      1000.000
 ITERATION COUNT, LIMIT         0    2000000000
 EVALUATION ERRORS              0             0

Convert 2.0      24.7.4 r58773 Released Sep 19, 2016 LEG x86 64bit/Linux      

--- Using Option File
Reading parameter(s) from "/home/renigijus/gams/opt-mod-lib/gamslib/pool/convert.opt"
>>  ampl pool-scalar.mod
Finished reading from "/home/renigijus/gams/opt-mod-lib/gamslib/pool/convert.opt"
Ampl      : pool-scalar.mod


No solution returned
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 58
The Pooling Problem (POOL,SEQ=254)
Equation Listing    SOLVE poolprob Using NLP From line 947


---- obj  =E=  objective function

obj..  - (32)*q(c1,o1) - (30.4)*q(c2,o2) - (30.4)*q(c2,o3) - (28.8)*q(c3,o3) - (28.8)*q(c3,o4) - (28.8)*q(c3,o5) - (27.2)*q(c4,o1) - (27.2)*q(c4,o4) - (27.2)*q(c4,o6) - (27.2)*q(c4,o7) - (25.6)*q(c5,o2) - (25.6)*q(c5,o3) - (25.6)*q(c5,o5)
     
      - (25.6)*q(c5,o8) - (24)*q(c6,o3) - (24)*q(c6,o4) - (24)*q(c6,o5) - (24)*q(c6,o6) - (22.4)*q(c7,o1) - (22.4)*q(c7,o4) - (22.4)*q(c7,o6) - (22.4)*q(c7,o7) - (20.8)*q(c8,o2) - (20.8)*q(c8,o5) - (20.8)*q(c8,o7) - (20.8)*q(c8,o8) - (19.2)*q(c9,o6)
     
      - (19.2)*q(c9,o7) - (19.2)*q(c9,o8) - (17.6)*q(c10,o1) - (17.6)*q(c10,o8) - (16)*q(c11,o2) + (13.8)*y(o1,p1) + (13.3)*y(o1,p2) + (12.8)*y(o1,p3) + (12.3)*y(o1,p4) + (11.8)*y(o1,p5) + (11.3)*y(o1,p6) + (10.8)*y(o1,p7) + (10.3)*y(o1,p8)
     
      + (9.8)*y(o1,p9) + (9.3)*y(o1,p10) + (8.8)*y(o1,p11) + (8.3)*y(o1,p12) + (7.8)*y(o1,p13) + (7.3)*y(o1,p14) + (6.8)*y(o1,p15) + (6.3)*y(o1,p16) + (14.2)*y(o2,p1) + (13.7)*y(o2,p2) + (13.2)*y(o2,p3) + (12.7)*y(o2,p4) + (12.2)*y(o2,p5)
     
      + (11.7)*y(o2,p6) + (11.2)*y(o2,p7) + (10.7)*y(o2,p8) + (10.2)*y(o2,p9) + (9.7)*y(o2,p10) + (9.2)*y(o2,p11) + (8.7)*y(o2,p12) + (8.2)*y(o2,p13) + (7.7)*y(o2,p14) + (7.2)*y(o2,p15) + (6.7)*y(o2,p16) + (13.2)*y(o3,p1) + (12.7)*y(o3,p2)
     
      + (12.2)*y(o3,p3) + (11.7)*y(o3,p4) + (11.2)*y(o3,p5) + (10.7)*y(o3,p6) + (10.2)*y(o3,p7) + (9.7)*y(o3,p8) + (9.2)*y(o3,p9) + (8.7)*y(o3,p10) + (8.2)*y(o3,p11) + (7.7)*y(o3,p12) + (7.2)*y(o3,p13) + (6.7)*y(o3,p14) + (6.2)*y(o3,p15) + (5.7)*y(o3,p16)
     
      + (13.6)*y(o4,p1) + (13.1)*y(o4,p2) + (12.6)*y(o4,p3) + (12.1)*y(o4,p4) + (11.6)*y(o4,p5) + (11.1)*y(o4,p6) + (10.6)*y(o4,p7) + (10.1)*y(o4,p8) + (9.6)*y(o4,p9) + (9.1)*y(o4,p10) + (8.6)*y(o4,p11) + (8.1)*y(o4,p12) + (7.6)*y(o4,p13)
     
      + (7.1)*y(o4,p14) + (6.6)*y(o4,p15) + (6.1)*y(o4,p16) + (13.8)*y(o5,p1) + (13.3)*y(o5,p2) + (12.8)*y(o5,p3) + (12.3)*y(o5,p4) + (11.8)*y(o5,p5) + (11.3)*y(o5,p6) + (10.8)*y(o5,p7) + (10.3)*y(o5,p8) + (9.8)*y(o5,p9) + (9.3)*y(o5,p10)
     
      + (8.8)*y(o5,p11) + (8.3)*y(o5,p12) + (7.8)*y(o5,p13) + (7.3)*y(o5,p14) + (6.8)*y(o5,p15) + (6.3)*y(o5,p16) + (14.2)*y(o6,p1) + (13.7)*y(o6,p2) + (13.2)*y(o6,p3) + (12.7)*y(o6,p4) + (12.2)*y(o6,p5) + (11.7)*y(o6,p6) + (11.2)*y(o6,p7)
     
      + (10.7)*y(o6,p8) + (10.2)*y(o6,p9) + (9.7)*y(o6,p10) + (9.2)*y(o6,p11) + (8.7)*y(o6,p12) + (8.2)*y(o6,p13) + (7.7)*y(o6,p14) + (7.2)*y(o6,p15) + (6.7)*y(o6,p16) + (14.4)*y(o7,p1) + (13.9)*y(o7,p2) + (13.4)*y(o7,p3) + (12.9)*y(o7,p4)
     
      + (12.4)*y(o7,p5) + (11.9)*y(o7,p6) + (11.4)*y(o7,p7) + (10.9)*y(o7,p8) + (10.4)*y(o7,p9) + (9.9)*y(o7,p10) + (9.4)*y(o7,p11) + (8.9)*y(o7,p12) + (8.4)*y(o7,p13) + (7.9)*y(o7,p14) + (7.4)*y(o7,p15) + (6.9)*y(o7,p16) + (14.8)*y(o8,p1)
     
      + (14.3)*y(o8,p2) + (13.8)*y(o8,p3) + (13.3)*y(o8,p4) + (12.8)*y(o8,p5) + (12.3)*y(o8,p6) + (11.8)*y(o8,p7) + (11.3)*y(o8,p8) + (10.8)*y(o8,p9) + (10.3)*y(o8,p10) + (9.8)*y(o8,p11) + (9.3)*y(o8,p12) + (8.8)*y(o8,p13) + (8.3)*y(o8,p14)
     
      + (7.8)*y(o8,p15) + (7.3)*y(o8,p16) + cost =E= 0 ; (LHS = 131.2, INFES = 131.2 ****)
     

---- clower  =G=  lower bound component availability

clower(c1)..  (1.6)*q(c1,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) + (0.1)*y(o1,p5) + (0.1)*y(o1,p6) + (0.1)*y(o1,p7) + (0.1)*y(o1,p8) + (0.1)*y(o1,p9) + (0.1)*y(o1,p10) + (0.1)*y(o1,p11) + (0.1)*y(o1,p12) + (0.1)*y(o1,p13)
     
      + (0.1)*y(o1,p14) + (0.1)*y(o1,p15) + (0.1)*y(o1,p16) =G= 0 ; (LHS = 0.16)
     
clower(c2)..  (1.6)*q(c2,o2) + (1.6)*q(c2,o3) + (0.1)*y(o2,p1) + (0.1)*y(o2,p2) + (0.1)*y(o2,p3) + (0.1)*y(o2,p4) + (0.1)*y(o2,p5) + (0.1)*y(o2,p6) + (0.1)*y(o2,p7) + (0.1)*y(o2,p8) + (0.1)*y(o2,p9) + (0.1)*y(o2,p10) + (0.1)*y(o2,p11) + (0.1)*y(o2,p12)
     
      + (0.1)*y(o2,p13) + (0.1)*y(o2,p14) + (0.1)*y(o2,p15) + (0.1)*y(o2,p16) + (0.1)*y(o3,p1) + (0.1)*y(o3,p2) + (0.1)*y(o3,p3) + (0.1)*y(o3,p4) + (0.1)*y(o3,p5) + (0.1)*y(o3,p6) + (0.1)*y(o3,p7) + (0.1)*y(o3,p8) + (0.1)*y(o3,p9) + (0.1)*y(o3,p10)
     
      + (0.1)*y(o3,p11) + (0.1)*y(o3,p12) + (0.1)*y(o3,p13) + (0.1)*y(o3,p14) + (0.1)*y(o3,p15) + (0.1)*y(o3,p16) =G= 0 ; (LHS = 0.32)
     
clower(c3)..  (1.6)*q(c3,o3) + (1.6)*q(c3,o4) + (1.6)*q(c3,o5) + (0.1)*y(o3,p1) + (0.1)*y(o3,p2) + (0.1)*y(o3,p3) + (0.1)*y(o3,p4) + (0.1)*y(o3,p5) + (0.1)*y(o3,p6) + (0.1)*y(o3,p7) + (0.1)*y(o3,p8) + (0.1)*y(o3,p9) + (0.1)*y(o3,p10) + (0.1)*y(o3,p11)
     
      + (0.1)*y(o3,p12) + (0.1)*y(o3,p13) + (0.1)*y(o3,p14) + (0.1)*y(o3,p15) + (0.1)*y(o3,p16) + (0.1)*y(o4,p1) + (0.1)*y(o4,p2) + (0.1)*y(o4,p3) + (0.1)*y(o4,p4) + (0.1)*y(o4,p5) + (0.1)*y(o4,p6) + (0.1)*y(o4,p7) + (0.1)*y(o4,p8) + (0.1)*y(o4,p9)
     
      + (0.1)*y(o4,p10) + (0.1)*y(o4,p11) + (0.1)*y(o4,p12) + (0.1)*y(o4,p13) + (0.1)*y(o4,p14) + (0.1)*y(o4,p15) + (0.1)*y(o4,p16) + (0.1)*y(o5,p1) + (0.1)*y(o5,p2) + (0.1)*y(o5,p3) + (0.1)*y(o5,p4) + (0.1)*y(o5,p5) + (0.1)*y(o5,p6) + (0.1)*y(o5,p7)
     
      + (0.1)*y(o5,p8) + (0.1)*y(o5,p9) + (0.1)*y(o5,p10) + (0.1)*y(o5,p11) + (0.1)*y(o5,p12) + (0.1)*y(o5,p13) + (0.1)*y(o5,p14) + (0.1)*y(o5,p15) + (0.1)*y(o5,p16) =G= 0 ; (LHS = 0.48)
     
REMAINING 8 ENTRIES SKIPPED

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 59
The Pooling Problem (POOL,SEQ=254)
Equation Listing    SOLVE poolprob Using NLP From line 947


---- cupper  =L=  upper bound component availability

cupper(c1)..  (1.6)*q(c1,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) + (0.1)*y(o1,p5) + (0.1)*y(o1,p6) + (0.1)*y(o1,p7) + (0.1)*y(o1,p8) + (0.1)*y(o1,p9) + (0.1)*y(o1,p10) + (0.1)*y(o1,p11) + (0.1)*y(o1,p12) + (0.1)*y(o1,p13)
     
      + (0.1)*y(o1,p14) + (0.1)*y(o1,p15) + (0.1)*y(o1,p16) =L= 16 ; (LHS = 0.16)
     
cupper(c2)..  (1.6)*q(c2,o2) + (1.6)*q(c2,o3) + (0.1)*y(o2,p1) + (0.1)*y(o2,p2) + (0.1)*y(o2,p3) + (0.1)*y(o2,p4) + (0.1)*y(o2,p5) + (0.1)*y(o2,p6) + (0.1)*y(o2,p7) + (0.1)*y(o2,p8) + (0.1)*y(o2,p9) + (0.1)*y(o2,p10) + (0.1)*y(o2,p11) + (0.1)*y(o2,p12)
     
      + (0.1)*y(o2,p13) + (0.1)*y(o2,p14) + (0.1)*y(o2,p15) + (0.1)*y(o2,p16) + (0.1)*y(o3,p1) + (0.1)*y(o3,p2) + (0.1)*y(o3,p3) + (0.1)*y(o3,p4) + (0.1)*y(o3,p5) + (0.1)*y(o3,p6) + (0.1)*y(o3,p7) + (0.1)*y(o3,p8) + (0.1)*y(o3,p9) + (0.1)*y(o3,p10)
     
      + (0.1)*y(o3,p11) + (0.1)*y(o3,p12) + (0.1)*y(o3,p13) + (0.1)*y(o3,p14) + (0.1)*y(o3,p15) + (0.1)*y(o3,p16) =L= 16 ; (LHS = 0.32)
     
cupper(c3)..  (1.6)*q(c3,o3) + (1.6)*q(c3,o4) + (1.6)*q(c3,o5) + (0.1)*y(o3,p1) + (0.1)*y(o3,p2) + (0.1)*y(o3,p3) + (0.1)*y(o3,p4) + (0.1)*y(o3,p5) + (0.1)*y(o3,p6) + (0.1)*y(o3,p7) + (0.1)*y(o3,p8) + (0.1)*y(o3,p9) + (0.1)*y(o3,p10) + (0.1)*y(o3,p11)
     
      + (0.1)*y(o3,p12) + (0.1)*y(o3,p13) + (0.1)*y(o3,p14) + (0.1)*y(o3,p15) + (0.1)*y(o3,p16) + (0.1)*y(o4,p1) + (0.1)*y(o4,p2) + (0.1)*y(o4,p3) + (0.1)*y(o4,p4) + (0.1)*y(o4,p5) + (0.1)*y(o4,p6) + (0.1)*y(o4,p7) + (0.1)*y(o4,p8) + (0.1)*y(o4,p9)
     
      + (0.1)*y(o4,p10) + (0.1)*y(o4,p11) + (0.1)*y(o4,p12) + (0.1)*y(o4,p13) + (0.1)*y(o4,p14) + (0.1)*y(o4,p15) + (0.1)*y(o4,p16) + (0.1)*y(o5,p1) + (0.1)*y(o5,p2) + (0.1)*y(o5,p3) + (0.1)*y(o5,p4) + (0.1)*y(o5,p5) + (0.1)*y(o5,p6) + (0.1)*y(o5,p7)
     
      + (0.1)*y(o5,p8) + (0.1)*y(o5,p9) + (0.1)*y(o5,p10) + (0.1)*y(o5,p11) + (0.1)*y(o5,p12) + (0.1)*y(o5,p13) + (0.1)*y(o5,p14) + (0.1)*y(o5,p15) + (0.1)*y(o5,p16) =L= 16 ; (LHS = 0.48)
     
REMAINING 8 ENTRIES SKIPPED


---- pszrlt  =L=  ss-rlt on pool size constraints

pszrlt(c1,o1)..  - (14.4)*q(c1,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) + (0.1)*y(o1,p5) + (0.1)*y(o1,p6) + (0.1)*y(o1,p7) + (0.1)*y(o1,p8) + (0.1)*y(o1,p9) + (0.1)*y(o1,p10) + (0.1)*y(o1,p11) + (0.1)*y(o1,p12)
     
      + (0.1)*y(o1,p13) + (0.1)*y(o1,p14) + (0.1)*y(o1,p15) + (0.1)*y(o1,p16) =L= 0 ; (LHS = -1.44)
     
pszrlt(c2,o2)..  - (14.4)*q(c2,o2) + (0.1)*y(o2,p1) + (0.1)*y(o2,p2) + (0.1)*y(o2,p3) + (0.1)*y(o2,p4) + (0.1)*y(o2,p5) + (0.1)*y(o2,p6) + (0.1)*y(o2,p7) + (0.1)*y(o2,p8) + (0.1)*y(o2,p9) + (0.1)*y(o2,p10) + (0.1)*y(o2,p11) + (0.1)*y(o2,p12)
     
      + (0.1)*y(o2,p13) + (0.1)*y(o2,p14) + (0.1)*y(o2,p15) + (0.1)*y(o2,p16) =L= 0 ; (LHS = -1.44)
     
pszrlt(c2,o3)..  - (14.4)*q(c2,o3) + (0.1)*y(o3,p1) + (0.1)*y(o3,p2) + (0.1)*y(o3,p3) + (0.1)*y(o3,p4) + (0.1)*y(o3,p5) + (0.1)*y(o3,p6) + (0.1)*y(o3,p7) + (0.1)*y(o3,p8) + (0.1)*y(o3,p9) + (0.1)*y(o3,p10) + (0.1)*y(o3,p11) + (0.1)*y(o3,p12)
     
      + (0.1)*y(o3,p13) + (0.1)*y(o3,p14) + (0.1)*y(o3,p15) + (0.1)*y(o3,p16) =L= 0 ; (LHS = -1.44)
     
REMAINING 29 ENTRIES SKIPPED


---- plower  =G=  minimum product production

plower(p1)..  y(o1,p1) + y(o2,p1) + y(o3,p1) + y(o4,p1) + y(o5,p1) + y(o6,p1) + y(o7,p1) + y(o8,p1) =G= 0 ; (LHS = 0.8)
     
plower(p2)..  y(o1,p2) + y(o2,p2) + y(o3,p2) + y(o4,p2) + y(o5,p2) + y(o6,p2) + y(o7,p2) + y(o8,p2) =G= 0 ; (LHS = 0.8)
     
plower(p3)..  y(o1,p3) + y(o2,p3) + y(o3,p3) + y(o4,p3) + y(o5,p3) + y(o6,p3) + y(o7,p3) + y(o8,p3) =G= 0 ; (LHS = 0.8)
     
REMAINING 13 ENTRIES SKIPPED

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 60
The Pooling Problem (POOL,SEQ=254)
Equation Listing    SOLVE poolprob Using NLP From line 947


---- pupper  =L=  maximum product demand

pupper(p1)..  y(o1,p1) + y(o2,p1) + y(o3,p1) + y(o4,p1) + y(o5,p1) + y(o6,p1) + y(o7,p1) + y(o8,p1) =L= 1 ; (LHS = 0.8)
     
pupper(p2)..  y(o1,p2) + y(o2,p2) + y(o3,p2) + y(o4,p2) + y(o5,p2) + y(o6,p2) + y(o7,p2) + y(o8,p2) =L= 1 ; (LHS = 0.8)
     
pupper(p3)..  y(o1,p3) + y(o2,p3) + y(o3,p3) + y(o4,p3) + y(o5,p3) + y(o6,p3) + y(o7,p3) + y(o8,p3) =L= 1 ; (LHS = 0.8)
     
REMAINING 13 ENTRIES SKIPPED


---- pqlower  =G=  minimum product quality requirement

pqlower(p1,q1)..  (0.1)*q(c1,o1) + (0.11)*q(c2,o2) + (0.11)*q(c2,o3) + (0.12)*q(c3,o3) + (0.12)*q(c3,o4) + (0.12)*q(c3,o5) + (0.13)*q(c4,o1) + (0.13)*q(c4,o4) + (0.13)*q(c4,o6) + (0.13)*q(c4,o7) + (0.14)*q(c5,o2) + (0.14)*q(c5,o3) + (0.14)*q(c5,o5)
     
      + (0.14)*q(c5,o8) + (0.15)*q(c6,o3) + (0.15)*q(c6,o4) + (0.15)*q(c6,o5) + (0.15)*q(c6,o6) + (0.16)*q(c7,o1) + (0.16)*q(c7,o4) + (0.16)*q(c7,o6) + (0.16)*q(c7,o7) + (0.17)*q(c8,o2) + (0.17)*q(c8,o5) + (0.17)*q(c8,o7) + (0.17)*q(c8,o8)
     
      + (0.18)*q(c9,o6) + (0.18)*q(c9,o7) + (0.18)*q(c9,o8) + (0.19)*q(c10,o1) + (0.19)*q(c10,o8) + (0.2)*q(c11,o2) + (0.58)*y(o1,p1) + (0.62)*y(o2,p1) + (0.52)*y(o3,p1) + (0.56)*y(o4,p1) + (0.58)*y(o5,p1) + (0.62)*y(o6,p1) + (0.64)*y(o7,p1)
     
      + (0.68)*y(o8,p1) =G= 0 ; (LHS = 0.48)
     
pqlower(p2,q1)..  (0.1)*q(c1,o1) + (0.11)*q(c2,o2) + (0.11)*q(c2,o3) + (0.12)*q(c3,o3) + (0.12)*q(c3,o4) + (0.12)*q(c3,o5) + (0.13)*q(c4,o1) + (0.13)*q(c4,o4) + (0.13)*q(c4,o6) + (0.13)*q(c4,o7) + (0.14)*q(c5,o2) + (0.14)*q(c5,o3) + (0.14)*q(c5,o5)
     
      + (0.14)*q(c5,o8) + (0.15)*q(c6,o3) + (0.15)*q(c6,o4) + (0.15)*q(c6,o5) + (0.15)*q(c6,o6) + (0.16)*q(c7,o1) + (0.16)*q(c7,o4) + (0.16)*q(c7,o6) + (0.16)*q(c7,o7) + (0.17)*q(c8,o2) + (0.17)*q(c8,o5) + (0.17)*q(c8,o7) + (0.17)*q(c8,o8)
     
      + (0.18)*q(c9,o6) + (0.18)*q(c9,o7) + (0.18)*q(c9,o8) + (0.19)*q(c10,o1) + (0.19)*q(c10,o8) + (0.2)*q(c11,o2) + (0.58)*y(o1,p2) + (0.62)*y(o2,p2) + (0.52)*y(o3,p2) + (0.56)*y(o4,p2) + (0.58)*y(o5,p2) + (0.62)*y(o6,p2) + (0.64)*y(o7,p2)
     
      + (0.68)*y(o8,p2) =G= 0 ; (LHS = 0.48)
     
pqlower(p3,q1)..  (0.1)*q(c1,o1) + (0.11)*q(c2,o2) + (0.11)*q(c2,o3) + (0.12)*q(c3,o3) + (0.12)*q(c3,o4) + (0.12)*q(c3,o5) + (0.13)*q(c4,o1) + (0.13)*q(c4,o4) + (0.13)*q(c4,o6) + (0.13)*q(c4,o7) + (0.14)*q(c5,o2) + (0.14)*q(c5,o3) + (0.14)*q(c5,o5)
     
      + (0.14)*q(c5,o8) + (0.15)*q(c6,o3) + (0.15)*q(c6,o4) + (0.15)*q(c6,o5) + (0.15)*q(c6,o6) + (0.16)*q(c7,o1) + (0.16)*q(c7,o4) + (0.16)*q(c7,o6) + (0.16)*q(c7,o7) + (0.17)*q(c8,o2) + (0.17)*q(c8,o5) + (0.17)*q(c8,o7) + (0.17)*q(c8,o8)
     
      + (0.18)*q(c9,o6) + (0.18)*q(c9,o7) + (0.18)*q(c9,o8) + (0.19)*q(c10,o1) + (0.19)*q(c10,o8) + (0.2)*q(c11,o2) + (0.58)*y(o1,p3) + (0.62)*y(o2,p3) + (0.52)*y(o3,p3) + (0.56)*y(o4,p3) + (0.58)*y(o5,p3) + (0.62)*y(o6,p3) + (0.64)*y(o7,p3)
     
      + (0.68)*y(o8,p3) =G= 0 ; (LHS = 0.48)
     
REMAINING 13 ENTRIES SKIPPED


---- pqupper  =L=  maximum product quality

pqupper(p1,q1)..  (0.1)*q(c1,o1) + (0.11)*q(c2,o2) + (0.11)*q(c2,o3) + (0.12)*q(c3,o3) + (0.12)*q(c3,o4) + (0.12)*q(c3,o5) + (0.13)*q(c4,o1) + (0.13)*q(c4,o4) + (0.13)*q(c4,o6) + (0.13)*q(c4,o7) + (0.14)*q(c5,o2) + (0.14)*q(c5,o3) + (0.14)*q(c5,o5)
     
      + (0.14)*q(c5,o8) + (0.15)*q(c6,o3) + (0.15)*q(c6,o4) + (0.15)*q(c6,o5) + (0.15)*q(c6,o6) + (0.16)*q(c7,o1) + (0.16)*q(c7,o4) + (0.16)*q(c7,o6) + (0.16)*q(c7,o7) + (0.17)*q(c8,o2) + (0.17)*q(c8,o5) + (0.17)*q(c8,o7) + (0.17)*q(c8,o8)
     
      + (0.18)*q(c9,o6) + (0.18)*q(c9,o7) + (0.18)*q(c9,o8) + (0.19)*q(c10,o1) + (0.19)*q(c10,o8) + (0.2)*q(c11,o2) - (0.47)*y(o1,p1) - (0.43)*y(o2,p1) - (0.53)*y(o3,p1) - (0.49)*y(o4,p1) - (0.47)*y(o5,p1) - (0.43)*y(o6,p1) - (0.41)*y(o7,p1)
     
      - (0.37)*y(o8,p1) =L= 0 ; (LHS = -0.36)
     
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 61
The Pooling Problem (POOL,SEQ=254)
Equation Listing    SOLVE poolprob Using NLP From line 947


     pqupper  =L=  maximum product quality

pqupper(p2,q1)..  (0.1)*q(c1,o1) + (0.11)*q(c2,o2) + (0.11)*q(c2,o3) + (0.12)*q(c3,o3) + (0.12)*q(c3,o4) + (0.12)*q(c3,o5) + (0.13)*q(c4,o1) + (0.13)*q(c4,o4) + (0.13)*q(c4,o6) + (0.13)*q(c4,o7) + (0.14)*q(c5,o2) + (0.14)*q(c5,o3) + (0.14)*q(c5,o5)
     
      + (0.14)*q(c5,o8) + (0.15)*q(c6,o3) + (0.15)*q(c6,o4) + (0.15)*q(c6,o5) + (0.15)*q(c6,o6) + (0.16)*q(c7,o1) + (0.16)*q(c7,o4) + (0.16)*q(c7,o6) + (0.16)*q(c7,o7) + (0.17)*q(c8,o2) + (0.17)*q(c8,o5) + (0.17)*q(c8,o7) + (0.17)*q(c8,o8)
     
      + (0.18)*q(c9,o6) + (0.18)*q(c9,o7) + (0.18)*q(c9,o8) + (0.19)*q(c10,o1) + (0.19)*q(c10,o8) + (0.2)*q(c11,o2) - (0.52)*y(o1,p2) - (0.48)*y(o2,p2) - (0.58)*y(o3,p2) - (0.54)*y(o4,p2) - (0.52)*y(o5,p2) - (0.48)*y(o6,p2) - (0.46)*y(o7,p2)
     
      - (0.42)*y(o8,p2) =L= 0 ; (LHS = -0.4)
     
pqupper(p3,q1)..  (0.1)*q(c1,o1) + (0.11)*q(c2,o2) + (0.11)*q(c2,o3) + (0.12)*q(c3,o3) + (0.12)*q(c3,o4) + (0.12)*q(c3,o5) + (0.13)*q(c4,o1) + (0.13)*q(c4,o4) + (0.13)*q(c4,o6) + (0.13)*q(c4,o7) + (0.14)*q(c5,o2) + (0.14)*q(c5,o3) + (0.14)*q(c5,o5)
     
      + (0.14)*q(c5,o8) + (0.15)*q(c6,o3) + (0.15)*q(c6,o4) + (0.15)*q(c6,o5) + (0.15)*q(c6,o6) + (0.16)*q(c7,o1) + (0.16)*q(c7,o4) + (0.16)*q(c7,o6) + (0.16)*q(c7,o7) + (0.17)*q(c8,o2) + (0.17)*q(c8,o5) + (0.17)*q(c8,o7) + (0.17)*q(c8,o8)
     
      + (0.18)*q(c9,o6) + (0.18)*q(c9,o7) + (0.18)*q(c9,o8) + (0.19)*q(c10,o1) + (0.19)*q(c10,o8) + (0.2)*q(c11,o2) - (0.57)*y(o1,p3) - (0.53)*y(o2,p3) - (0.63)*y(o3,p3) - (0.59)*y(o4,p3) - (0.57)*y(o5,p3) - (0.53)*y(o6,p3) - (0.51)*y(o7,p3)
     
      - (0.47)*y(o8,p3) =L= 0 ; (LHS = -0.44)
     
REMAINING 13 ENTRIES SKIPPED


---- fraction  =E=  fractions sum to one

fraction(o1)..  q(c1,o1) + q(c4,o1) + q(c7,o1) + q(c10,o1) =E= 1 ; (LHS = 0.4, INFES = 0.6 ****)
     
fraction(o2)..  q(c2,o2) + q(c5,o2) + q(c8,o2) + q(c11,o2) =E= 1 ; (LHS = 0.4, INFES = 0.6 ****)
     
fraction(o3)..  q(c2,o3) + q(c3,o3) + q(c5,o3) + q(c6,o3) =E= 1 ; (LHS = 0.4, INFES = 0.6 ****)
     
REMAINING 5 ENTRIES SKIPPED


---- extensions  =E=  convexification constraints

extensions(o1,p1)..  (0.1)*q(c1,o1) + (0.1)*q(c4,o1) + (0.1)*q(c7,o1) + (0.1)*q(c10,o1) - (0.6)*y(o1,p1) =E= 0 ; (LHS = -0.06, INFES = 0.06 ****)
     
extensions(o1,p2)..  (0.1)*q(c1,o1) + (0.1)*q(c4,o1) + (0.1)*q(c7,o1) + (0.1)*q(c10,o1) - (0.6)*y(o1,p2) =E= 0 ; (LHS = -0.06, INFES = 0.06 ****)
     
extensions(o1,p3)..  (0.1)*q(c1,o1) + (0.1)*q(c4,o1) + (0.1)*q(c7,o1) + (0.1)*q(c10,o1) - (0.6)*y(o1,p3) =E= 0 ; (LHS = -0.06, INFES = 0.06 ****)
     
REMAINING 125 ENTRIES SKIPPED

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 62
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


---- q  pool quality from pooling raw materials

q(c1,o1)
                (.LO, .L, .UP, .M = 0, 0.1, 1, 0)
     (-32)      obj
       (1.6)    clower(c1)
       (1.6)    cupper(c1)
     (-14.4)    pszrlt(c1,o1)
       (0.1)    pqlower(p1,q1)
       (0.1)    pqlower(p2,q1)
       (0.1)    pqlower(p3,q1)
       (0.1)    pqlower(p4,q1)
       (0.1)    pqlower(p5,q1)
       (0.1)    pqlower(p6,q1)
       (0.1)    pqlower(p7,q1)
       (0.1)    pqlower(p8,q1)
       (0.1)    pqlower(p9,q1)
       (0.1)    pqlower(p10,q1)
       (0.1)    pqlower(p11,q1)
       (0.1)    pqlower(p12,q1)
       (0.1)    pqlower(p13,q1)
       (0.1)    pqlower(p14,q1)
       (0.1)    pqlower(p15,q1)
       (0.1)    pqlower(p16,q1)
       (0.1)    pqupper(p1,q1)
       (0.1)    pqupper(p2,q1)
       (0.1)    pqupper(p3,q1)
       (0.1)    pqupper(p4,q1)
       (0.1)    pqupper(p5,q1)
       (0.1)    pqupper(p6,q1)
       (0.1)    pqupper(p7,q1)
       (0.1)    pqupper(p8,q1)
       (0.1)    pqupper(p9,q1)
       (0.1)    pqupper(p10,q1)
       (0.1)    pqupper(p11,q1)
       (0.1)    pqupper(p12,q1)
       (0.1)    pqupper(p13,q1)
       (0.1)    pqupper(p14,q1)
       (0.1)    pqupper(p15,q1)
       (0.1)    pqupper(p16,q1)
        1       fraction(o1)
       (0.1)    extensions(o1,p1)
       (0.1)    extensions(o1,p2)
       (0.1)    extensions(o1,p3)
       (0.1)    extensions(o1,p4)
       (0.1)    extensions(o1,p5)
       (0.1)    extensions(o1,p6)
       (0.1)    extensions(o1,p7)
       (0.1)    extensions(o1,p8)
       (0.1)    extensions(o1,p9)
       (0.1)    extensions(o1,p10)
       (0.1)    extensions(o1,p11)
       (0.1)    extensions(o1,p12)
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 63
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


     q  pool quality from pooling raw materials

       (0.1)    extensions(o1,p13)
       (0.1)    extensions(o1,p14)
       (0.1)    extensions(o1,p15)
       (0.1)    extensions(o1,p16)

q(c2,o2)
                (.LO, .L, .UP, .M = 0, 0.1, 1, 0)
     (-30.4)    obj
       (1.6)    clower(c2)
       (1.6)    cupper(c2)
     (-14.4)    pszrlt(c2,o2)
       (0.11)   pqlower(p1,q1)
       (0.11)   pqlower(p2,q1)
       (0.11)   pqlower(p3,q1)
       (0.11)   pqlower(p4,q1)
       (0.11)   pqlower(p5,q1)
       (0.11)   pqlower(p6,q1)
       (0.11)   pqlower(p7,q1)
       (0.11)   pqlower(p8,q1)
       (0.11)   pqlower(p9,q1)
       (0.11)   pqlower(p10,q1)
       (0.11)   pqlower(p11,q1)
       (0.11)   pqlower(p12,q1)
       (0.11)   pqlower(p13,q1)
       (0.11)   pqlower(p14,q1)
       (0.11)   pqlower(p15,q1)
       (0.11)   pqlower(p16,q1)
       (0.11)   pqupper(p1,q1)
       (0.11)   pqupper(p2,q1)
       (0.11)   pqupper(p3,q1)
       (0.11)   pqupper(p4,q1)
       (0.11)   pqupper(p5,q1)
       (0.11)   pqupper(p6,q1)
       (0.11)   pqupper(p7,q1)
       (0.11)   pqupper(p8,q1)
       (0.11)   pqupper(p9,q1)
       (0.11)   pqupper(p10,q1)
       (0.11)   pqupper(p11,q1)
       (0.11)   pqupper(p12,q1)
       (0.11)   pqupper(p13,q1)
       (0.11)   pqupper(p14,q1)
       (0.11)   pqupper(p15,q1)
       (0.11)   pqupper(p16,q1)
        1       fraction(o2)
       (0.1)    extensions(o2,p1)
       (0.1)    extensions(o2,p2)
       (0.1)    extensions(o2,p3)
       (0.1)    extensions(o2,p4)
       (0.1)    extensions(o2,p5)
       (0.1)    extensions(o2,p6)
       (0.1)    extensions(o2,p7)
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 64
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


     q  pool quality from pooling raw materials

       (0.1)    extensions(o2,p8)
       (0.1)    extensions(o2,p9)
       (0.1)    extensions(o2,p10)
       (0.1)    extensions(o2,p11)
       (0.1)    extensions(o2,p12)
       (0.1)    extensions(o2,p13)
       (0.1)    extensions(o2,p14)
       (0.1)    extensions(o2,p15)
       (0.1)    extensions(o2,p16)

q(c2,o3)
                (.LO, .L, .UP, .M = 0, 0.1, 1, 0)
     (-30.4)    obj
       (1.6)    clower(c2)
       (1.6)    cupper(c2)
     (-14.4)    pszrlt(c2,o3)
       (0.11)   pqlower(p1,q1)
       (0.11)   pqlower(p2,q1)
       (0.11)   pqlower(p3,q1)
       (0.11)   pqlower(p4,q1)
       (0.11)   pqlower(p5,q1)
       (0.11)   pqlower(p6,q1)
       (0.11)   pqlower(p7,q1)
       (0.11)   pqlower(p8,q1)
       (0.11)   pqlower(p9,q1)
       (0.11)   pqlower(p10,q1)
       (0.11)   pqlower(p11,q1)
       (0.11)   pqlower(p12,q1)
       (0.11)   pqlower(p13,q1)
       (0.11)   pqlower(p14,q1)
       (0.11)   pqlower(p15,q1)
       (0.11)   pqlower(p16,q1)
       (0.11)   pqupper(p1,q1)
       (0.11)   pqupper(p2,q1)
       (0.11)   pqupper(p3,q1)
       (0.11)   pqupper(p4,q1)
       (0.11)   pqupper(p5,q1)
       (0.11)   pqupper(p6,q1)
       (0.11)   pqupper(p7,q1)
       (0.11)   pqupper(p8,q1)
       (0.11)   pqupper(p9,q1)
       (0.11)   pqupper(p10,q1)
       (0.11)   pqupper(p11,q1)
       (0.11)   pqupper(p12,q1)
       (0.11)   pqupper(p13,q1)
       (0.11)   pqupper(p14,q1)
       (0.11)   pqupper(p15,q1)
       (0.11)   pqupper(p16,q1)
        1       fraction(o3)
       (0.1)    extensions(o3,p1)
       (0.1)    extensions(o3,p2)
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 65
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


     q  pool quality from pooling raw materials

       (0.1)    extensions(o3,p3)
       (0.1)    extensions(o3,p4)
       (0.1)    extensions(o3,p5)
       (0.1)    extensions(o3,p6)
       (0.1)    extensions(o3,p7)
       (0.1)    extensions(o3,p8)
       (0.1)    extensions(o3,p9)
       (0.1)    extensions(o3,p10)
       (0.1)    extensions(o3,p11)
       (0.1)    extensions(o3,p12)
       (0.1)    extensions(o3,p13)
       (0.1)    extensions(o3,p14)
       (0.1)    extensions(o3,p15)
       (0.1)    extensions(o3,p16)

REMAINING 29 ENTRIES SKIPPED

---- y  flow from pool to product

y(o1,p1)
                (.LO, .L, .UP, .M = 0, 0.1, 16, 0)
      (13.8)    obj
       (0.1)    clower(c1)
       (0.1)    clower(c4)
       (0.1)    clower(c7)
       (0.1)    clower(c10)
       (0.1)    cupper(c1)
       (0.1)    cupper(c4)
       (0.1)    cupper(c7)
       (0.1)    cupper(c10)
       (0.1)    pszrlt(c1,o1)
       (0.1)    pszrlt(c4,o1)
       (0.1)    pszrlt(c7,o1)
       (0.1)    pszrlt(c10,o1)
        1       plower(p1)
        1       pupper(p1)
       (0.58)   pqlower(p1,q1)
      (-0.47)   pqupper(p1,q1)
      (-0.6)    extensions(o1,p1)

y(o1,p2)
                (.LO, .L, .UP, .M = 0, 0.1, 16, 0)
      (13.3)    obj
       (0.1)    clower(c1)
       (0.1)    clower(c4)
       (0.1)    clower(c7)
       (0.1)    clower(c10)
       (0.1)    cupper(c1)
       (0.1)    cupper(c4)
       (0.1)    cupper(c7)
       (0.1)    cupper(c10)
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 66
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


     y  flow from pool to product

       (0.1)    pszrlt(c1,o1)
       (0.1)    pszrlt(c4,o1)
       (0.1)    pszrlt(c7,o1)
       (0.1)    pszrlt(c10,o1)
        1       plower(p2)
        1       pupper(p2)
       (0.58)   pqlower(p2,q1)
      (-0.52)   pqupper(p2,q1)
      (-0.6)    extensions(o1,p2)

y(o1,p3)
                (.LO, .L, .UP, .M = 0, 0.1, 16, 0)
      (12.8)    obj
       (0.1)    clower(c1)
       (0.1)    clower(c4)
       (0.1)    clower(c7)
       (0.1)    clower(c10)
       (0.1)    cupper(c1)
       (0.1)    cupper(c4)
       (0.1)    cupper(c7)
       (0.1)    cupper(c10)
       (0.1)    pszrlt(c1,o1)
       (0.1)    pszrlt(c4,o1)
       (0.1)    pszrlt(c7,o1)
       (0.1)    pszrlt(c10,o1)
        1       plower(p3)
        1       pupper(p3)
       (0.58)   pqlower(p3,q1)
      (-0.57)   pqupper(p3,q1)
      (-0.6)    extensions(o1,p3)

REMAINING 125 ENTRIES SKIPPED

---- cost  total cost

cost
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       obj

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 67
The Pooling Problem (POOL,SEQ=254)
Model Statistics    SOLVE poolprob Using NLP From line 947


LOOPS                                 case   foulds4


MODEL STATISTICS

BLOCKS OF EQUATIONS          10     SINGLE EQUATIONS          255
BLOCKS OF VARIABLES           3     SINGLE VARIABLES          161
NON ZERO ELEMENTS         4,001     NON LINEAR N-Z          3,712
DERIVATIVE POOL              20     CONSTANT POOL              67
CODE LENGTH              13,177


GENERATION TIME      =        0.008 SECONDS      3 MB  24.7.4 r58773 LEX-LEG


EXECUTION TIME       =        0.008 SECONDS      3 MB  24.7.4 r58773 LEX-LEG
               L O O P S               case foulds4

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 68
The Pooling Problem (POOL,SEQ=254)
Solution Report     SOLVE poolprob Using NLP From line 947


               S O L V E      S U M M A R Y

     MODEL   poolprob            OBJECTIVE  cost
     TYPE    NLP                 DIRECTION  MINIMIZE
     SOLVER  CONVERT             FROM LINE  947

**** SOLVER STATUS     1 Normal Completion         
**** MODEL STATUS      14 No Solution Returned     
**** OBJECTIVE VALUE                0.0000

 RESOURCE USAGE, LIMIT          0.000      1000.000
 ITERATION COUNT, LIMIT         0    2000000000
 EVALUATION ERRORS              0             0

Convert 2.0      24.7.4 r58773 Released Sep 19, 2016 LEG x86 64bit/Linux      

--- Using Option File
Reading parameter(s) from "/home/renigijus/gams/opt-mod-lib/gamslib/pool/convert.opt"
>>  ampl pool-scalar.mod
Finished reading from "/home/renigijus/gams/opt-mod-lib/gamslib/pool/convert.opt"
Ampl      : pool-scalar.mod


No solution returned
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 69
The Pooling Problem (POOL,SEQ=254)
Equation Listing    SOLVE poolprob Using NLP From line 947


---- obj  =E=  objective function

obj..  - (32)*q(c1,o1) - (32)*q(c1,o7) - (30.4)*q(c2,o1) - (30.4)*q(c2,o3) - (30.4)*q(c2,o7) - (28.8)*q(c3,o1) - (28.8)*q(c3,o3) - (28.8)*q(c3,o7) - (27.2)*q(c4,o1) - (27.2)*q(c4,o3) - (27.2)*q(c4,o5) - (27.2)*q(c4,o7) - (25.6)*q(c5,o3) - (25.6)*q(c5,o5)
     
      - (25.6)*q(c5,o8) - (24)*q(c6,o5) - (24)*q(c6,o8) - (22.4)*q(c7,o4) - (22.4)*q(c7,o5) - (22.4)*q(c7,o8) - (20.8)*q(c8,o2) - (20.8)*q(c8,o4) - (20.8)*q(c8,o6) - (20.8)*q(c8,o8) - (19.2)*q(c9,o2) - (19.2)*q(c9,o4) - (19.2)*q(c9,o6) - (17.6)*q(c10,o2)
     
      - (17.6)*q(c10,o4) - (17.6)*q(c10,o6) - (16)*q(c11,o2) - (16)*q(c11,o6) + (12.6)*y(o1,p1) + (12.1)*y(o1,p2) + (11.6)*y(o1,p3) + (11.1)*y(o1,p4) + (10.6)*y(o1,p5) + (10.1)*y(o1,p6) + (9.6)*y(o1,p7) + (9.1)*y(o1,p8) + (8.6)*y(o1,p9) + (8.1)*y(o1,p10)
     
      + (7.6)*y(o1,p11) + (7.1)*y(o1,p12) + (6.6)*y(o1,p13) + (6.1)*y(o1,p14) + (5.6)*y(o1,p15) + (5.1)*y(o1,p16) + (15.4)*y(o2,p1) + (14.9)*y(o2,p2) + (14.4)*y(o2,p3) + (13.9)*y(o2,p4) + (13.4)*y(o2,p5) + (12.9)*y(o2,p6) + (12.4)*y(o2,p7)
     
      + (11.9)*y(o2,p8) + (11.4)*y(o2,p9) + (10.9)*y(o2,p10) + (10.4)*y(o2,p11) + (9.9)*y(o2,p12) + (9.4)*y(o2,p13) + (8.9)*y(o2,p14) + (8.4)*y(o2,p15) + (7.9)*y(o2,p16) + (13)*y(o3,p1) + (12.5)*y(o3,p2) + (12)*y(o3,p3) + (11.5)*y(o3,p4) + (11)*y(o3,p5)
     
      + (10.5)*y(o3,p6) + (10)*y(o3,p7) + (9.5)*y(o3,p8) + (9)*y(o3,p9) + (8.5)*y(o3,p10) + (8)*y(o3,p11) + (7.5)*y(o3,p12) + (7)*y(o3,p13) + (6.5)*y(o3,p14) + (6)*y(o3,p15) + (5.5)*y(o3,p16) + (15)*y(o4,p1) + (14.5)*y(o4,p2) + (14)*y(o4,p3)
     
      + (13.5)*y(o4,p4) + (13)*y(o4,p5) + (12.5)*y(o4,p6) + (12)*y(o4,p7) + (11.5)*y(o4,p8) + (11)*y(o4,p9) + (10.5)*y(o4,p10) + (10)*y(o4,p11) + (9.5)*y(o4,p12) + (9)*y(o4,p13) + (8.5)*y(o4,p14) + (8)*y(o4,p15) + (7.5)*y(o4,p16) + (13.8)*y(o5,p1)
     
      + (13.3)*y(o5,p2) + (12.8)*y(o5,p3) + (12.3)*y(o5,p4) + (11.8)*y(o5,p5) + (11.3)*y(o5,p6) + (10.8)*y(o5,p7) + (10.3)*y(o5,p8) + (9.8)*y(o5,p9) + (9.3)*y(o5,p10) + (8.8)*y(o5,p11) + (8.3)*y(o5,p12) + (7.8)*y(o5,p13) + (7.3)*y(o5,p14)
     
      + (6.8)*y(o5,p15) + (6.3)*y(o5,p16) + (15.4)*y(o6,p1) + (14.9)*y(o6,p2) + (14.4)*y(o6,p3) + (13.9)*y(o6,p4) + (13.4)*y(o6,p5) + (12.9)*y(o6,p6) + (12.4)*y(o6,p7) + (11.9)*y(o6,p8) + (11.4)*y(o6,p9) + (10.9)*y(o6,p10) + (10.4)*y(o6,p11)
     
      + (9.9)*y(o6,p12) + (9.4)*y(o6,p13) + (8.9)*y(o6,p14) + (8.4)*y(o6,p15) + (7.9)*y(o6,p16) + (12.6)*y(o7,p1) + (12.1)*y(o7,p2) + (11.6)*y(o7,p3) + (11.1)*y(o7,p4) + (10.6)*y(o7,p5) + (10.1)*y(o7,p6) + (9.6)*y(o7,p7) + (9.1)*y(o7,p8) + (8.6)*y(o7,p9)
     
      + (8.1)*y(o7,p10) + (7.6)*y(o7,p11) + (7.1)*y(o7,p12) + (6.6)*y(o7,p13) + (6.1)*y(o7,p14) + (5.6)*y(o7,p15) + (5.1)*y(o7,p16) + (14.2)*y(o8,p1) + (13.7)*y(o8,p2) + (13.2)*y(o8,p3) + (12.7)*y(o8,p4) + (12.2)*y(o8,p5) + (11.7)*y(o8,p6)
     
      + (11.2)*y(o8,p7) + (10.7)*y(o8,p8) + (10.2)*y(o8,p9) + (9.7)*y(o8,p10) + (9.2)*y(o8,p11) + (8.7)*y(o8,p12) + (8.2)*y(o8,p13) + (7.7)*y(o8,p14) + (7.2)*y(o8,p15) + (6.7)*y(o8,p16) + cost =E= 0 ; (LHS = 131.2, INFES = 131.2 ****)
     

---- clower  =G=  lower bound component availability

clower(c1)..  (1.6)*q(c1,o1) + (1.6)*q(c1,o7) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) + (0.1)*y(o1,p5) + (0.1)*y(o1,p6) + (0.1)*y(o1,p7) + (0.1)*y(o1,p8) + (0.1)*y(o1,p9) + (0.1)*y(o1,p10) + (0.1)*y(o1,p11) + (0.1)*y(o1,p12)
     
      + (0.1)*y(o1,p13) + (0.1)*y(o1,p14) + (0.1)*y(o1,p15) + (0.1)*y(o1,p16) + (0.1)*y(o7,p1) + (0.1)*y(o7,p2) + (0.1)*y(o7,p3) + (0.1)*y(o7,p4) + (0.1)*y(o7,p5) + (0.1)*y(o7,p6) + (0.1)*y(o7,p7) + (0.1)*y(o7,p8) + (0.1)*y(o7,p9) + (0.1)*y(o7,p10)
     
      + (0.1)*y(o7,p11) + (0.1)*y(o7,p12) + (0.1)*y(o7,p13) + (0.1)*y(o7,p14) + (0.1)*y(o7,p15) + (0.1)*y(o7,p16) =G= 0 ; (LHS = 0.32)
     
clower(c2)..  (1.6)*q(c2,o1) + (1.6)*q(c2,o3) + (1.6)*q(c2,o7) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) + (0.1)*y(o1,p5) + (0.1)*y(o1,p6) + (0.1)*y(o1,p7) + (0.1)*y(o1,p8) + (0.1)*y(o1,p9) + (0.1)*y(o1,p10) + (0.1)*y(o1,p11)
     
      + (0.1)*y(o1,p12) + (0.1)*y(o1,p13) + (0.1)*y(o1,p14) + (0.1)*y(o1,p15) + (0.1)*y(o1,p16) + (0.1)*y(o3,p1) + (0.1)*y(o3,p2) + (0.1)*y(o3,p3) + (0.1)*y(o3,p4) + (0.1)*y(o3,p5) + (0.1)*y(o3,p6) + (0.1)*y(o3,p7) + (0.1)*y(o3,p8) + (0.1)*y(o3,p9)
     
      + (0.1)*y(o3,p10) + (0.1)*y(o3,p11) + (0.1)*y(o3,p12) + (0.1)*y(o3,p13) + (0.1)*y(o3,p14) + (0.1)*y(o3,p15) + (0.1)*y(o3,p16) + (0.1)*y(o7,p1) + (0.1)*y(o7,p2) + (0.1)*y(o7,p3) + (0.1)*y(o7,p4) + (0.1)*y(o7,p5) + (0.1)*y(o7,p6) + (0.1)*y(o7,p7)
     
      + (0.1)*y(o7,p8) + (0.1)*y(o7,p9) + (0.1)*y(o7,p10) + (0.1)*y(o7,p11) + (0.1)*y(o7,p12) + (0.1)*y(o7,p13) + (0.1)*y(o7,p14) + (0.1)*y(o7,p15) + (0.1)*y(o7,p16) =G= 0 ; (LHS = 0.48)
     
clower(c3)..  (1.6)*q(c3,o1) + (1.6)*q(c3,o3) + (1.6)*q(c3,o7) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) + (0.1)*y(o1,p5) + (0.1)*y(o1,p6) + (0.1)*y(o1,p7) + (0.1)*y(o1,p8) + (0.1)*y(o1,p9) + (0.1)*y(o1,p10) + (0.1)*y(o1,p11)
     
      + (0.1)*y(o1,p12) + (0.1)*y(o1,p13) + (0.1)*y(o1,p14) + (0.1)*y(o1,p15) + (0.1)*y(o1,p16) + (0.1)*y(o3,p1) + (0.1)*y(o3,p2) + (0.1)*y(o3,p3) + (0.1)*y(o3,p4) + (0.1)*y(o3,p5) + (0.1)*y(o3,p6) + (0.1)*y(o3,p7) + (0.1)*y(o3,p8) + (0.1)*y(o3,p9)
     
      + (0.1)*y(o3,p10) + (0.1)*y(o3,p11) + (0.1)*y(o3,p12) + (0.1)*y(o3,p13) + (0.1)*y(o3,p14) + (0.1)*y(o3,p15) + (0.1)*y(o3,p16) + (0.1)*y(o7,p1) + (0.1)*y(o7,p2) + (0.1)*y(o7,p3) + (0.1)*y(o7,p4) + (0.1)*y(o7,p5) + (0.1)*y(o7,p6) + (0.1)*y(o7,p7)
     
      + (0.1)*y(o7,p8) + (0.1)*y(o7,p9) + (0.1)*y(o7,p10) + (0.1)*y(o7,p11) + (0.1)*y(o7,p12) + (0.1)*y(o7,p13) + (0.1)*y(o7,p14) + (0.1)*y(o7,p15) + (0.1)*y(o7,p16) =G= 0 ; (LHS = 0.48)
     
REMAINING 8 ENTRIES SKIPPED

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 70
The Pooling Problem (POOL,SEQ=254)
Equation Listing    SOLVE poolprob Using NLP From line 947


---- cupper  =L=  upper bound component availability

cupper(c1)..  (1.6)*q(c1,o1) + (1.6)*q(c1,o7) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) + (0.1)*y(o1,p5) + (0.1)*y(o1,p6) + (0.1)*y(o1,p7) + (0.1)*y(o1,p8) + (0.1)*y(o1,p9) + (0.1)*y(o1,p10) + (0.1)*y(o1,p11) + (0.1)*y(o1,p12)
     
      + (0.1)*y(o1,p13) + (0.1)*y(o1,p14) + (0.1)*y(o1,p15) + (0.1)*y(o1,p16) + (0.1)*y(o7,p1) + (0.1)*y(o7,p2) + (0.1)*y(o7,p3) + (0.1)*y(o7,p4) + (0.1)*y(o7,p5) + (0.1)*y(o7,p6) + (0.1)*y(o7,p7) + (0.1)*y(o7,p8) + (0.1)*y(o7,p9) + (0.1)*y(o7,p10)
     
      + (0.1)*y(o7,p11) + (0.1)*y(o7,p12) + (0.1)*y(o7,p13) + (0.1)*y(o7,p14) + (0.1)*y(o7,p15) + (0.1)*y(o7,p16) =L= 16 ; (LHS = 0.32)
     
cupper(c2)..  (1.6)*q(c2,o1) + (1.6)*q(c2,o3) + (1.6)*q(c2,o7) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) + (0.1)*y(o1,p5) + (0.1)*y(o1,p6) + (0.1)*y(o1,p7) + (0.1)*y(o1,p8) + (0.1)*y(o1,p9) + (0.1)*y(o1,p10) + (0.1)*y(o1,p11)
     
      + (0.1)*y(o1,p12) + (0.1)*y(o1,p13) + (0.1)*y(o1,p14) + (0.1)*y(o1,p15) + (0.1)*y(o1,p16) + (0.1)*y(o3,p1) + (0.1)*y(o3,p2) + (0.1)*y(o3,p3) + (0.1)*y(o3,p4) + (0.1)*y(o3,p5) + (0.1)*y(o3,p6) + (0.1)*y(o3,p7) + (0.1)*y(o3,p8) + (0.1)*y(o3,p9)
     
      + (0.1)*y(o3,p10) + (0.1)*y(o3,p11) + (0.1)*y(o3,p12) + (0.1)*y(o3,p13) + (0.1)*y(o3,p14) + (0.1)*y(o3,p15) + (0.1)*y(o3,p16) + (0.1)*y(o7,p1) + (0.1)*y(o7,p2) + (0.1)*y(o7,p3) + (0.1)*y(o7,p4) + (0.1)*y(o7,p5) + (0.1)*y(o7,p6) + (0.1)*y(o7,p7)
     
      + (0.1)*y(o7,p8) + (0.1)*y(o7,p9) + (0.1)*y(o7,p10) + (0.1)*y(o7,p11) + (0.1)*y(o7,p12) + (0.1)*y(o7,p13) + (0.1)*y(o7,p14) + (0.1)*y(o7,p15) + (0.1)*y(o7,p16) =L= 16 ; (LHS = 0.48)
     
cupper(c3)..  (1.6)*q(c3,o1) + (1.6)*q(c3,o3) + (1.6)*q(c3,o7) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) + (0.1)*y(o1,p5) + (0.1)*y(o1,p6) + (0.1)*y(o1,p7) + (0.1)*y(o1,p8) + (0.1)*y(o1,p9) + (0.1)*y(o1,p10) + (0.1)*y(o1,p11)
     
      + (0.1)*y(o1,p12) + (0.1)*y(o1,p13) + (0.1)*y(o1,p14) + (0.1)*y(o1,p15) + (0.1)*y(o1,p16) + (0.1)*y(o3,p1) + (0.1)*y(o3,p2) + (0.1)*y(o3,p3) + (0.1)*y(o3,p4) + (0.1)*y(o3,p5) + (0.1)*y(o3,p6) + (0.1)*y(o3,p7) + (0.1)*y(o3,p8) + (0.1)*y(o3,p9)
     
      + (0.1)*y(o3,p10) + (0.1)*y(o3,p11) + (0.1)*y(o3,p12) + (0.1)*y(o3,p13) + (0.1)*y(o3,p14) + (0.1)*y(o3,p15) + (0.1)*y(o3,p16) + (0.1)*y(o7,p1) + (0.1)*y(o7,p2) + (0.1)*y(o7,p3) + (0.1)*y(o7,p4) + (0.1)*y(o7,p5) + (0.1)*y(o7,p6) + (0.1)*y(o7,p7)
     
      + (0.1)*y(o7,p8) + (0.1)*y(o7,p9) + (0.1)*y(o7,p10) + (0.1)*y(o7,p11) + (0.1)*y(o7,p12) + (0.1)*y(o7,p13) + (0.1)*y(o7,p14) + (0.1)*y(o7,p15) + (0.1)*y(o7,p16) =L= 16 ; (LHS = 0.48)
     
REMAINING 8 ENTRIES SKIPPED


---- pszrlt  =L=  ss-rlt on pool size constraints

pszrlt(c1,o1)..  - (14.4)*q(c1,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) + (0.1)*y(o1,p5) + (0.1)*y(o1,p6) + (0.1)*y(o1,p7) + (0.1)*y(o1,p8) + (0.1)*y(o1,p9) + (0.1)*y(o1,p10) + (0.1)*y(o1,p11) + (0.1)*y(o1,p12)
     
      + (0.1)*y(o1,p13) + (0.1)*y(o1,p14) + (0.1)*y(o1,p15) + (0.1)*y(o1,p16) =L= 0 ; (LHS = -1.44)
     
pszrlt(c1,o7)..  - (14.4)*q(c1,o7) + (0.1)*y(o7,p1) + (0.1)*y(o7,p2) + (0.1)*y(o7,p3) + (0.1)*y(o7,p4) + (0.1)*y(o7,p5) + (0.1)*y(o7,p6) + (0.1)*y(o7,p7) + (0.1)*y(o7,p8) + (0.1)*y(o7,p9) + (0.1)*y(o7,p10) + (0.1)*y(o7,p11) + (0.1)*y(o7,p12)
     
      + (0.1)*y(o7,p13) + (0.1)*y(o7,p14) + (0.1)*y(o7,p15) + (0.1)*y(o7,p16) =L= 0 ; (LHS = -1.44)
     
pszrlt(c2,o1)..  - (14.4)*q(c2,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) + (0.1)*y(o1,p5) + (0.1)*y(o1,p6) + (0.1)*y(o1,p7) + (0.1)*y(o1,p8) + (0.1)*y(o1,p9) + (0.1)*y(o1,p10) + (0.1)*y(o1,p11) + (0.1)*y(o1,p12)
     
      + (0.1)*y(o1,p13) + (0.1)*y(o1,p14) + (0.1)*y(o1,p15) + (0.1)*y(o1,p16) =L= 0 ; (LHS = -1.44)
     
REMAINING 29 ENTRIES SKIPPED


---- plower  =G=  minimum product production

plower(p1)..  y(o1,p1) + y(o2,p1) + y(o3,p1) + y(o4,p1) + y(o5,p1) + y(o6,p1) + y(o7,p1) + y(o8,p1) =G= 0 ; (LHS = 0.8)
     
plower(p2)..  y(o1,p2) + y(o2,p2) + y(o3,p2) + y(o4,p2) + y(o5,p2) + y(o6,p2) + y(o7,p2) + y(o8,p2) =G= 0 ; (LHS = 0.8)
     
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 71
The Pooling Problem (POOL,SEQ=254)
Equation Listing    SOLVE poolprob Using NLP From line 947


     plower  =G=  minimum product production

plower(p3)..  y(o1,p3) + y(o2,p3) + y(o3,p3) + y(o4,p3) + y(o5,p3) + y(o6,p3) + y(o7,p3) + y(o8,p3) =G= 0 ; (LHS = 0.8)
     
REMAINING 13 ENTRIES SKIPPED


---- pupper  =L=  maximum product demand

pupper(p1)..  y(o1,p1) + y(o2,p1) + y(o3,p1) + y(o4,p1) + y(o5,p1) + y(o6,p1) + y(o7,p1) + y(o8,p1) =L= 1 ; (LHS = 0.8)
     
pupper(p2)..  y(o1,p2) + y(o2,p2) + y(o3,p2) + y(o4,p2) + y(o5,p2) + y(o6,p2) + y(o7,p2) + y(o8,p2) =L= 1 ; (LHS = 0.8)
     
pupper(p3)..  y(o1,p3) + y(o2,p3) + y(o3,p3) + y(o4,p3) + y(o5,p3) + y(o6,p3) + y(o7,p3) + y(o8,p3) =L= 1 ; (LHS = 0.8)
     
REMAINING 13 ENTRIES SKIPPED


---- pqlower  =G=  minimum product quality requirement

pqlower(p1,q1)..  (0.1)*q(c1,o1) + (0.1)*q(c1,o7) + (0.11)*q(c2,o1) + (0.11)*q(c2,o3) + (0.11)*q(c2,o7) + (0.12)*q(c3,o1) + (0.12)*q(c3,o3) + (0.12)*q(c3,o7) + (0.13)*q(c4,o1) + (0.13)*q(c4,o3) + (0.13)*q(c4,o5) + (0.13)*q(c4,o7) + (0.14)*q(c5,o3)
     
      + (0.14)*q(c5,o5) + (0.14)*q(c5,o8) + (0.15)*q(c6,o5) + (0.15)*q(c6,o8) + (0.16)*q(c7,o4) + (0.16)*q(c7,o5) + (0.16)*q(c7,o8) + (0.17)*q(c8,o2) + (0.17)*q(c8,o4) + (0.17)*q(c8,o6) + (0.17)*q(c8,o8) + (0.18)*q(c9,o2) + (0.18)*q(c9,o4)
     
      + (0.18)*q(c9,o6) + (0.19)*q(c10,o2) + (0.19)*q(c10,o4) + (0.19)*q(c10,o6) + (0.2)*q(c11,o2) + (0.2)*q(c11,o6) + (0.46)*y(o1,p1) + (0.74)*y(o2,p1) + (0.5)*y(o3,p1) + (0.7)*y(o4,p1) + (0.58)*y(o5,p1) + (0.74)*y(o6,p1) + (0.46)*y(o7,p1)
     
      + (0.62)*y(o8,p1) =G= 0 ; (LHS = 0.48)
     
pqlower(p2,q1)..  (0.1)*q(c1,o1) + (0.1)*q(c1,o7) + (0.11)*q(c2,o1) + (0.11)*q(c2,o3) + (0.11)*q(c2,o7) + (0.12)*q(c3,o1) + (0.12)*q(c3,o3) + (0.12)*q(c3,o7) + (0.13)*q(c4,o1) + (0.13)*q(c4,o3) + (0.13)*q(c4,o5) + (0.13)*q(c4,o7) + (0.14)*q(c5,o3)
     
      + (0.14)*q(c5,o5) + (0.14)*q(c5,o8) + (0.15)*q(c6,o5) + (0.15)*q(c6,o8) + (0.16)*q(c7,o4) + (0.16)*q(c7,o5) + (0.16)*q(c7,o8) + (0.17)*q(c8,o2) + (0.17)*q(c8,o4) + (0.17)*q(c8,o6) + (0.17)*q(c8,o8) + (0.18)*q(c9,o2) + (0.18)*q(c9,o4)
     
      + (0.18)*q(c9,o6) + (0.19)*q(c10,o2) + (0.19)*q(c10,o4) + (0.19)*q(c10,o6) + (0.2)*q(c11,o2) + (0.2)*q(c11,o6) + (0.46)*y(o1,p2) + (0.74)*y(o2,p2) + (0.5)*y(o3,p2) + (0.7)*y(o4,p2) + (0.58)*y(o5,p2) + (0.74)*y(o6,p2) + (0.46)*y(o7,p2)
     
      + (0.62)*y(o8,p2) =G= 0 ; (LHS = 0.48)
     
pqlower(p3,q1)..  (0.1)*q(c1,o1) + (0.1)*q(c1,o7) + (0.11)*q(c2,o1) + (0.11)*q(c2,o3) + (0.11)*q(c2,o7) + (0.12)*q(c3,o1) + (0.12)*q(c3,o3) + (0.12)*q(c3,o7) + (0.13)*q(c4,o1) + (0.13)*q(c4,o3) + (0.13)*q(c4,o5) + (0.13)*q(c4,o7) + (0.14)*q(c5,o3)
     
      + (0.14)*q(c5,o5) + (0.14)*q(c5,o8) + (0.15)*q(c6,o5) + (0.15)*q(c6,o8) + (0.16)*q(c7,o4) + (0.16)*q(c7,o5) + (0.16)*q(c7,o8) + (0.17)*q(c8,o2) + (0.17)*q(c8,o4) + (0.17)*q(c8,o6) + (0.17)*q(c8,o8) + (0.18)*q(c9,o2) + (0.18)*q(c9,o4)
     
      + (0.18)*q(c9,o6) + (0.19)*q(c10,o2) + (0.19)*q(c10,o4) + (0.19)*q(c10,o6) + (0.2)*q(c11,o2) + (0.2)*q(c11,o6) + (0.46)*y(o1,p3) + (0.74)*y(o2,p3) + (0.5)*y(o3,p3) + (0.7)*y(o4,p3) + (0.58)*y(o5,p3) + (0.74)*y(o6,p3) + (0.46)*y(o7,p3)
     
      + (0.62)*y(o8,p3) =G= 0 ; (LHS = 0.48)
     
REMAINING 13 ENTRIES SKIPPED


---- pqupper  =L=  maximum product quality

pqupper(p1,q1)..  (0.1)*q(c1,o1) + (0.1)*q(c1,o7) + (0.11)*q(c2,o1) + (0.11)*q(c2,o3) + (0.11)*q(c2,o7) + (0.12)*q(c3,o1) + (0.12)*q(c3,o3) + (0.12)*q(c3,o7) + (0.13)*q(c4,o1) + (0.13)*q(c4,o3) + (0.13)*q(c4,o5) + (0.13)*q(c4,o7) + (0.14)*q(c5,o3)
     
      + (0.14)*q(c5,o5) + (0.14)*q(c5,o8) + (0.15)*q(c6,o5) + (0.15)*q(c6,o8) + (0.16)*q(c7,o4) + (0.16)*q(c7,o5) + (0.16)*q(c7,o8) + (0.17)*q(c8,o2) + (0.17)*q(c8,o4) + (0.17)*q(c8,o6) + (0.17)*q(c8,o8) + (0.18)*q(c9,o2) + (0.18)*q(c9,o4)
     
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 72
The Pooling Problem (POOL,SEQ=254)
Equation Listing    SOLVE poolprob Using NLP From line 947


     pqupper  =L=  maximum product quality     
     
      + (0.18)*q(c9,o6) + (0.19)*q(c10,o2) + (0.19)*q(c10,o4) + (0.19)*q(c10,o6) + (0.2)*q(c11,o2) + (0.2)*q(c11,o6) - (0.59)*y(o1,p1) - (0.31)*y(o2,p1) - (0.55)*y(o3,p1) - (0.35)*y(o4,p1) - (0.47)*y(o5,p1) - (0.31)*y(o6,p1) - (0.59)*y(o7,p1)
     
      - (0.43)*y(o8,p1) =L= 0 ; (LHS = -0.36)
     
pqupper(p2,q1)..  (0.1)*q(c1,o1) + (0.1)*q(c1,o7) + (0.11)*q(c2,o1) + (0.11)*q(c2,o3) + (0.11)*q(c2,o7) + (0.12)*q(c3,o1) + (0.12)*q(c3,o3) + (0.12)*q(c3,o7) + (0.13)*q(c4,o1) + (0.13)*q(c4,o3) + (0.13)*q(c4,o5) + (0.13)*q(c4,o7) + (0.14)*q(c5,o3)
     
      + (0.14)*q(c5,o5) + (0.14)*q(c5,o8) + (0.15)*q(c6,o5) + (0.15)*q(c6,o8) + (0.16)*q(c7,o4) + (0.16)*q(c7,o5) + (0.16)*q(c7,o8) + (0.17)*q(c8,o2) + (0.17)*q(c8,o4) + (0.17)*q(c8,o6) + (0.17)*q(c8,o8) + (0.18)*q(c9,o2) + (0.18)*q(c9,o4)
     
      + (0.18)*q(c9,o6) + (0.19)*q(c10,o2) + (0.19)*q(c10,o4) + (0.19)*q(c10,o6) + (0.2)*q(c11,o2) + (0.2)*q(c11,o6) - (0.64)*y(o1,p2) - (0.36)*y(o2,p2) - (0.6)*y(o3,p2) - (0.4)*y(o4,p2) - (0.52)*y(o5,p2) - (0.36)*y(o6,p2) - (0.64)*y(o7,p2)
     
      - (0.48)*y(o8,p2) =L= 0 ; (LHS = -0.4)
     
pqupper(p3,q1)..  (0.1)*q(c1,o1) + (0.1)*q(c1,o7) + (0.11)*q(c2,o1) + (0.11)*q(c2,o3) + (0.11)*q(c2,o7) + (0.12)*q(c3,o1) + (0.12)*q(c3,o3) + (0.12)*q(c3,o7) + (0.13)*q(c4,o1) + (0.13)*q(c4,o3) + (0.13)*q(c4,o5) + (0.13)*q(c4,o7) + (0.14)*q(c5,o3)
     
      + (0.14)*q(c5,o5) + (0.14)*q(c5,o8) + (0.15)*q(c6,o5) + (0.15)*q(c6,o8) + (0.16)*q(c7,o4) + (0.16)*q(c7,o5) + (0.16)*q(c7,o8) + (0.17)*q(c8,o2) + (0.17)*q(c8,o4) + (0.17)*q(c8,o6) + (0.17)*q(c8,o8) + (0.18)*q(c9,o2) + (0.18)*q(c9,o4)
     
      + (0.18)*q(c9,o6) + (0.19)*q(c10,o2) + (0.19)*q(c10,o4) + (0.19)*q(c10,o6) + (0.2)*q(c11,o2) + (0.2)*q(c11,o6) - (0.69)*y(o1,p3) - (0.41)*y(o2,p3) - (0.65)*y(o3,p3) - (0.45)*y(o4,p3) - (0.57)*y(o5,p3) - (0.41)*y(o6,p3) - (0.69)*y(o7,p3)
     
      - (0.53)*y(o8,p3) =L= 0 ; (LHS = -0.44)
     
REMAINING 13 ENTRIES SKIPPED


---- fraction  =E=  fractions sum to one

fraction(o1)..  q(c1,o1) + q(c2,o1) + q(c3,o1) + q(c4,o1) =E= 1 ; (LHS = 0.4, INFES = 0.6 ****)
     
fraction(o2)..  q(c8,o2) + q(c9,o2) + q(c10,o2) + q(c11,o2) =E= 1 ; (LHS = 0.4, INFES = 0.6 ****)
     
fraction(o3)..  q(c2,o3) + q(c3,o3) + q(c4,o3) + q(c5,o3) =E= 1 ; (LHS = 0.4, INFES = 0.6 ****)
     
REMAINING 5 ENTRIES SKIPPED


---- extensions  =E=  convexification constraints

extensions(o1,p1)..  (0.1)*q(c1,o1) + (0.1)*q(c2,o1) + (0.1)*q(c3,o1) + (0.1)*q(c4,o1) - (0.6)*y(o1,p1) =E= 0 ; (LHS = -0.06, INFES = 0.06 ****)
     
extensions(o1,p2)..  (0.1)*q(c1,o1) + (0.1)*q(c2,o1) + (0.1)*q(c3,o1) + (0.1)*q(c4,o1) - (0.6)*y(o1,p2) =E= 0 ; (LHS = -0.06, INFES = 0.06 ****)
     
extensions(o1,p3)..  (0.1)*q(c1,o1) + (0.1)*q(c2,o1) + (0.1)*q(c3,o1) + (0.1)*q(c4,o1) - (0.6)*y(o1,p3) =E= 0 ; (LHS = -0.06, INFES = 0.06 ****)
     
REMAINING 125 ENTRIES SKIPPED

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 73
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


---- q  pool quality from pooling raw materials

q(c1,o1)
                (.LO, .L, .UP, .M = 0, 0.1, 1, 0)
     (-32)      obj
       (1.6)    clower(c1)
       (1.6)    cupper(c1)
     (-14.4)    pszrlt(c1,o1)
       (0.1)    pqlower(p1,q1)
       (0.1)    pqlower(p2,q1)
       (0.1)    pqlower(p3,q1)
       (0.1)    pqlower(p4,q1)
       (0.1)    pqlower(p5,q1)
       (0.1)    pqlower(p6,q1)
       (0.1)    pqlower(p7,q1)
       (0.1)    pqlower(p8,q1)
       (0.1)    pqlower(p9,q1)
       (0.1)    pqlower(p10,q1)
       (0.1)    pqlower(p11,q1)
       (0.1)    pqlower(p12,q1)
       (0.1)    pqlower(p13,q1)
       (0.1)    pqlower(p14,q1)
       (0.1)    pqlower(p15,q1)
       (0.1)    pqlower(p16,q1)
       (0.1)    pqupper(p1,q1)
       (0.1)    pqupper(p2,q1)
       (0.1)    pqupper(p3,q1)
       (0.1)    pqupper(p4,q1)
       (0.1)    pqupper(p5,q1)
       (0.1)    pqupper(p6,q1)
       (0.1)    pqupper(p7,q1)
       (0.1)    pqupper(p8,q1)
       (0.1)    pqupper(p9,q1)
       (0.1)    pqupper(p10,q1)
       (0.1)    pqupper(p11,q1)
       (0.1)    pqupper(p12,q1)
       (0.1)    pqupper(p13,q1)
       (0.1)    pqupper(p14,q1)
       (0.1)    pqupper(p15,q1)
       (0.1)    pqupper(p16,q1)
        1       fraction(o1)
       (0.1)    extensions(o1,p1)
       (0.1)    extensions(o1,p2)
       (0.1)    extensions(o1,p3)
       (0.1)    extensions(o1,p4)
       (0.1)    extensions(o1,p5)
       (0.1)    extensions(o1,p6)
       (0.1)    extensions(o1,p7)
       (0.1)    extensions(o1,p8)
       (0.1)    extensions(o1,p9)
       (0.1)    extensions(o1,p10)
       (0.1)    extensions(o1,p11)
       (0.1)    extensions(o1,p12)
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 74
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


     q  pool quality from pooling raw materials

       (0.1)    extensions(o1,p13)
       (0.1)    extensions(o1,p14)
       (0.1)    extensions(o1,p15)
       (0.1)    extensions(o1,p16)

q(c1,o7)
                (.LO, .L, .UP, .M = 0, 0.1, 1, 0)
     (-32)      obj
       (1.6)    clower(c1)
       (1.6)    cupper(c1)
     (-14.4)    pszrlt(c1,o7)
       (0.1)    pqlower(p1,q1)
       (0.1)    pqlower(p2,q1)
       (0.1)    pqlower(p3,q1)
       (0.1)    pqlower(p4,q1)
       (0.1)    pqlower(p5,q1)
       (0.1)    pqlower(p6,q1)
       (0.1)    pqlower(p7,q1)
       (0.1)    pqlower(p8,q1)
       (0.1)    pqlower(p9,q1)
       (0.1)    pqlower(p10,q1)
       (0.1)    pqlower(p11,q1)
       (0.1)    pqlower(p12,q1)
       (0.1)    pqlower(p13,q1)
       (0.1)    pqlower(p14,q1)
       (0.1)    pqlower(p15,q1)
       (0.1)    pqlower(p16,q1)
       (0.1)    pqupper(p1,q1)
       (0.1)    pqupper(p2,q1)
       (0.1)    pqupper(p3,q1)
       (0.1)    pqupper(p4,q1)
       (0.1)    pqupper(p5,q1)
       (0.1)    pqupper(p6,q1)
       (0.1)    pqupper(p7,q1)
       (0.1)    pqupper(p8,q1)
       (0.1)    pqupper(p9,q1)
       (0.1)    pqupper(p10,q1)
       (0.1)    pqupper(p11,q1)
       (0.1)    pqupper(p12,q1)
       (0.1)    pqupper(p13,q1)
       (0.1)    pqupper(p14,q1)
       (0.1)    pqupper(p15,q1)
       (0.1)    pqupper(p16,q1)
        1       fraction(o7)
       (0.1)    extensions(o7,p1)
       (0.1)    extensions(o7,p2)
       (0.1)    extensions(o7,p3)
       (0.1)    extensions(o7,p4)
       (0.1)    extensions(o7,p5)
       (0.1)    extensions(o7,p6)
       (0.1)    extensions(o7,p7)
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 75
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


     q  pool quality from pooling raw materials

       (0.1)    extensions(o7,p8)
       (0.1)    extensions(o7,p9)
       (0.1)    extensions(o7,p10)
       (0.1)    extensions(o7,p11)
       (0.1)    extensions(o7,p12)
       (0.1)    extensions(o7,p13)
       (0.1)    extensions(o7,p14)
       (0.1)    extensions(o7,p15)
       (0.1)    extensions(o7,p16)

q(c2,o1)
                (.LO, .L, .UP, .M = 0, 0.1, 1, 0)
     (-30.4)    obj
       (1.6)    clower(c2)
       (1.6)    cupper(c2)
     (-14.4)    pszrlt(c2,o1)
       (0.11)   pqlower(p1,q1)
       (0.11)   pqlower(p2,q1)
       (0.11)   pqlower(p3,q1)
       (0.11)   pqlower(p4,q1)
       (0.11)   pqlower(p5,q1)
       (0.11)   pqlower(p6,q1)
       (0.11)   pqlower(p7,q1)
       (0.11)   pqlower(p8,q1)
       (0.11)   pqlower(p9,q1)
       (0.11)   pqlower(p10,q1)
       (0.11)   pqlower(p11,q1)
       (0.11)   pqlower(p12,q1)
       (0.11)   pqlower(p13,q1)
       (0.11)   pqlower(p14,q1)
       (0.11)   pqlower(p15,q1)
       (0.11)   pqlower(p16,q1)
       (0.11)   pqupper(p1,q1)
       (0.11)   pqupper(p2,q1)
       (0.11)   pqupper(p3,q1)
       (0.11)   pqupper(p4,q1)
       (0.11)   pqupper(p5,q1)
       (0.11)   pqupper(p6,q1)
       (0.11)   pqupper(p7,q1)
       (0.11)   pqupper(p8,q1)
       (0.11)   pqupper(p9,q1)
       (0.11)   pqupper(p10,q1)
       (0.11)   pqupper(p11,q1)
       (0.11)   pqupper(p12,q1)
       (0.11)   pqupper(p13,q1)
       (0.11)   pqupper(p14,q1)
       (0.11)   pqupper(p15,q1)
       (0.11)   pqupper(p16,q1)
        1       fraction(o1)
       (0.1)    extensions(o1,p1)
       (0.1)    extensions(o1,p2)
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 76
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


     q  pool quality from pooling raw materials

       (0.1)    extensions(o1,p3)
       (0.1)    extensions(o1,p4)
       (0.1)    extensions(o1,p5)
       (0.1)    extensions(o1,p6)
       (0.1)    extensions(o1,p7)
       (0.1)    extensions(o1,p8)
       (0.1)    extensions(o1,p9)
       (0.1)    extensions(o1,p10)
       (0.1)    extensions(o1,p11)
       (0.1)    extensions(o1,p12)
       (0.1)    extensions(o1,p13)
       (0.1)    extensions(o1,p14)
       (0.1)    extensions(o1,p15)
       (0.1)    extensions(o1,p16)

REMAINING 29 ENTRIES SKIPPED

---- y  flow from pool to product

y(o1,p1)
                (.LO, .L, .UP, .M = 0, 0.1, 16, 0)
      (12.6)    obj
       (0.1)    clower(c1)
       (0.1)    clower(c2)
       (0.1)    clower(c3)
       (0.1)    clower(c4)
       (0.1)    cupper(c1)
       (0.1)    cupper(c2)
       (0.1)    cupper(c3)
       (0.1)    cupper(c4)
       (0.1)    pszrlt(c1,o1)
       (0.1)    pszrlt(c2,o1)
       (0.1)    pszrlt(c3,o1)
       (0.1)    pszrlt(c4,o1)
        1       plower(p1)
        1       pupper(p1)
       (0.46)   pqlower(p1,q1)
      (-0.59)   pqupper(p1,q1)
      (-0.6)    extensions(o1,p1)

y(o1,p2)
                (.LO, .L, .UP, .M = 0, 0.1, 16, 0)
      (12.1)    obj
       (0.1)    clower(c1)
       (0.1)    clower(c2)
       (0.1)    clower(c3)
       (0.1)    clower(c4)
       (0.1)    cupper(c1)
       (0.1)    cupper(c2)
       (0.1)    cupper(c3)
       (0.1)    cupper(c4)
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 77
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


     y  flow from pool to product

       (0.1)    pszrlt(c1,o1)
       (0.1)    pszrlt(c2,o1)
       (0.1)    pszrlt(c3,o1)
       (0.1)    pszrlt(c4,o1)
        1       plower(p2)
        1       pupper(p2)
       (0.46)   pqlower(p2,q1)
      (-0.64)   pqupper(p2,q1)
      (-0.6)    extensions(o1,p2)

y(o1,p3)
                (.LO, .L, .UP, .M = 0, 0.1, 16, 0)
      (11.6)    obj
       (0.1)    clower(c1)
       (0.1)    clower(c2)
       (0.1)    clower(c3)
       (0.1)    clower(c4)
       (0.1)    cupper(c1)
       (0.1)    cupper(c2)
       (0.1)    cupper(c3)
       (0.1)    cupper(c4)
       (0.1)    pszrlt(c1,o1)
       (0.1)    pszrlt(c2,o1)
       (0.1)    pszrlt(c3,o1)
       (0.1)    pszrlt(c4,o1)
        1       plower(p3)
        1       pupper(p3)
       (0.46)   pqlower(p3,q1)
      (-0.69)   pqupper(p3,q1)
      (-0.6)    extensions(o1,p3)

REMAINING 125 ENTRIES SKIPPED

---- cost  total cost

cost
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       obj

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 78
The Pooling Problem (POOL,SEQ=254)
Model Statistics    SOLVE poolprob Using NLP From line 947


LOOPS                                 case   foulds5


MODEL STATISTICS

BLOCKS OF EQUATIONS          10     SINGLE EQUATIONS          255
BLOCKS OF VARIABLES           3     SINGLE VARIABLES          161
NON ZERO ELEMENTS         4,001     NON LINEAR N-Z          3,712
DERIVATIVE POOL              20     CONSTANT POOL              67
CODE LENGTH              13,145


GENERATION TIME      =        0.009 SECONDS      3 MB  24.7.4 r58773 LEX-LEG


EXECUTION TIME       =        0.010 SECONDS      3 MB  24.7.4 r58773 LEX-LEG
               L O O P S               case foulds5

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 79
The Pooling Problem (POOL,SEQ=254)
Solution Report     SOLVE poolprob Using NLP From line 947


               S O L V E      S U M M A R Y

     MODEL   poolprob            OBJECTIVE  cost
     TYPE    NLP                 DIRECTION  MINIMIZE
     SOLVER  CONVERT             FROM LINE  947

**** SOLVER STATUS     1 Normal Completion         
**** MODEL STATUS      14 No Solution Returned     
**** OBJECTIVE VALUE                0.0000

 RESOURCE USAGE, LIMIT          0.000      1000.000
 ITERATION COUNT, LIMIT         0    2000000000
 EVALUATION ERRORS              0             0

Convert 2.0      24.7.4 r58773 Released Sep 19, 2016 LEG x86 64bit/Linux      

--- Using Option File
Reading parameter(s) from "/home/renigijus/gams/opt-mod-lib/gamslib/pool/convert.opt"
>>  ampl pool-scalar.mod
Finished reading from "/home/renigijus/gams/opt-mod-lib/gamslib/pool/convert.opt"
Ampl      : pool-scalar.mod


No solution returned
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 80
The Pooling Problem (POOL,SEQ=254)
Equation Listing    SOLVE poolprob Using NLP From line 947


---- obj  =E=  objective function

obj..  - (1.2)*q(c1,o1) - (3)*q(c2,o1) - (3.2)*q(c3,o1) + (5.3)*y(o1,p1) + (11.3)*y(o1,p2) - z(c4,p1) + 5*z(c4,p2) + cost =E= 0 ; (LHS = 2.06, INFES = 2.06 ****)
     

---- clower  =G=  lower bound component availability

clower(c1)..  (0.2)*q(c1,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) =G= 0 ; (LHS = 0.02)
     
clower(c2)..  (0.2)*q(c2,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) =G= 0 ; (LHS = 0.02)
     
clower(c3)..  (0.2)*q(c3,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) =G= 0 ; (LHS = 0.02)
     
REMAINING ENTRY SKIPPED


---- cupper  =L=  upper bound component availability

cupper(c1)..  (0.2)*q(c1,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) =L= 300 ; (LHS = 0.0199999999999818)
     
cupper(c2)..  (0.2)*q(c2,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) =L= 50 ; (LHS = 0.0200000000000031)
     
cupper(c3)..  (0.2)*q(c3,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) =L= 300 ; (LHS = 0.0199999999999818)
     
REMAINING ENTRY SKIPPED


---- pszrlt  =L=  ss-rlt on pool size constraints

pszrlt(c1,o1)..  - (299.8)*q(c1,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) =L= 0 ; (LHS = -29.98)
     
pszrlt(c2,o1)..  - (299.8)*q(c2,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) =L= 0 ; (LHS = -29.98)
     
pszrlt(c3,o1)..  - (299.8)*q(c3,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) =L= 0 ; (LHS = -29.98)
     

---- plower  =G=  minimum product production

plower(p1)..  y(o1,p1) + z(c4,p1) =G= 0 ; (LHS = 0.2)
     
plower(p2)..  y(o1,p2) + z(c4,p2) =G= 0 ; (LHS = 0.2)
     

---- pupper  =L=  maximum product demand

pupper(p1)..  y(o1,p1) + z(c4,p1) =L= 100 ; (LHS = 0.200000000000003)
     
pupper(p2)..  y(o1,p2) + z(c4,p2) =L= 200 ; (LHS = 0.199999999999989)
     
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 81
The Pooling Problem (POOL,SEQ=254)
Equation Listing    SOLVE poolprob Using NLP From line 947


---- pqlower  =G=  minimum product quality requirement

pqlower(p1,q1)..  (0.3)*q(c1,o1) + (0.1)*q(c2,o1) + (0.1)*q(c3,o1) + (0.5)*y(o1,p1) + 2*z(c4,p1) =G= 0 ; (LHS = 0.25)
     
pqlower(p2,q1)..  (0.3)*q(c1,o1) + (0.1)*q(c2,o1) + (0.1)*q(c3,o1) + (0.5)*y(o1,p2) + 2*z(c4,p2) =G= 0 ; (LHS = 0.25)
     

---- pqupper  =L=  maximum product quality

pqupper(p1,q1)..  (0.3)*q(c1,o1) + (0.1)*q(c2,o1) + (0.1)*q(c3,o1) - (2)*y(o1,p1) - 0.5*z(c4,p1) =L= 0 ; (LHS = -0.25)
     
pqupper(p2,q1)..  (0.3)*q(c1,o1) + (0.1)*q(c2,o1) + (0.1)*q(c3,o1) - (1)*y(o1,p2) + 0.5*z(c4,p2) =L= 0 ; (LHS = -0.05)
     

---- fraction  =E=  fractions sum to one

fraction(o1)..  q(c1,o1) + q(c2,o1) + q(c3,o1) =E= 1 ; (LHS = 0.3, INFES = 0.7 ****)
     

---- extensions  =E=  convexification constraints

extensions(o1,p1)..  (0.1)*q(c1,o1) + (0.1)*q(c2,o1) + (0.1)*q(c3,o1) - (0.7)*y(o1,p1) =E= 0 ; (LHS = -0.07, INFES = 0.07 ****)
     
extensions(o1,p2)..  (0.1)*q(c1,o1) + (0.1)*q(c2,o1) + (0.1)*q(c3,o1) - (0.7)*y(o1,p2) =E= 0 ; (LHS = -0.07, INFES = 0.07 ****)
     
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 82
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


---- q  pool quality from pooling raw materials

q(c1,o1)
                (.LO, .L, .UP, .M = 0, 0.1, 1, 0)
      (-1.2)    obj
       (0.2)    clower(c1)
       (0.2)    cupper(c1)
    (-299.8)    pszrlt(c1,o1)
       (0.3)    pqlower(p1,q1)
       (0.3)    pqlower(p2,q1)
       (0.3)    pqupper(p1,q1)
       (0.3)    pqupper(p2,q1)
        1       fraction(o1)
       (0.1)    extensions(o1,p1)
       (0.1)    extensions(o1,p2)

q(c2,o1)
                (.LO, .L, .UP, .M = 0, 0.1, 1, 0)
      (-3)      obj
       (0.2)    clower(c2)
       (0.2)    cupper(c2)
    (-299.8)    pszrlt(c2,o1)
       (0.1)    pqlower(p1,q1)
       (0.1)    pqlower(p2,q1)
       (0.1)    pqupper(p1,q1)
       (0.1)    pqupper(p2,q1)
        1       fraction(o1)
       (0.1)    extensions(o1,p1)
       (0.1)    extensions(o1,p2)

q(c3,o1)
                (.LO, .L, .UP, .M = 0, 0.1, 1, 0)
      (-3.2)    obj
       (0.2)    clower(c3)
       (0.2)    cupper(c3)
    (-299.8)    pszrlt(c3,o1)
       (0.1)    pqlower(p1,q1)
       (0.1)    pqlower(p2,q1)
       (0.1)    pqupper(p1,q1)
       (0.1)    pqupper(p2,q1)
        1       fraction(o1)
       (0.1)    extensions(o1,p1)
       (0.1)    extensions(o1,p2)


---- y  flow from pool to product

y(o1,p1)
                (.LO, .L, .UP, .M = 0, 0.1, 100, 0)
       (5.3)    obj
       (0.1)    clower(c1)
       (0.1)    clower(c2)
       (0.1)    clower(c3)
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 83
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


     y  flow from pool to product

       (0.1)    cupper(c1)
       (0.1)    cupper(c2)
       (0.1)    cupper(c3)
       (0.1)    pszrlt(c1,o1)
       (0.1)    pszrlt(c2,o1)
       (0.1)    pszrlt(c3,o1)
        1       plower(p1)
        1       pupper(p1)
       (0.5)    pqlower(p1,q1)
      (-2)      pqupper(p1,q1)
      (-0.7)    extensions(o1,p1)

y(o1,p2)
                (.LO, .L, .UP, .M = 0, 0.1, 200, 0)
      (11.3)    obj
       (0.1)    clower(c1)
       (0.1)    clower(c2)
       (0.1)    clower(c3)
       (0.1)    cupper(c1)
       (0.1)    cupper(c2)
       (0.1)    cupper(c3)
       (0.1)    pszrlt(c1,o1)
       (0.1)    pszrlt(c2,o1)
       (0.1)    pszrlt(c3,o1)
        1       plower(p2)
        1       pupper(p2)
       (0.5)    pqlower(p2,q1)
      (-1)      pqupper(p2,q1)
      (-0.7)    extensions(o1,p2)


---- z  direct flow of rawmaterials to product

z(c4,p1)
                (.LO, .L, .UP, .M = 0, 0.1, 100, 0)
       -1       obj
        1       clower(c4)
        1       cupper(c4)
        1       plower(p1)
        1       pupper(p1)
        2       pqlower(p1,q1)
       -0.5     pqupper(p1,q1)

z(c4,p2)
                (.LO, .L, .UP, .M = 0, 0.1, 200, 0)
        5       obj
        1       clower(c4)
        1       cupper(c4)
        1       plower(p2)
        1       pupper(p2)
        2       pqlower(p2,q1)
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 84
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


     z  direct flow of rawmaterials to product

        0.5     pqupper(p2,q1)


---- cost  total cost

cost
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       obj

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 85
The Pooling Problem (POOL,SEQ=254)
Model Statistics    SOLVE poolprob Using NLP From line 947


LOOPS                                 case   bental4


MODEL STATISTICS

BLOCKS OF EQUATIONS          10     SINGLE EQUATIONS           23
BLOCKS OF VARIABLES           4     SINGLE VARIABLES            8
NON ZERO ELEMENTS            78     NON LINEAR N-Z             56
DERIVATIVE POOL              20     CONSTANT POOL              24
CODE LENGTH                 170


GENERATION TIME      =        0.002 SECONDS      3 MB  24.7.4 r58773 LEX-LEG


EXECUTION TIME       =        0.003 SECONDS      3 MB  24.7.4 r58773 LEX-LEG
               L O O P S               case bental4

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 86
The Pooling Problem (POOL,SEQ=254)
Solution Report     SOLVE poolprob Using NLP From line 947


               S O L V E      S U M M A R Y

     MODEL   poolprob            OBJECTIVE  cost
     TYPE    NLP                 DIRECTION  MINIMIZE
     SOLVER  CONVERT             FROM LINE  947

**** SOLVER STATUS     1 Normal Completion         
**** MODEL STATUS      14 No Solution Returned     
**** OBJECTIVE VALUE                0.0000

 RESOURCE USAGE, LIMIT          0.000      1000.000
 ITERATION COUNT, LIMIT         0    2000000000
 EVALUATION ERRORS              0             0

Convert 2.0      24.7.4 r58773 Released Sep 19, 2016 LEG x86 64bit/Linux      

--- Using Option File
Reading parameter(s) from "/home/renigijus/gams/opt-mod-lib/gamslib/pool/convert.opt"
>>  ampl pool-scalar.mod
Finished reading from "/home/renigijus/gams/opt-mod-lib/gamslib/pool/convert.opt"
Ampl      : pool-scalar.mod


No solution returned
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 87
The Pooling Problem (POOL,SEQ=254)
Equation Listing    SOLVE poolprob Using NLP From line 947


---- obj  =E=  objective function

obj..  - (3)*q(c1,o1) - (8)*q(c2,o1) - (7.5)*q(c3,o1) - (6)*q(c4,o1) - (3)*q(c5,o2) - (8)*q(c6,o2) - (7.5)*q(c7,o2) - (6)*q(c8,o2) - (3)*q(c9,o3) - (8)*q(c10,o3) - (7.5)*q(c11,o3) - (6)*q(c12,o3) + (13.1)*y(o1,p1) + (10.1)*y(o1,p2) + (14.1)*y(o1,p3)
     
      + (11.1)*y(o1,p4) + (9.1)*y(o1,p5) + (13.1)*y(o2,p1) + (10.1)*y(o2,p2) + (14.1)*y(o2,p3) + (11.1)*y(o2,p4) + (9.1)*y(o2,p5) + (13.1)*y(o3,p1) + (10.1)*y(o3,p2) + (14.1)*y(o3,p3) + (11.1)*y(o3,p4) + (9.1)*y(o3,p5) + 8*z(c13,p1) + 5*z(c13,p2)
     
      + 9*z(c13,p3) + 6*z(c13,p4) + 4*z(c13,p5) + cost =E= 0 ; (LHS = 20.45, INFES = 20.45 ****)
     

---- clower  =G=  lower bound component availability

clower(c1)..  (0.5)*q(c1,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) + (0.1)*y(o1,p5) =G= 0 ; (LHS = 0.05)
     
clower(c2)..  (0.5)*q(c2,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) + (0.1)*y(o1,p5) =G= 0 ; (LHS = 0.05)
     
clower(c3)..  (0.5)*q(c3,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) + (0.1)*y(o1,p5) =G= 0 ; (LHS = 0.05)
     
REMAINING 10 ENTRIES SKIPPED


---- cupper  =L=  upper bound component availability

cupper(c1)..  (0.5)*q(c1,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) + (0.1)*y(o1,p5) =L= 600 ; (LHS = 0.0499999999999545)
     
cupper(c2)..  (0.5)*q(c2,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) + (0.1)*y(o1,p5) =L= 600 ; (LHS = 0.0499999999999545)
     
cupper(c3)..  (0.5)*q(c3,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) + (0.1)*y(o1,p5) =L= 600 ; (LHS = 0.0499999999999545)
     
REMAINING 10 ENTRIES SKIPPED


---- pszrlt  =L=  ss-rlt on pool size constraints

pszrlt(c1,o1)..  - (599.5)*q(c1,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) + (0.1)*y(o1,p5) =L= 0 ; (LHS = -59.95)
     
pszrlt(c2,o1)..  - (599.5)*q(c2,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) + (0.1)*y(o1,p5) =L= 0 ; (LHS = -59.95)
     
pszrlt(c3,o1)..  - (599.5)*q(c3,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) + (0.1)*y(o1,p5) =L= 0 ; (LHS = -59.95)
     
REMAINING 9 ENTRIES SKIPPED


---- plower  =G=  minimum product production

plower(p1)..  y(o1,p1) + y(o2,p1) + y(o3,p1) + z(c13,p1) =G= 0 ; (LHS = 0.4)
     
plower(p2)..  y(o1,p2) + y(o2,p2) + y(o3,p2) + z(c13,p2) =G= 0 ; (LHS = 0.4)
     
plower(p3)..  y(o1,p3) + y(o2,p3) + y(o3,p3) + z(c13,p3) =G= 0 ; (LHS = 0.4)
     
REMAINING 2 ENTRIES SKIPPED

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 88
The Pooling Problem (POOL,SEQ=254)
Equation Listing    SOLVE poolprob Using NLP From line 947


---- pupper  =L=  maximum product demand

pupper(p1)..  y(o1,p1) + y(o2,p1) + y(o3,p1) + z(c13,p1) =L= 100 ; (LHS = 0.400000000000006)
     
pupper(p2)..  y(o1,p2) + y(o2,p2) + y(o3,p2) + z(c13,p2) =L= 200 ; (LHS = 0.400000000000006)
     
pupper(p3)..  y(o1,p3) + y(o2,p3) + y(o3,p3) + z(c13,p3) =L= 100 ; (LHS = 0.400000000000006)
     
REMAINING 2 ENTRIES SKIPPED


---- pqlower  =G=  minimum product quality requirement

pqlower(p1,q1)..  (0.3)*q(c1,o1) + (0.1)*q(c2,o1) + (0.12)*q(c3,o1) + (0.15)*q(c4,o1) + (0.3)*q(c5,o2) + (0.1)*q(c6,o2) + (0.12)*q(c7,o2) + (0.15)*q(c8,o2) + (0.3)*q(c9,o3) + (0.1)*q(c10,o3) + (0.12)*q(c11,o3) + (0.15)*q(c12,o3) + (0.67)*y(o1,p1)
     
      + (0.67)*y(o2,p1) + (0.67)*y(o3,p1) + 2*z(c13,p1) =G= 0 ; (LHS = 0.401)
     
pqlower(p1,q2)..  (0.1)*q(c1,o1) + (0.3)*q(c2,o1) + (0.5)*q(c3,o1) + (0.25)*q(c4,o1) + (0.1)*q(c5,o2) + (0.3)*q(c6,o2) + (0.5)*q(c7,o2) + (0.25)*q(c8,o2) + (0.1)*q(c9,o3) + (0.3)*q(c10,o3) + (0.5)*q(c11,o3) + (0.25)*q(c12,o3) + (1.15)*y(o1,p1)
     
      + (1.15)*y(o2,p1) + (1.15)*y(o3,p1) + 2.5*z(c13,p1) =G= 0 ; (LHS = 0.595)
     
pqlower(p2,q1)..  (0.3)*q(c1,o1) + (0.1)*q(c2,o1) + (0.12)*q(c3,o1) + (0.15)*q(c4,o1) + (0.3)*q(c5,o2) + (0.1)*q(c6,o2) + (0.12)*q(c7,o2) + (0.15)*q(c8,o2) + (0.3)*q(c9,o3) + (0.1)*q(c10,o3) + (0.12)*q(c11,o3) + (0.15)*q(c12,o3) + (0.67)*y(o1,p2)
     
      + (0.67)*y(o2,p2) + (0.67)*y(o3,p2) + 2*z(c13,p2) =G= 0 ; (LHS = 0.401)
     
REMAINING 7 ENTRIES SKIPPED


---- pqupper  =L=  maximum product quality

pqupper(p1,q1)..  (0.3)*q(c1,o1) + (0.1)*q(c2,o1) + (0.12)*q(c3,o1) + (0.15)*q(c4,o1) + (0.3)*q(c5,o2) + (0.1)*q(c6,o2) + (0.12)*q(c7,o2) + (0.15)*q(c8,o2) + (0.3)*q(c9,o3) + (0.1)*q(c10,o3) + (0.12)*q(c11,o3) + (0.15)*q(c12,o3) - (1.83)*y(o1,p1)
     
      - (1.83)*y(o2,p1) - (1.83)*y(o3,p1) - 0.5*z(c13,p1) =L= 0 ; (LHS = -0.599)
     
pqupper(p1,q2)..  (0.1)*q(c1,o1) + (0.3)*q(c2,o1) + (0.5)*q(c3,o1) + (0.25)*q(c4,o1) + (0.1)*q(c5,o2) + (0.3)*q(c6,o2) + (0.5)*q(c7,o2) + (0.25)*q(c8,o2) + (0.1)*q(c9,o3) + (0.3)*q(c10,o3) + (0.5)*q(c11,o3) + (0.25)*q(c12,o3) - (0.85)*y(o1,p1)
     
      - (0.85)*y(o2,p1) - (0.85)*y(o3,p1) + 0.5*z(c13,p1) =L= 0 ; (LHS = -0.205)
     
pqupper(p2,q1)..  (0.3)*q(c1,o1) + (0.1)*q(c2,o1) + (0.12)*q(c3,o1) + (0.15)*q(c4,o1) + (0.3)*q(c5,o2) + (0.1)*q(c6,o2) + (0.12)*q(c7,o2) + (0.15)*q(c8,o2) + (0.3)*q(c9,o3) + (0.1)*q(c10,o3) + (0.12)*q(c11,o3) + (0.15)*q(c12,o3) - (0.83)*y(o1,p2)
     
      - (0.83)*y(o2,p2) - (0.83)*y(o3,p2) + 0.5*z(c13,p2) =L= 0 ; (LHS = -0.199)
     
REMAINING 7 ENTRIES SKIPPED


---- fraction  =E=  fractions sum to one

fraction(o1)..  q(c1,o1) + q(c2,o1) + q(c3,o1) + q(c4,o1) =E= 1 ; (LHS = 0.4, INFES = 0.6 ****)
     
fraction(o2)..  q(c5,o2) + q(c6,o2) + q(c7,o2) + q(c8,o2) =E= 1 ; (LHS = 0.4, INFES = 0.6 ****)
     
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 89
The Pooling Problem (POOL,SEQ=254)
Equation Listing    SOLVE poolprob Using NLP From line 947


     fraction  =E=  fractions sum to one

fraction(o3)..  q(c9,o3) + q(c10,o3) + q(c11,o3) + q(c12,o3) =E= 1 ; (LHS = 0.4, INFES = 0.6 ****)
     

---- extensions  =E=  convexification constraints

extensions(o1,p1)..  (0.1)*q(c1,o1) + (0.1)*q(c2,o1) + (0.1)*q(c3,o1) + (0.1)*q(c4,o1) - (0.6)*y(o1,p1) =E= 0 ; (LHS = -0.06, INFES = 0.06 ****)
     
extensions(o1,p2)..  (0.1)*q(c1,o1) + (0.1)*q(c2,o1) + (0.1)*q(c3,o1) + (0.1)*q(c4,o1) - (0.6)*y(o1,p2) =E= 0 ; (LHS = -0.06, INFES = 0.06 ****)
     
extensions(o1,p3)..  (0.1)*q(c1,o1) + (0.1)*q(c2,o1) + (0.1)*q(c3,o1) + (0.1)*q(c4,o1) - (0.6)*y(o1,p3) =E= 0 ; (LHS = -0.06, INFES = 0.06 ****)
     
REMAINING 12 ENTRIES SKIPPED

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 90
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


---- q  pool quality from pooling raw materials

q(c1,o1)
                (.LO, .L, .UP, .M = 0, 0.1, 1, 0)
      (-3)      obj
       (0.5)    clower(c1)
       (0.5)    cupper(c1)
    (-599.5)    pszrlt(c1,o1)
       (0.3)    pqlower(p1,q1)
       (0.1)    pqlower(p1,q2)
       (0.3)    pqlower(p2,q1)
       (0.1)    pqlower(p2,q2)
       (0.3)    pqlower(p3,q1)
       (0.1)    pqlower(p3,q2)
       (0.3)    pqlower(p4,q1)
       (0.1)    pqlower(p4,q2)
       (0.3)    pqlower(p5,q1)
       (0.1)    pqlower(p5,q2)
       (0.3)    pqupper(p1,q1)
       (0.1)    pqupper(p1,q2)
       (0.3)    pqupper(p2,q1)
       (0.1)    pqupper(p2,q2)
       (0.3)    pqupper(p3,q1)
       (0.1)    pqupper(p3,q2)
       (0.3)    pqupper(p4,q1)
       (0.1)    pqupper(p4,q2)
       (0.3)    pqupper(p5,q1)
       (0.1)    pqupper(p5,q2)
        1       fraction(o1)
       (0.1)    extensions(o1,p1)
       (0.1)    extensions(o1,p2)
       (0.1)    extensions(o1,p3)
       (0.1)    extensions(o1,p4)
       (0.1)    extensions(o1,p5)

q(c2,o1)
                (.LO, .L, .UP, .M = 0, 0.1, 1, 0)
      (-8)      obj
       (0.5)    clower(c2)
       (0.5)    cupper(c2)
    (-599.5)    pszrlt(c2,o1)
       (0.1)    pqlower(p1,q1)
       (0.3)    pqlower(p1,q2)
       (0.1)    pqlower(p2,q1)
       (0.3)    pqlower(p2,q2)
       (0.1)    pqlower(p3,q1)
       (0.3)    pqlower(p3,q2)
       (0.1)    pqlower(p4,q1)
       (0.3)    pqlower(p4,q2)
       (0.1)    pqlower(p5,q1)
       (0.3)    pqlower(p5,q2)
       (0.1)    pqupper(p1,q1)
       (0.3)    pqupper(p1,q2)
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 91
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


     q  pool quality from pooling raw materials

       (0.1)    pqupper(p2,q1)
       (0.3)    pqupper(p2,q2)
       (0.1)    pqupper(p3,q1)
       (0.3)    pqupper(p3,q2)
       (0.1)    pqupper(p4,q1)
       (0.3)    pqupper(p4,q2)
       (0.1)    pqupper(p5,q1)
       (0.3)    pqupper(p5,q2)
        1       fraction(o1)
       (0.1)    extensions(o1,p1)
       (0.1)    extensions(o1,p2)
       (0.1)    extensions(o1,p3)
       (0.1)    extensions(o1,p4)
       (0.1)    extensions(o1,p5)

q(c3,o1)
                (.LO, .L, .UP, .M = 0, 0.1, 1, 0)
      (-7.5)    obj
       (0.5)    clower(c3)
       (0.5)    cupper(c3)
    (-599.5)    pszrlt(c3,o1)
       (0.12)   pqlower(p1,q1)
       (0.5)    pqlower(p1,q2)
       (0.12)   pqlower(p2,q1)
       (0.5)    pqlower(p2,q2)
       (0.12)   pqlower(p3,q1)
       (0.5)    pqlower(p3,q2)
       (0.12)   pqlower(p4,q1)
       (0.5)    pqlower(p4,q2)
       (0.12)   pqlower(p5,q1)
       (0.5)    pqlower(p5,q2)
       (0.12)   pqupper(p1,q1)
       (0.5)    pqupper(p1,q2)
       (0.12)   pqupper(p2,q1)
       (0.5)    pqupper(p2,q2)
       (0.12)   pqupper(p3,q1)
       (0.5)    pqupper(p3,q2)
       (0.12)   pqupper(p4,q1)
       (0.5)    pqupper(p4,q2)
       (0.12)   pqupper(p5,q1)
       (0.5)    pqupper(p5,q2)
        1       fraction(o1)
       (0.1)    extensions(o1,p1)
       (0.1)    extensions(o1,p2)
       (0.1)    extensions(o1,p3)
       (0.1)    extensions(o1,p4)
       (0.1)    extensions(o1,p5)

REMAINING 9 ENTRIES SKIPPED
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 92
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


---- y  flow from pool to product

y(o1,p1)
                (.LO, .L, .UP, .M = 0, 0.1, 100, 0)
      (13.1)    obj
       (0.1)    clower(c1)
       (0.1)    clower(c2)
       (0.1)    clower(c3)
       (0.1)    clower(c4)
       (0.1)    cupper(c1)
       (0.1)    cupper(c2)
       (0.1)    cupper(c3)
       (0.1)    cupper(c4)
       (0.1)    pszrlt(c1,o1)
       (0.1)    pszrlt(c2,o1)
       (0.1)    pszrlt(c3,o1)
       (0.1)    pszrlt(c4,o1)
        1       plower(p1)
        1       pupper(p1)
       (0.67)   pqlower(p1,q1)
       (1.15)   pqlower(p1,q2)
      (-1.83)   pqupper(p1,q1)
      (-0.85)   pqupper(p1,q2)
      (-0.6)    extensions(o1,p1)

y(o1,p2)
                (.LO, .L, .UP, .M = 0, 0.1, 200, 0)
      (10.1)    obj
       (0.1)    clower(c1)
       (0.1)    clower(c2)
       (0.1)    clower(c3)
       (0.1)    clower(c4)
       (0.1)    cupper(c1)
       (0.1)    cupper(c2)
       (0.1)    cupper(c3)
       (0.1)    cupper(c4)
       (0.1)    pszrlt(c1,o1)
       (0.1)    pszrlt(c2,o1)
       (0.1)    pszrlt(c3,o1)
       (0.1)    pszrlt(c4,o1)
        1       plower(p2)
        1       pupper(p2)
       (0.67)   pqlower(p2,q1)
       (1.15)   pqlower(p2,q2)
      (-0.83)   pqupper(p2,q1)
      (-1.35)   pqupper(p2,q2)
      (-0.6)    extensions(o1,p2)

y(o1,p3)
                (.LO, .L, .UP, .M = 0, 0.1, 100, 0)
      (14.1)    obj
       (0.1)    clower(c1)
       (0.1)    clower(c2)
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 93
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


     y  flow from pool to product

       (0.1)    clower(c3)
       (0.1)    clower(c4)
       (0.1)    cupper(c1)
       (0.1)    cupper(c2)
       (0.1)    cupper(c3)
       (0.1)    cupper(c4)
       (0.1)    pszrlt(c1,o1)
       (0.1)    pszrlt(c2,o1)
       (0.1)    pszrlt(c3,o1)
       (0.1)    pszrlt(c4,o1)
        1       plower(p3)
        1       pupper(p3)
       (0.67)   pqlower(p3,q1)
       (1.15)   pqlower(p3,q2)
      (-1.33)   pqupper(p3,q1)
      (-1.45)   pqupper(p3,q2)
      (-0.6)    extensions(o1,p3)

REMAINING 12 ENTRIES SKIPPED

---- z  direct flow of rawmaterials to product

z(c13,p1)
                (.LO, .L, .UP, .M = 0, 0.1, 100, 0)
        8       obj
        1       clower(c13)
        1       cupper(c13)
        1       plower(p1)
        1       pupper(p1)
        2       pqlower(p1,q1)
        2.5     pqlower(p1,q2)
       -0.5     pqupper(p1,q1)
        0.5     pqupper(p1,q2)

z(c13,p2)
                (.LO, .L, .UP, .M = 0, 0.1, 200, 0)
        5       obj
        1       clower(c13)
        1       cupper(c13)
        1       plower(p2)
        1       pupper(p2)
        2       pqlower(p2,q1)
        2.5     pqlower(p2,q2)
        0.5     pqupper(p2,q1)

z(c13,p3)
                (.LO, .L, .UP, .M = 0, 0.1, 100, 0)
        9       obj
        1       clower(c13)
        1       cupper(c13)
        1       plower(p3)
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 94
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


     z  direct flow of rawmaterials to product

        1       pupper(p3)
        2       pqlower(p3,q1)
        2.5     pqlower(p3,q2)
       -0.1     pqupper(p3,q2)

REMAINING 2 ENTRIES SKIPPED

---- cost  total cost

cost
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       obj

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 95
The Pooling Problem (POOL,SEQ=254)
Model Statistics    SOLVE poolprob Using NLP From line 947


LOOPS                                 case   bental5


MODEL STATISTICS

BLOCKS OF EQUATIONS          10     SINGLE EQUATIONS           87
BLOCKS OF VARIABLES           4     SINGLE VARIABLES           33
NON ZERO ELEMENTS           702     NON LINEAR N-Z            618
DERIVATIVE POOL              20     CONSTANT POOL              33
CODE LENGTH               2,063


GENERATION TIME      =        0.003 SECONDS      3 MB  24.7.4 r58773 LEX-LEG


EXECUTION TIME       =        0.003 SECONDS      3 MB  24.7.4 r58773 LEX-LEG
               L O O P S               case bental5

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 96
The Pooling Problem (POOL,SEQ=254)
Solution Report     SOLVE poolprob Using NLP From line 947


               S O L V E      S U M M A R Y

     MODEL   poolprob            OBJECTIVE  cost
     TYPE    NLP                 DIRECTION  MINIMIZE
     SOLVER  CONVERT             FROM LINE  947

**** SOLVER STATUS     1 Normal Completion         
**** MODEL STATUS      14 No Solution Returned     
**** OBJECTIVE VALUE                0.0000

 RESOURCE USAGE, LIMIT          0.000      1000.000
 ITERATION COUNT, LIMIT         0    2000000000
 EVALUATION ERRORS              0             0

Convert 2.0      24.7.4 r58773 Released Sep 19, 2016 LEG x86 64bit/Linux      

--- Using Option File
Reading parameter(s) from "/home/renigijus/gams/opt-mod-lib/gamslib/pool/convert.opt"
>>  ampl pool-scalar.mod
Finished reading from "/home/renigijus/gams/opt-mod-lib/gamslib/pool/convert.opt"
Ampl      : pool-scalar.mod


No solution returned
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 97
The Pooling Problem (POOL,SEQ=254)
Equation Listing    SOLVE poolprob Using NLP From line 947


---- obj  =E=  objective function

obj..  - (14.76)*q(c1,o1) - (14.76)*q(c1,o2) - (18.6)*q(c2,o1) - (18.6)*q(c2,o2) - (90)*q(c3,o1) - (90)*q(c3,o2) + (148.88)*y(o1,p1) + (188.88)*y(o1,p2) + (108.88)*y(o1,p3) + (148.88)*y(o2,p1) + (188.88)*y(o2,p2) + (108.88)*y(o2,p3) + 180.8*z(c1,p2)
     
      + 128*z(c2,p1) + 88*z(c2,p3) - 110*z(c3,p1) + cost =E= 0 ; (LHS = 118.008, INFES = 118.008 ****)
     

---- clower  =G=  lower bound component availability

clower(c1)..  (0.3)*q(c1,o1) + (0.3)*q(c1,o2) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o2,p1) + (0.1)*y(o2,p2) + (0.1)*y(o2,p3) + z(c1,p2) =G= 0 ; (LHS = 0.16)
     
clower(c2)..  (0.3)*q(c2,o1) + (0.3)*q(c2,o2) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o2,p1) + (0.1)*y(o2,p2) + (0.1)*y(o2,p3) + z(c2,p1) + z(c2,p3) =G= 0 ; (LHS = 0.26)
     
clower(c3)..  (0.3)*q(c3,o1) + (0.3)*q(c3,o2) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o2,p1) + (0.1)*y(o2,p2) + (0.1)*y(o2,p3) + z(c3,p1) =G= 0 ; (LHS = 0.16)
     

---- cupper  =L=  upper bound component availability

cupper(c1)..  (0.3)*q(c1,o1) + (0.3)*q(c1,o2) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o2,p1) + (0.1)*y(o2,p2) + (0.1)*y(o2,p3) + z(c1,p2) =L= 60.9756 ; (LHS = 0.159999999999997)
     
cupper(c2)..  (0.3)*q(c2,o1) + (0.3)*q(c2,o2) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o2,p1) + (0.1)*y(o2,p2) + (0.1)*y(o2,p3) + z(c2,p1) + z(c2,p3) =L= 161.29 ; (LHS = 0.259999999999991)
     
cupper(c3)..  (0.3)*q(c3,o1) + (0.3)*q(c3,o2) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o2,p1) + (0.1)*y(o2,p2) + (0.1)*y(o2,p3) + z(c3,p1) =L= 5 ; (LHS = 0.16)
     

---- pszrlt  =L=  ss-rlt on pool size constraints

pszrlt(c1,o1)..  - (12.2)*q(c1,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) =L= 0 ; (LHS = -1.22)
     
pszrlt(c1,o2)..  - (17.2)*q(c1,o2) + (0.1)*y(o2,p1) + (0.1)*y(o2,p2) + (0.1)*y(o2,p3) =L= 0 ; (LHS = -1.72)
     
pszrlt(c2,o1)..  - (12.2)*q(c2,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) =L= 0 ; (LHS = -1.22)
     
REMAINING 3 ENTRIES SKIPPED


---- plower  =G=  minimum product production

plower(p1)..  y(o1,p1) + y(o2,p1) + z(c2,p1) + z(c3,p1) =G= 5 ; (LHS = 0.4, INFES = 4.6 ****)
     
plower(p2)..  y(o1,p2) + y(o2,p2) + z(c1,p2) =G= 5 ; (LHS = 0.3, INFES = 4.7 ****)
     
plower(p3)..  y(o1,p3) + y(o2,p3) + z(c2,p3) =G= 5 ; (LHS = 0.3, INFES = 4.7 ****)
     

---- pupper  =L=  maximum product demand

pupper(p1)..  y(o1,p1) + y(o2,p1) + z(c2,p1) + z(c3,p1) =L= 300 ; (LHS = 0.399999999999977)
     
pupper(p2)..  y(o1,p2) + y(o2,p2) + z(c1,p2) =L= 300 ; (LHS = 0.300000000000011)
     
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 98
The Pooling Problem (POOL,SEQ=254)
Equation Listing    SOLVE poolprob Using NLP From line 947


     pupper  =L=  maximum product demand

pupper(p3)..  y(o1,p3) + y(o2,p3) + z(c2,p3) =L= 300 ; (LHS = 0.300000000000011)
     

---- pqlower  =G=  minimum product quality requirement

pqlower(p1,q1)..  (0.082)*q(c1,o1) + (0.082)*q(c1,o2) + (0.062)*q(c2,o1) + (0.062)*q(c2,o2) + (0.075)*q(c3,o1) + (0.075)*q(c3,o2) - (0.521)*y(o1,p1) - (0.521)*y(o2,p1) - 0.12*z(c2,p1) + 0.01*z(c3,p1) =G= 0 ; (LHS = -0.1152, INFES = 0.1152 ****)
     
pqlower(p1,q2)..  (0.3)*q(c1,o1) + (0.3)*q(c1,o2) + (0.3)*y(o1,p1) + (0.3)*y(o2,p1) =G= 0 ; (LHS = 0.06)
     
pqlower(p1,q3)..  (9.92)*q(c1,o1) + (9.92)*q(c1,o2) + (8.79)*q(c2,o1) + (8.79)*q(c2,o2) + (11.4)*q(c3,o1) + (11.4)*q(c3,o2) - (64.89)*y(o1,p1) - (64.89)*y(o2,p1) - 7.09999999999999*z(c2,p1) + 19*z(c3,p1) =G= 0 ; (LHS = -11.788, INFES = 11.788 ****)
     
REMAINING 9 ENTRIES SKIPPED


---- pqupper  =L=  maximum product quality

pqupper(p1,q1)..  (0.082)*q(c1,o1) + (0.082)*q(c1,o2) + (0.062)*q(c2,o1) + (0.062)*q(c2,o2) + (0.075)*q(c3,o1) + (0.075)*q(c3,o2) - (0.571)*y(o1,p1) - (0.571)*y(o2,p1) - 0.17*z(c2,p1) - 0.04*z(c3,p1) =L= 0 ; (LHS = -0.1352)
     
pqupper(p1,q2)..  (0.3)*q(c1,o1) + (0.3)*q(c1,o2) - (2.7)*y(o1,p1) - (2.7)*y(o2,p1) - 3*z(c2,p1) - 3*z(c3,p1) =L= 0 ; (LHS = -1.14)
     
pqupper(p1,q3)..  (9.92)*q(c1,o1) + (9.92)*q(c1,o2) + (8.79)*q(c2,o1) + (8.79)*q(c2,o2) + (11.4)*q(c3,o1) + (11.4)*q(c3,o2) - (83.89)*y(o1,p1) - (83.89)*y(o2,p1) - 26.1*z(c2,p1) =L= 0 ; (LHS = -19.388)
     
REMAINING 9 ENTRIES SKIPPED


---- fraction  =E=  fractions sum to one

fraction(o1)..  q(c1,o1) + q(c2,o1) + q(c3,o1) =E= 1 ; (LHS = 0.3, INFES = 0.7 ****)
     
fraction(o2)..  q(c1,o2) + q(c2,o2) + q(c3,o2) =E= 1 ; (LHS = 0.3, INFES = 0.7 ****)
     

---- extensions  =E=  convexification constraints

extensions(o1,p1)..  (0.1)*q(c1,o1) + (0.1)*q(c2,o1) + (0.1)*q(c3,o1) - (0.7)*y(o1,p1) =E= 0 ; (LHS = -0.07, INFES = 0.07 ****)
     
extensions(o1,p2)..  (0.1)*q(c1,o1) + (0.1)*q(c2,o1) + (0.1)*q(c3,o1) - (0.7)*y(o1,p2) =E= 0 ; (LHS = -0.07, INFES = 0.07 ****)
     
extensions(o1,p3)..  (0.1)*q(c1,o1) + (0.1)*q(c2,o1) + (0.1)*q(c3,o1) - (0.7)*y(o1,p3) =E= 0 ; (LHS = -0.07, INFES = 0.07 ****)
     
REMAINING 3 ENTRIES SKIPPED

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:22:58 Page 99
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


---- q  pool quality from pooling raw materials

q(c1,o1)
                (.LO, .L, .UP, .M = 0, 0.1, 1, 0)
     (-14.76)   obj
       (0.3)    clower(c1)
       (0.3)    cupper(c1)
     (-12.2)    pszrlt(c1,o1)
       (0.082)  pqlower(p1,q1)
       (0.3)    pqlower(p1,q2)
       (9.92)   pqlower(p1,q3)
       (9.05)   pqlower(p1,q4)
       (0.082)  pqlower(p2,q1)
       (0.3)    pqlower(p2,q2)
       (9.92)   pqlower(p2,q3)
       (9.05)   pqlower(p2,q4)
       (0.082)  pqlower(p3,q1)
       (0.3)    pqlower(p3,q2)
       (9.92)   pqlower(p3,q3)
       (9.05)   pqlower(p3,q4)
       (0.082)  pqupper(p1,q1)
       (0.3)    pqupper(p1,q2)
       (9.92)   pqupper(p1,q3)
       (9.05)   pqupper(p1,q4)
       (0.082)  pqupper(p2,q1)
       (0.3)    pqupper(p2,q2)
       (9.92)   pqupper(p2,q3)
       (9.05)   pqupper(p2,q4)
       (0.082)  pqupper(p3,q1)
       (0.3)    pqupper(p3,q2)
       (9.92)   pqupper(p3,q3)
       (9.05)   pqupper(p3,q4)
        1       fraction(o1)
       (0.1)    extensions(o1,p1)
       (0.1)    extensions(o1,p2)
       (0.1)    extensions(o1,p3)

q(c1,o2)
                (.LO, .L, .UP, .M = 0, 0.1, 1, 0)
     (-14.76)   obj
       (0.3)    clower(c1)
       (0.3)    cupper(c1)
     (-17.2)    pszrlt(c1,o2)
       (0.082)  pqlower(p1,q1)
       (0.3)    pqlower(p1,q2)
       (9.92)   pqlower(p1,q3)
       (9.05)   pqlower(p1,q4)
       (0.082)  pqlower(p2,q1)
       (0.3)    pqlower(p2,q2)
       (9.92)   pqlower(p2,q3)
       (9.05)   pqlower(p2,q4)
       (0.082)  pqlower(p3,q1)
       (0.3)    pqlower(p3,q2)
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                    12/13/18 11:22:58 Page 100
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


     q  pool quality from pooling raw materials

       (9.92)   pqlower(p3,q3)
       (9.05)   pqlower(p3,q4)
       (0.082)  pqupper(p1,q1)
       (0.3)    pqupper(p1,q2)
       (9.92)   pqupper(p1,q3)
       (9.05)   pqupper(p1,q4)
       (0.082)  pqupper(p2,q1)
       (0.3)    pqupper(p2,q2)
       (9.92)   pqupper(p2,q3)
       (9.05)   pqupper(p2,q4)
       (0.082)  pqupper(p3,q1)
       (0.3)    pqupper(p3,q2)
       (9.92)   pqupper(p3,q3)
       (9.05)   pqupper(p3,q4)
        1       fraction(o2)
       (0.1)    extensions(o2,p1)
       (0.1)    extensions(o2,p2)
       (0.1)    extensions(o2,p3)

q(c2,o1)
                (.LO, .L, .UP, .M = 0, 0.1, 1, 0)
     (-18.6)    obj
       (0.3)    clower(c2)
       (0.3)    cupper(c2)
     (-12.2)    pszrlt(c2,o1)
       (0.062)  pqlower(p1,q1)
       (8.79)   pqlower(p1,q3)
       (8.35)   pqlower(p1,q4)
       (0.062)  pqlower(p2,q1)
       (8.79)   pqlower(p2,q3)
       (8.35)   pqlower(p2,q4)
       (0.062)  pqlower(p3,q1)
       (8.79)   pqlower(p3,q3)
       (8.35)   pqlower(p3,q4)
       (0.062)  pqupper(p1,q1)
       (8.79)   pqupper(p1,q3)
       (8.35)   pqupper(p1,q4)
       (0.062)  pqupper(p2,q1)
       (8.79)   pqupper(p2,q3)
       (8.35)   pqupper(p2,q4)
       (0.062)  pqupper(p3,q1)
       (8.79)   pqupper(p3,q3)
       (8.35)   pqupper(p3,q4)
        1       fraction(o1)
       (0.1)    extensions(o1,p1)
       (0.1)    extensions(o1,p2)
       (0.1)    extensions(o1,p3)

REMAINING 3 ENTRIES SKIPPED
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                    12/13/18 11:22:58 Page 101
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


---- y  flow from pool to product

y(o1,p1)
                (.LO, .L, .UP, .M = 0, 0.1, 12.5, 0)
     (148.88)   obj
       (0.1)    clower(c1)
       (0.1)    clower(c2)
       (0.1)    clower(c3)
       (0.1)    cupper(c1)
       (0.1)    cupper(c2)
       (0.1)    cupper(c3)
       (0.1)    pszrlt(c1,o1)
       (0.1)    pszrlt(c2,o1)
       (0.1)    pszrlt(c3,o1)
        1       plower(p1)
        1       pupper(p1)
      (-0.521)  pqlower(p1,q1)
       (0.3)    pqlower(p1,q2)
     (-64.89)   pqlower(p1,q3)
     (-57.73)   pqlower(p1,q4)
      (-0.571)  pqupper(p1,q1)
      (-2.7)    pqupper(p1,q2)
     (-83.89)   pqupper(p1,q3)
     (-71.43)   pqupper(p1,q4)
      (-0.7)    extensions(o1,p1)

y(o1,p2)
                (.LO, .L, .UP, .M = 0, 0.1, 12.5, 0)
     (188.88)   obj
       (0.1)    clower(c1)
       (0.1)    clower(c2)
       (0.1)    clower(c3)
       (0.1)    cupper(c1)
       (0.1)    cupper(c2)
       (0.1)    cupper(c3)
       (0.1)    pszrlt(c1,o1)
       (0.1)    pszrlt(c2,o1)
       (0.1)    pszrlt(c3,o1)
        1       plower(p2)
        1       pupper(p2)
      (-0.521)  pqlower(p2,q1)
       (0.3)    pqlower(p2,q2)
     (-65.89)   pqlower(p2,q3)
     (-60.73)   pqlower(p2,q4)
      (-0.571)  pqupper(p2,q1)
      (-0.6)    pqupper(p2,q2)
     (-83.89)   pqupper(p2,q3)
     (-71.43)   pqupper(p2,q4)
      (-0.7)    extensions(o1,p2)

y(o1,p3)
                (.LO, .L, .UP, .M = 0, 0.1, 12.5, 0)
     (108.88)   obj
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                    12/13/18 11:22:58 Page 102
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


     y  flow from pool to product

       (0.1)    clower(c1)
       (0.1)    clower(c2)
       (0.1)    clower(c3)
       (0.1)    cupper(c1)
       (0.1)    cupper(c2)
       (0.1)    cupper(c3)
       (0.1)    pszrlt(c1,o1)
       (0.1)    pszrlt(c2,o1)
       (0.1)    pszrlt(c3,o1)
        1       plower(p3)
        1       pupper(p3)
      (-0.521)  pqlower(p3,q1)
       (0.3)    pqlower(p3,q2)
     (-60.89)   pqlower(p3,q3)
     (-56.23)   pqlower(p3,q4)
      (-0.571)  pqupper(p3,q1)
      (-2.7)    pqupper(p3,q2)
     (-83.89)   pqupper(p3,q3)
     (-71.43)   pqupper(p3,q4)
      (-0.7)    extensions(o1,p3)

REMAINING 3 ENTRIES SKIPPED

---- z  direct flow of rawmaterials to product

z(c1,p2)
                (.LO, .L, .UP, .M = 0, 0.1, 7.5, 0)
      180.8     obj
        1       clower(c1)
        1       cupper(c1)
        1       plower(p2)
        1       pupper(p2)
        0.08    pqlower(p2,q1)
        3       pqlower(p2,q2)
        3.2     pqlower(p2,q3)
        2.5     pqlower(p2,q4)
        0.03    pqupper(p2,q1)
        2.1     pqupper(p2,q2)
      -14.8     pqupper(p2,q3)
       -8.2     pqupper(p2,q4)

z(c2,p1)
                (.LO, .L, .UP, .M = 0, 0.1, 161.29, 0)
      128       obj
        1       clower(c2)
        1       cupper(c2)
        1       plower(p1)
        1       pupper(p1)
       -0.12    pqlower(p1,q1)
       -7.1     pqlower(p1,q3)
       -1.5     pqlower(p1,q4)
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                    12/13/18 11:22:58 Page 103
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


     z  direct flow of rawmaterials to product

       -0.17    pqupper(p1,q1)
       -3       pqupper(p1,q2)
      -26.1     pqupper(p1,q3)
      -15.2     pqupper(p1,q4)

z(c2,p3)
                (.LO, .L, .UP, .M = 0, 0.1, 161.29, 0)
       88       obj
        1       clower(c2)
        1       cupper(c2)
        1       plower(p3)
        1       pupper(p3)
       -0.12    pqlower(p3,q1)
       -3.1     pqlower(p3,q3)
       -0.17    pqupper(p3,q1)
       -3       pqupper(p3,q2)
      -26.1     pqupper(p3,q3)
      -15.2     pqupper(p3,q4)

REMAINING ENTRY SKIPPED

---- cost  total cost

cost
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       obj

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                    12/13/18 11:22:58 Page 104
The Pooling Problem (POOL,SEQ=254)
Model Statistics    SOLVE poolprob Using NLP From line 947


LOOPS                                 case   rt2


MODEL STATISTICS

BLOCKS OF EQUATIONS          10     SINGLE EQUATIONS           51
BLOCKS OF VARIABLES           4     SINGLE VARIABLES           17
NON ZERO ELEMENTS           341     NON LINEAR N-Z            276
DERIVATIVE POOL              20     CONSTANT POOL              45
CODE LENGTH                 927


GENERATION TIME      =        0.004 SECONDS      3 MB  24.7.4 r58773 LEX-LEG


EXECUTION TIME       =        0.004 SECONDS      3 MB  24.7.4 r58773 LEX-LEG
               L O O P S               case rt2

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                    12/13/18 11:22:58 Page 105
The Pooling Problem (POOL,SEQ=254)
Solution Report     SOLVE poolprob Using NLP From line 947


               S O L V E      S U M M A R Y

     MODEL   poolprob            OBJECTIVE  cost
     TYPE    NLP                 DIRECTION  MINIMIZE
     SOLVER  CONVERT             FROM LINE  947

**** SOLVER STATUS     1 Normal Completion         
**** MODEL STATUS      14 No Solution Returned     
**** OBJECTIVE VALUE                0.0000

 RESOURCE USAGE, LIMIT          0.000      1000.000
 ITERATION COUNT, LIMIT         0    2000000000
 EVALUATION ERRORS              0             0

Convert 2.0      24.7.4 r58773 Released Sep 19, 2016 LEG x86 64bit/Linux      

--- Using Option File
Reading parameter(s) from "/home/renigijus/gams/opt-mod-lib/gamslib/pool/convert.opt"
>>  ampl pool-scalar.mod
Finished reading from "/home/renigijus/gams/opt-mod-lib/gamslib/pool/convert.opt"
Ampl      : pool-scalar.mod


No solution returned
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                    12/13/18 11:22:58 Page 106
The Pooling Problem (POOL,SEQ=254)
Equation Listing    SOLVE poolprob Using NLP From line 947


---- obj  =E=  objective function

obj..  - (2.8)*q(c1,o1) - (1.2)*q(c2,o1) - (0.8)*q(c3,o2) - (4)*q(c4,o2) - (2)*q(c5,o2) + (15)*y(o1,p1) + (24)*y(o1,p2) + (14)*y(o1,p3) + (9)*y(o1,p4) + (14.3)*y(o2,p1) + (23.3)*y(o2,p2) + (13.3)*y(o2,p3) + (8.3)*y(o2,p4) + cost =E= 0 ;
     
      (LHS = 12.12, INFES = 12.12 ****)
     

---- clower  =G=  lower bound component availability

clower(c1)..  (0.4)*q(c1,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) =G= 0 ; (LHS = 0.04)
     
clower(c2)..  (0.4)*q(c2,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) =G= 0 ; (LHS = 0.04)
     
clower(c3)..  (0.4)*q(c3,o2) + (0.1)*y(o2,p1) + (0.1)*y(o2,p2) + (0.1)*y(o2,p3) + (0.1)*y(o2,p4) =G= 0 ; (LHS = 0.04)
     
REMAINING 2 ENTRIES SKIPPED


---- cupper  =L=  upper bound component availability

cupper(c1)..  (0.4)*q(c1,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) =L= 75 ; (LHS = 0.0400000000000063)
     
cupper(c2)..  (0.4)*q(c2,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) =L= 75 ; (LHS = 0.0400000000000063)
     
cupper(c3)..  (0.4)*q(c3,o2) + (0.1)*y(o2,p1) + (0.1)*y(o2,p2) + (0.1)*y(o2,p3) + (0.1)*y(o2,p4) =L= 75 ; (LHS = 0.0400000000000063)
     
REMAINING 2 ENTRIES SKIPPED


---- pszrlt  =L=  ss-rlt on pool size constraints

pszrlt(c1,o1)..  - (74.6)*q(c1,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) =L= 0 ; (LHS = -7.46)
     
pszrlt(c2,o1)..  - (74.6)*q(c2,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) =L= 0 ; (LHS = -7.46)
     
pszrlt(c3,o2)..  - (74.6)*q(c3,o2) + (0.1)*y(o2,p1) + (0.1)*y(o2,p2) + (0.1)*y(o2,p3) + (0.1)*y(o2,p4) =L= 0 ; (LHS = -7.46)
     
REMAINING 2 ENTRIES SKIPPED


---- plower  =G=  minimum product production

plower(p1)..  y(o1,p1) + y(o2,p1) =G= 0 ; (LHS = 0.2)
     
plower(p2)..  y(o1,p2) + y(o2,p2) =G= 0 ; (LHS = 0.2)
     
plower(p3)..  y(o1,p3) + y(o2,p3) =G= 0 ; (LHS = 0.2)
     
REMAINING ENTRY SKIPPED

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                    12/13/18 11:22:58 Page 107
The Pooling Problem (POOL,SEQ=254)
Equation Listing    SOLVE poolprob Using NLP From line 947


---- pupper  =L=  maximum product demand

pupper(p1)..  y(o1,p1) + y(o2,p1) =L= 10 ; (LHS = 0.199999999999999)
     
pupper(p2)..  y(o1,p2) + y(o2,p2) =L= 25 ; (LHS = 0.199999999999999)
     
pupper(p3)..  y(o1,p3) + y(o2,p3) =L= 30 ; (LHS = 0.199999999999999)
     
REMAINING ENTRY SKIPPED


---- pqlower  =G=  minimum product quality requirement

pqlower(p1,q1)..  (0.1)*q(c1,o1) + (0.4)*q(c2,o1) + (0.4)*q(c3,o2) + (0.3)*q(c4,o2) + (0.1)*q(c5,o2) + (0.5)*y(o1,p1) + (0.8)*y(o2,p1) =G= 0 ; (LHS = 0.13)
     
pqlower(p1,q2)..  (0.6)*q(c1,o1) + (0.1)*q(c2,o1) + (0.55)*q(c3,o2) + (0.3)*q(c4,o2) + (0.27)*q(c5,o2) + (0.7)*y(o1,p1) + (1.12)*y(o2,p1) =G= 0 ; (LHS = 0.182)
     
pqlower(p1,q3)..  (0.4)*q(c1,o1) + (0.3)*q(c2,o1) + (0.3)*q(c3,o2) + (0.3)*q(c4,o2) + (0.4)*q(c5,o2) + (0.7)*y(o1,p1) + (1)*y(o2,p1) =G= 0 ; (LHS = 0.17)
     
REMAINING 13 ENTRIES SKIPPED


---- pqupper  =L=  maximum product quality

pqupper(p1,q1)..  (0.1)*q(c1,o1) + (0.4)*q(c2,o1) + (0.4)*q(c3,o2) + (0.3)*q(c4,o2) + (0.1)*q(c5,o2) - (2.5)*y(o1,p1) - (2.2)*y(o2,p1) =L= 0 ; (LHS = -0.47)
     
pqupper(p1,q2)..  (0.6)*q(c1,o1) + (0.1)*q(c2,o1) + (0.55)*q(c3,o2) + (0.3)*q(c4,o2) + (0.27)*q(c5,o2) - (2.3)*y(o1,p1) - (1.88)*y(o2,p1) =L= 0 ; (LHS = -0.418)
     
pqupper(p1,q3)..  (0.4)*q(c1,o1) + (0.3)*q(c2,o1) + (0.3)*q(c3,o2) + (0.3)*q(c4,o2) + (0.4)*q(c5,o2) - (2.55)*y(o1,p1) - (2.25)*y(o2,p1) =L= 0 ; (LHS = -0.48)
     
REMAINING 13 ENTRIES SKIPPED


---- fraction  =E=  fractions sum to one

fraction(o1)..  q(c1,o1) + q(c2,o1) =E= 1 ; (LHS = 0.2, INFES = 0.8 ****)
     
fraction(o2)..  q(c3,o2) + q(c4,o2) + q(c5,o2) =E= 1 ; (LHS = 0.3, INFES = 0.7 ****)
     

---- extensions  =E=  convexification constraints

extensions(o1,p1)..  (0.1)*q(c1,o1) + (0.1)*q(c2,o1) - (0.8)*y(o1,p1) =E= 0 ; (LHS = -0.08, INFES = 0.08 ****)
     
extensions(o1,p2)..  (0.1)*q(c1,o1) + (0.1)*q(c2,o1) - (0.8)*y(o1,p2) =E= 0 ; (LHS = -0.08, INFES = 0.08 ****)
     
extensions(o1,p3)..  (0.1)*q(c1,o1) + (0.1)*q(c2,o1) - (0.8)*y(o1,p3) =E= 0 ; (LHS = -0.08, INFES = 0.08 ****)
     
REMAINING 5 ENTRIES SKIPPED

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                    12/13/18 11:22:58 Page 108
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


---- q  pool quality from pooling raw materials

q(c1,o1)
                (.LO, .L, .UP, .M = 0, 0.1, 1, 0)
      (-2.8)    obj
       (0.4)    clower(c1)
       (0.4)    cupper(c1)
     (-74.6)    pszrlt(c1,o1)
       (0.1)    pqlower(p1,q1)
       (0.6)    pqlower(p1,q2)
       (0.4)    pqlower(p1,q3)
       (0.05)   pqlower(p1,q4)
       (0.1)    pqlower(p2,q1)
       (0.6)    pqlower(p2,q2)
       (0.4)    pqlower(p2,q3)
       (0.05)   pqlower(p2,q4)
       (0.1)    pqlower(p3,q1)
       (0.6)    pqlower(p3,q2)
       (0.4)    pqlower(p3,q3)
       (0.05)   pqlower(p3,q4)
       (0.1)    pqlower(p4,q1)
       (0.6)    pqlower(p4,q2)
       (0.4)    pqlower(p4,q3)
       (0.05)   pqlower(p4,q4)
       (0.1)    pqupper(p1,q1)
       (0.6)    pqupper(p1,q2)
       (0.4)    pqupper(p1,q3)
       (0.05)   pqupper(p1,q4)
       (0.1)    pqupper(p2,q1)
       (0.6)    pqupper(p2,q2)
       (0.4)    pqupper(p2,q3)
       (0.05)   pqupper(p2,q4)
       (0.1)    pqupper(p3,q1)
       (0.6)    pqupper(p3,q2)
       (0.4)    pqupper(p3,q3)
       (0.05)   pqupper(p3,q4)
       (0.1)    pqupper(p4,q1)
       (0.6)    pqupper(p4,q2)
       (0.4)    pqupper(p4,q3)
       (0.05)   pqupper(p4,q4)
        1       fraction(o1)
       (0.1)    extensions(o1,p1)
       (0.1)    extensions(o1,p2)
       (0.1)    extensions(o1,p3)
       (0.1)    extensions(o1,p4)

q(c2,o1)
                (.LO, .L, .UP, .M = 0, 0.1, 1, 0)
      (-1.2)    obj
       (0.4)    clower(c2)
       (0.4)    cupper(c2)
     (-74.6)    pszrlt(c2,o1)
       (0.4)    pqlower(p1,q1)
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                    12/13/18 11:22:58 Page 109
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


     q  pool quality from pooling raw materials

       (0.1)    pqlower(p1,q2)
       (0.3)    pqlower(p1,q3)
       (0.2)    pqlower(p1,q4)
       (0.4)    pqlower(p2,q1)
       (0.1)    pqlower(p2,q2)
       (0.3)    pqlower(p2,q3)
       (0.2)    pqlower(p2,q4)
       (0.4)    pqlower(p3,q1)
       (0.1)    pqlower(p3,q2)
       (0.3)    pqlower(p3,q3)
       (0.2)    pqlower(p3,q4)
       (0.4)    pqlower(p4,q1)
       (0.1)    pqlower(p4,q2)
       (0.3)    pqlower(p4,q3)
       (0.2)    pqlower(p4,q4)
       (0.4)    pqupper(p1,q1)
       (0.1)    pqupper(p1,q2)
       (0.3)    pqupper(p1,q3)
       (0.2)    pqupper(p1,q4)
       (0.4)    pqupper(p2,q1)
       (0.1)    pqupper(p2,q2)
       (0.3)    pqupper(p2,q3)
       (0.2)    pqupper(p2,q4)
       (0.4)    pqupper(p3,q1)
       (0.1)    pqupper(p3,q2)
       (0.3)    pqupper(p3,q3)
       (0.2)    pqupper(p3,q4)
       (0.4)    pqupper(p4,q1)
       (0.1)    pqupper(p4,q2)
       (0.3)    pqupper(p4,q3)
       (0.2)    pqupper(p4,q4)
        1       fraction(o1)
       (0.1)    extensions(o1,p1)
       (0.1)    extensions(o1,p2)
       (0.1)    extensions(o1,p3)
       (0.1)    extensions(o1,p4)

q(c3,o2)
                (.LO, .L, .UP, .M = 0, 0.1, 1, 0)
      (-0.8)    obj
       (0.4)    clower(c3)
       (0.4)    cupper(c3)
     (-74.6)    pszrlt(c3,o2)
       (0.4)    pqlower(p1,q1)
       (0.55)   pqlower(p1,q2)
       (0.3)    pqlower(p1,q3)
       (0.09)   pqlower(p1,q4)
       (0.4)    pqlower(p2,q1)
       (0.55)   pqlower(p2,q2)
       (0.3)    pqlower(p2,q3)
       (0.09)   pqlower(p2,q4)
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                    12/13/18 11:22:58 Page 110
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


     q  pool quality from pooling raw materials

       (0.4)    pqlower(p3,q1)
       (0.55)   pqlower(p3,q2)
       (0.3)    pqlower(p3,q3)
       (0.09)   pqlower(p3,q4)
       (0.4)    pqlower(p4,q1)
       (0.55)   pqlower(p4,q2)
       (0.3)    pqlower(p4,q3)
       (0.09)   pqlower(p4,q4)
       (0.4)    pqupper(p1,q1)
       (0.55)   pqupper(p1,q2)
       (0.3)    pqupper(p1,q3)
       (0.09)   pqupper(p1,q4)
       (0.4)    pqupper(p2,q1)
       (0.55)   pqupper(p2,q2)
       (0.3)    pqupper(p2,q3)
       (0.09)   pqupper(p2,q4)
       (0.4)    pqupper(p3,q1)
       (0.55)   pqupper(p3,q2)
       (0.3)    pqupper(p3,q3)
       (0.09)   pqupper(p3,q4)
       (0.4)    pqupper(p4,q1)
       (0.55)   pqupper(p4,q2)
       (0.3)    pqupper(p4,q3)
       (0.09)   pqupper(p4,q4)
        1       fraction(o2)
       (0.1)    extensions(o2,p1)
       (0.1)    extensions(o2,p2)
       (0.1)    extensions(o2,p3)
       (0.1)    extensions(o2,p4)

REMAINING 2 ENTRIES SKIPPED

---- y  flow from pool to product

y(o1,p1)
                (.LO, .L, .UP, .M = 0, 0.1, 10, 0)
      (15)      obj
       (0.1)    clower(c1)
       (0.1)    clower(c2)
       (0.1)    cupper(c1)
       (0.1)    cupper(c2)
       (0.1)    pszrlt(c1,o1)
       (0.1)    pszrlt(c2,o1)
        1       plower(p1)
        1       pupper(p1)
       (0.5)    pqlower(p1,q1)
       (0.7)    pqlower(p1,q2)
       (0.7)    pqlower(p1,q3)
       (0.25)   pqlower(p1,q4)
      (-2.5)    pqupper(p1,q1)
      (-2.3)    pqupper(p1,q2)
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                    12/13/18 11:22:58 Page 111
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


     y  flow from pool to product

      (-2.55)   pqupper(p1,q3)
      (-0.5)    pqupper(p1,q4)
      (-0.8)    extensions(o1,p1)

y(o1,p2)
                (.LO, .L, .UP, .M = 0, 0.1, 25, 0)
      (24)      obj
       (0.1)    clower(c1)
       (0.1)    clower(c2)
       (0.1)    cupper(c1)
       (0.1)    cupper(c2)
       (0.1)    pszrlt(c1,o1)
       (0.1)    pszrlt(c2,o1)
        1       plower(p2)
        1       pupper(p2)
       (0.5)    pqlower(p2,q1)
       (0.7)    pqlower(p2,q2)
       (0.7)    pqlower(p2,q3)
       (0.25)   pqlower(p2,q4)
      (-3.5)    pqupper(p2,q1)
      (-1.8)    pqupper(p2,q2)
      (-2.8)    pqupper(p2,q3)
      (-1.25)   pqupper(p2,q4)
      (-0.8)    extensions(o1,p2)

y(o1,p3)
                (.LO, .L, .UP, .M = 0, 0.1, 30, 0)
      (14)      obj
       (0.1)    clower(c1)
       (0.1)    clower(c2)
       (0.1)    cupper(c1)
       (0.1)    cupper(c2)
       (0.1)    pszrlt(c1,o1)
       (0.1)    pszrlt(c2,o1)
        1       plower(p3)
        1       pupper(p3)
       (0.5)    pqlower(p3,q1)
       (0.7)    pqlower(p3,q2)
       (0.7)    pqlower(p3,q3)
       (0.25)   pqlower(p3,q4)
      (-1)      pqupper(p3,q1)
      (-4.8)    pqupper(p3,q2)
      (-3.2)    pqupper(p3,q3)
      (-0.55)   pqupper(p3,q4)
      (-0.8)    extensions(o1,p3)

REMAINING 5 ENTRIES SKIPPED
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                    12/13/18 11:22:58 Page 112
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


---- cost  total cost

cost
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       obj

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                    12/13/18 11:22:58 Page 113
The Pooling Problem (POOL,SEQ=254)
Model Statistics    SOLVE poolprob Using NLP From line 947


LOOPS                                 case   adhya1


MODEL STATISTICS

BLOCKS OF EQUATIONS          10     SINGLE EQUATIONS           66
BLOCKS OF VARIABLES           3     SINGLE VARIABLES           14
NON ZERO ELEMENTS           362     NON LINEAR N-Z            340
DERIVATIVE POOL              20     CONSTANT POOL              38
CODE LENGTH               1,084


GENERATION TIME      =        0.006 SECONDS      3 MB  24.7.4 r58773 LEX-LEG


EXECUTION TIME       =        0.006 SECONDS      3 MB  24.7.4 r58773 LEX-LEG
               L O O P S               case adhya1

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                    12/13/18 11:22:58 Page 114
The Pooling Problem (POOL,SEQ=254)
Solution Report     SOLVE poolprob Using NLP From line 947


               S O L V E      S U M M A R Y

     MODEL   poolprob            OBJECTIVE  cost
     TYPE    NLP                 DIRECTION  MINIMIZE
     SOLVER  CONVERT             FROM LINE  947

**** SOLVER STATUS     1 Normal Completion         
**** MODEL STATUS      14 No Solution Returned     
**** OBJECTIVE VALUE                0.0000

 RESOURCE USAGE, LIMIT          0.000      1000.000
 ITERATION COUNT, LIMIT         0    2000000000
 EVALUATION ERRORS              0             0

Convert 2.0      24.7.4 r58773 Released Sep 19, 2016 LEG x86 64bit/Linux      

--- Using Option File
Reading parameter(s) from "/home/renigijus/gams/opt-mod-lib/gamslib/pool/convert.opt"
>>  ampl pool-scalar.mod
Finished reading from "/home/renigijus/gams/opt-mod-lib/gamslib/pool/convert.opt"
Ampl      : pool-scalar.mod


No solution returned
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                    12/13/18 11:22:58 Page 115
The Pooling Problem (POOL,SEQ=254)
Equation Listing    SOLVE poolprob Using NLP From line 947


---- obj  =E=  objective function

obj..  - (2.8)*q(c1,o1) - (1.2)*q(c2,o1) - (0.8)*q(c3,o2) - (4)*q(c4,o2) - (2)*q(c5,o2) + (15)*y(o1,p1) + (24)*y(o1,p2) + (14)*y(o1,p3) + (9)*y(o1,p4) + (14.3)*y(o2,p1) + (23.3)*y(o2,p2) + (13.3)*y(o2,p3) + (8.3)*y(o2,p4) + cost =E= 0 ;
     
      (LHS = 12.12, INFES = 12.12 ****)
     

---- clower  =G=  lower bound component availability

clower(c1)..  (0.4)*q(c1,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) =G= 0 ; (LHS = 0.04)
     
clower(c2)..  (0.4)*q(c2,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) =G= 0 ; (LHS = 0.04)
     
clower(c3)..  (0.4)*q(c3,o2) + (0.1)*y(o2,p1) + (0.1)*y(o2,p2) + (0.1)*y(o2,p3) + (0.1)*y(o2,p4) =G= 0 ; (LHS = 0.04)
     
REMAINING 2 ENTRIES SKIPPED


---- cupper  =L=  upper bound component availability

cupper(c1)..  (0.4)*q(c1,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) =L= 75 ; (LHS = 0.0400000000000063)
     
cupper(c2)..  (0.4)*q(c2,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) =L= 75 ; (LHS = 0.0400000000000063)
     
cupper(c3)..  (0.4)*q(c3,o2) + (0.1)*y(o2,p1) + (0.1)*y(o2,p2) + (0.1)*y(o2,p3) + (0.1)*y(o2,p4) =L= 75 ; (LHS = 0.0400000000000063)
     
REMAINING 2 ENTRIES SKIPPED


---- pszrlt  =L=  ss-rlt on pool size constraints

pszrlt(c1,o1)..  - (74.6)*q(c1,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) =L= 0 ; (LHS = -7.46)
     
pszrlt(c2,o1)..  - (74.6)*q(c2,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) =L= 0 ; (LHS = -7.46)
     
pszrlt(c3,o2)..  - (74.6)*q(c3,o2) + (0.1)*y(o2,p1) + (0.1)*y(o2,p2) + (0.1)*y(o2,p3) + (0.1)*y(o2,p4) =L= 0 ; (LHS = -7.46)
     
REMAINING 2 ENTRIES SKIPPED


---- plower  =G=  minimum product production

plower(p1)..  y(o1,p1) + y(o2,p1) =G= 0 ; (LHS = 0.2)
     
plower(p2)..  y(o1,p2) + y(o2,p2) =G= 0 ; (LHS = 0.2)
     
plower(p3)..  y(o1,p3) + y(o2,p3) =G= 0 ; (LHS = 0.2)
     
REMAINING ENTRY SKIPPED

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                    12/13/18 11:22:58 Page 116
The Pooling Problem (POOL,SEQ=254)
Equation Listing    SOLVE poolprob Using NLP From line 947


---- pupper  =L=  maximum product demand

pupper(p1)..  y(o1,p1) + y(o2,p1) =L= 10 ; (LHS = 0.199999999999999)
     
pupper(p2)..  y(o1,p2) + y(o2,p2) =L= 25 ; (LHS = 0.199999999999999)
     
pupper(p3)..  y(o1,p3) + y(o2,p3) =L= 30 ; (LHS = 0.199999999999999)
     
REMAINING ENTRY SKIPPED


---- pqlower  =G=  minimum product quality requirement

pqlower(p1,q1)..  (0.1)*q(c1,o1) + (0.4)*q(c2,o1) + (0.4)*q(c3,o2) + (0.3)*q(c4,o2) + (0.1)*q(c5,o2) + (0.5)*y(o1,p1) + (0.8)*y(o2,p1) =G= 0 ; (LHS = 0.13)
     
pqlower(p1,q2)..  (0.6)*q(c1,o1) + (0.1)*q(c2,o1) + (0.55)*q(c3,o2) + (0.3)*q(c4,o2) + (0.27)*q(c5,o2) + (0.7)*y(o1,p1) + (1.12)*y(o2,p1) =G= 0 ; (LHS = 0.182)
     
pqlower(p1,q3)..  (0.4)*q(c1,o1) + (0.3)*q(c2,o1) + (0.3)*q(c3,o2) + (0.3)*q(c4,o2) + (0.4)*q(c5,o2) + (0.7)*y(o1,p1) + (1)*y(o2,p1) =G= 0 ; (LHS = 0.17)
     
REMAINING 21 ENTRIES SKIPPED


---- pqupper  =L=  maximum product quality

pqupper(p1,q1)..  (0.1)*q(c1,o1) + (0.4)*q(c2,o1) + (0.4)*q(c3,o2) + (0.3)*q(c4,o2) + (0.1)*q(c5,o2) - (2.5)*y(o1,p1) - (2.2)*y(o2,p1) =L= 0 ; (LHS = -0.47)
     
pqupper(p1,q2)..  (0.6)*q(c1,o1) + (0.1)*q(c2,o1) + (0.55)*q(c3,o2) + (0.3)*q(c4,o2) + (0.27)*q(c5,o2) - (2.3)*y(o1,p1) - (1.88)*y(o2,p1) =L= 0 ; (LHS = -0.418)
     
pqupper(p1,q3)..  (0.4)*q(c1,o1) + (0.3)*q(c2,o1) + (0.3)*q(c3,o2) + (0.3)*q(c4,o2) + (0.4)*q(c5,o2) - (2.55)*y(o1,p1) - (2.25)*y(o2,p1) =L= 0 ; (LHS = -0.48)
     
REMAINING 21 ENTRIES SKIPPED


---- fraction  =E=  fractions sum to one

fraction(o1)..  q(c1,o1) + q(c2,o1) =E= 1 ; (LHS = 0.2, INFES = 0.8 ****)
     
fraction(o2)..  q(c3,o2) + q(c4,o2) + q(c5,o2) =E= 1 ; (LHS = 0.3, INFES = 0.7 ****)
     

---- extensions  =E=  convexification constraints

extensions(o1,p1)..  (0.1)*q(c1,o1) + (0.1)*q(c2,o1) - (0.8)*y(o1,p1) =E= 0 ; (LHS = -0.08, INFES = 0.08 ****)
     
extensions(o1,p2)..  (0.1)*q(c1,o1) + (0.1)*q(c2,o1) - (0.8)*y(o1,p2) =E= 0 ; (LHS = -0.08, INFES = 0.08 ****)
     
extensions(o1,p3)..  (0.1)*q(c1,o1) + (0.1)*q(c2,o1) - (0.8)*y(o1,p3) =E= 0 ; (LHS = -0.08, INFES = 0.08 ****)
     
REMAINING 5 ENTRIES SKIPPED

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                    12/13/18 11:22:58 Page 117
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


---- q  pool quality from pooling raw materials

q(c1,o1)
                (.LO, .L, .UP, .M = 0, 0.1, 1, 0)
      (-2.8)    obj
       (0.4)    clower(c1)
       (0.4)    cupper(c1)
     (-74.6)    pszrlt(c1,o1)
       (0.1)    pqlower(p1,q1)
       (0.6)    pqlower(p1,q2)
       (0.4)    pqlower(p1,q3)
       (0.05)   pqlower(p1,q4)
       (0.5)    pqlower(p1,q5)
       (0.9)    pqlower(p1,q6)
       (0.1)    pqlower(p2,q1)
       (0.6)    pqlower(p2,q2)
       (0.4)    pqlower(p2,q3)
       (0.05)   pqlower(p2,q4)
       (0.5)    pqlower(p2,q5)
       (0.9)    pqlower(p2,q6)
       (0.1)    pqlower(p3,q1)
       (0.6)    pqlower(p3,q2)
       (0.4)    pqlower(p3,q3)
       (0.05)   pqlower(p3,q4)
       (0.5)    pqlower(p3,q5)
       (0.9)    pqlower(p3,q6)
       (0.1)    pqlower(p4,q1)
       (0.6)    pqlower(p4,q2)
       (0.4)    pqlower(p4,q3)
       (0.05)   pqlower(p4,q4)
       (0.5)    pqlower(p4,q5)
       (0.9)    pqlower(p4,q6)
       (0.1)    pqupper(p1,q1)
       (0.6)    pqupper(p1,q2)
       (0.4)    pqupper(p1,q3)
       (0.05)   pqupper(p1,q4)
       (0.5)    pqupper(p1,q5)
       (0.9)    pqupper(p1,q6)
       (0.1)    pqupper(p2,q1)
       (0.6)    pqupper(p2,q2)
       (0.4)    pqupper(p2,q3)
       (0.05)   pqupper(p2,q4)
       (0.5)    pqupper(p2,q5)
       (0.9)    pqupper(p2,q6)
       (0.1)    pqupper(p3,q1)
       (0.6)    pqupper(p3,q2)
       (0.4)    pqupper(p3,q3)
       (0.05)   pqupper(p3,q4)
       (0.5)    pqupper(p3,q5)
       (0.9)    pqupper(p3,q6)
       (0.1)    pqupper(p4,q1)
       (0.6)    pqupper(p4,q2)
       (0.4)    pqupper(p4,q3)
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                    12/13/18 11:22:58 Page 118
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


     q  pool quality from pooling raw materials

       (0.05)   pqupper(p4,q4)
       (0.5)    pqupper(p4,q5)
       (0.9)    pqupper(p4,q6)
        1       fraction(o1)
       (0.1)    extensions(o1,p1)
       (0.1)    extensions(o1,p2)
       (0.1)    extensions(o1,p3)
       (0.1)    extensions(o1,p4)

q(c2,o1)
                (.LO, .L, .UP, .M = 0, 0.1, 1, 0)
      (-1.2)    obj
       (0.4)    clower(c2)
       (0.4)    cupper(c2)
     (-74.6)    pszrlt(c2,o1)
       (0.4)    pqlower(p1,q1)
       (0.1)    pqlower(p1,q2)
       (0.3)    pqlower(p1,q3)
       (0.2)    pqlower(p1,q4)
       (0.4)    pqlower(p1,q5)
       (0.4)    pqlower(p1,q6)
       (0.4)    pqlower(p2,q1)
       (0.1)    pqlower(p2,q2)
       (0.3)    pqlower(p2,q3)
       (0.2)    pqlower(p2,q4)
       (0.4)    pqlower(p2,q5)
       (0.4)    pqlower(p2,q6)
       (0.4)    pqlower(p3,q1)
       (0.1)    pqlower(p3,q2)
       (0.3)    pqlower(p3,q3)
       (0.2)    pqlower(p3,q4)
       (0.4)    pqlower(p3,q5)
       (0.4)    pqlower(p3,q6)
       (0.4)    pqlower(p4,q1)
       (0.1)    pqlower(p4,q2)
       (0.3)    pqlower(p4,q3)
       (0.2)    pqlower(p4,q4)
       (0.4)    pqlower(p4,q5)
       (0.4)    pqlower(p4,q6)
       (0.4)    pqupper(p1,q1)
       (0.1)    pqupper(p1,q2)
       (0.3)    pqupper(p1,q3)
       (0.2)    pqupper(p1,q4)
       (0.4)    pqupper(p1,q5)
       (0.4)    pqupper(p1,q6)
       (0.4)    pqupper(p2,q1)
       (0.1)    pqupper(p2,q2)
       (0.3)    pqupper(p2,q3)
       (0.2)    pqupper(p2,q4)
       (0.4)    pqupper(p2,q5)
       (0.4)    pqupper(p2,q6)
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                    12/13/18 11:22:58 Page 119
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


     q  pool quality from pooling raw materials

       (0.4)    pqupper(p3,q1)
       (0.1)    pqupper(p3,q2)
       (0.3)    pqupper(p3,q3)
       (0.2)    pqupper(p3,q4)
       (0.4)    pqupper(p3,q5)
       (0.4)    pqupper(p3,q6)
       (0.4)    pqupper(p4,q1)
       (0.1)    pqupper(p4,q2)
       (0.3)    pqupper(p4,q3)
       (0.2)    pqupper(p4,q4)
       (0.4)    pqupper(p4,q5)
       (0.4)    pqupper(p4,q6)
        1       fraction(o1)
       (0.1)    extensions(o1,p1)
       (0.1)    extensions(o1,p2)
       (0.1)    extensions(o1,p3)
       (0.1)    extensions(o1,p4)

q(c3,o2)
                (.LO, .L, .UP, .M = 0, 0.1, 1, 0)
      (-0.8)    obj
       (0.4)    clower(c3)
       (0.4)    cupper(c3)
     (-74.6)    pszrlt(c3,o2)
       (0.4)    pqlower(p1,q1)
       (0.55)   pqlower(p1,q2)
       (0.3)    pqlower(p1,q3)
       (0.09)   pqlower(p1,q4)
       (0.7)    pqlower(p1,q5)
       (1)      pqlower(p1,q6)
       (0.4)    pqlower(p2,q1)
       (0.55)   pqlower(p2,q2)
       (0.3)    pqlower(p2,q3)
       (0.09)   pqlower(p2,q4)
       (0.7)    pqlower(p2,q5)
       (1)      pqlower(p2,q6)
       (0.4)    pqlower(p3,q1)
       (0.55)   pqlower(p3,q2)
       (0.3)    pqlower(p3,q3)
       (0.09)   pqlower(p3,q4)
       (0.7)    pqlower(p3,q5)
       (1)      pqlower(p3,q6)
       (0.4)    pqlower(p4,q1)
       (0.55)   pqlower(p4,q2)
       (0.3)    pqlower(p4,q3)
       (0.09)   pqlower(p4,q4)
       (0.7)    pqlower(p4,q5)
       (1)      pqlower(p4,q6)
       (0.4)    pqupper(p1,q1)
       (0.55)   pqupper(p1,q2)
       (0.3)    pqupper(p1,q3)
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                    12/13/18 11:22:58 Page 120
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


     q  pool quality from pooling raw materials

       (0.09)   pqupper(p1,q4)
       (0.7)    pqupper(p1,q5)
       (1)      pqupper(p1,q6)
       (0.4)    pqupper(p2,q1)
       (0.55)   pqupper(p2,q2)
       (0.3)    pqupper(p2,q3)
       (0.09)   pqupper(p2,q4)
       (0.7)    pqupper(p2,q5)
       (1)      pqupper(p2,q6)
       (0.4)    pqupper(p3,q1)
       (0.55)   pqupper(p3,q2)
       (0.3)    pqupper(p3,q3)
       (0.09)   pqupper(p3,q4)
       (0.7)    pqupper(p3,q5)
       (1)      pqupper(p3,q6)
       (0.4)    pqupper(p4,q1)
       (0.55)   pqupper(p4,q2)
       (0.3)    pqupper(p4,q3)
       (0.09)   pqupper(p4,q4)
       (0.7)    pqupper(p4,q5)
       (1)      pqupper(p4,q6)
        1       fraction(o2)
       (0.1)    extensions(o2,p1)
       (0.1)    extensions(o2,p2)
       (0.1)    extensions(o2,p3)
       (0.1)    extensions(o2,p4)

REMAINING 2 ENTRIES SKIPPED

---- y  flow from pool to product

y(o1,p1)
                (.LO, .L, .UP, .M = 0, 0.1, 10, 0)
      (15)      obj
       (0.1)    clower(c1)
       (0.1)    clower(c2)
       (0.1)    cupper(c1)
       (0.1)    cupper(c2)
       (0.1)    pszrlt(c1,o1)
       (0.1)    pszrlt(c2,o1)
        1       plower(p1)
        1       pupper(p1)
       (0.5)    pqlower(p1,q1)
       (0.7)    pqlower(p1,q2)
       (0.7)    pqlower(p1,q3)
       (0.25)   pqlower(p1,q4)
       (0.9)    pqlower(p1,q5)
       (1.3)    pqlower(p1,q6)
      (-2.5)    pqupper(p1,q1)
      (-2.3)    pqupper(p1,q2)
      (-2.55)   pqupper(p1,q3)
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                    12/13/18 11:22:58 Page 121
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


     y  flow from pool to product

      (-0.5)    pqupper(p1,q4)
      (-5.1)    pqupper(p1,q5)
      (-3.7)    pqupper(p1,q6)
      (-0.8)    extensions(o1,p1)

y(o1,p2)
                (.LO, .L, .UP, .M = 0, 0.1, 25, 0)
      (24)      obj
       (0.1)    clower(c1)
       (0.1)    clower(c2)
       (0.1)    cupper(c1)
       (0.1)    cupper(c2)
       (0.1)    pszrlt(c1,o1)
       (0.1)    pszrlt(c2,o1)
        1       plower(p2)
        1       pupper(p2)
       (0.5)    pqlower(p2,q1)
       (0.7)    pqlower(p2,q2)
       (0.7)    pqlower(p2,q3)
       (0.25)   pqlower(p2,q4)
       (0.9)    pqlower(p2,q5)
       (1.3)    pqlower(p2,q6)
      (-3.5)    pqupper(p2,q1)
      (-1.8)    pqupper(p2,q2)
      (-2.8)    pqupper(p2,q3)
      (-1.25)   pqupper(p2,q4)
      (-6.1)    pqupper(p2,q5)
      (-4.7)    pqupper(p2,q6)
      (-0.8)    extensions(o1,p2)

y(o1,p3)
                (.LO, .L, .UP, .M = 0, 0.1, 30, 0)
      (14)      obj
       (0.1)    clower(c1)
       (0.1)    clower(c2)
       (0.1)    cupper(c1)
       (0.1)    cupper(c2)
       (0.1)    pszrlt(c1,o1)
       (0.1)    pszrlt(c2,o1)
        1       plower(p3)
        1       pupper(p3)
       (0.5)    pqlower(p3,q1)
       (0.7)    pqlower(p3,q2)
       (0.7)    pqlower(p3,q3)
       (0.25)   pqlower(p3,q4)
       (0.9)    pqlower(p3,q5)
       (1.3)    pqlower(p3,q6)
      (-1)      pqupper(p3,q1)
      (-4.8)    pqupper(p3,q2)
      (-3.2)    pqupper(p3,q3)
      (-0.55)   pqupper(p3,q4)
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                    12/13/18 11:22:58 Page 122
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


     y  flow from pool to product

      (-6.1)    pqupper(p3,q5)
      (-4.7)    pqupper(p3,q6)
      (-0.8)    extensions(o1,p3)

REMAINING 5 ENTRIES SKIPPED

---- cost  total cost

cost
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       obj

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                    12/13/18 11:22:58 Page 123
The Pooling Problem (POOL,SEQ=254)
Model Statistics    SOLVE poolprob Using NLP From line 947


LOOPS                                 case   adhya2


MODEL STATISTICS

BLOCKS OF EQUATIONS          10     SINGLE EQUATIONS           82
BLOCKS OF VARIABLES           3     SINGLE VARIABLES           14
NON ZERO ELEMENTS           474     NON LINEAR N-Z            452
DERIVATIVE POOL              20     CONSTANT POOL              43
CODE LENGTH               1,452


GENERATION TIME      =        0.003 SECONDS      3 MB  24.7.4 r58773 LEX-LEG


EXECUTION TIME       =        0.003 SECONDS      3 MB  24.7.4 r58773 LEX-LEG
               L O O P S               case adhya2

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                    12/13/18 11:22:58 Page 124
The Pooling Problem (POOL,SEQ=254)
Solution Report     SOLVE poolprob Using NLP From line 947


               S O L V E      S U M M A R Y

     MODEL   poolprob            OBJECTIVE  cost
     TYPE    NLP                 DIRECTION  MINIMIZE
     SOLVER  CONVERT             FROM LINE  947

**** SOLVER STATUS     1 Normal Completion         
**** MODEL STATUS      14 No Solution Returned     
**** OBJECTIVE VALUE                0.0000

 RESOURCE USAGE, LIMIT          0.000      1000.000
 ITERATION COUNT, LIMIT         0    2000000000
 EVALUATION ERRORS              0             0

Convert 2.0      24.7.4 r58773 Released Sep 19, 2016 LEG x86 64bit/Linux      

--- Using Option File
Reading parameter(s) from "/home/renigijus/gams/opt-mod-lib/gamslib/pool/convert.opt"
>>  ampl pool-scalar.mod
Finished reading from "/home/renigijus/gams/opt-mod-lib/gamslib/pool/convert.opt"
Ampl      : pool-scalar.mod


No solution returned
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                    12/13/18 11:22:58 Page 125
The Pooling Problem (POOL,SEQ=254)
Equation Listing    SOLVE poolprob Using NLP From line 947


---- obj  =E=  objective function

obj..  - (2.8)*q(c1,o1) - (1.2)*q(c2,o1) - (0.8)*q(c3,o2) - (4)*q(c4,o2) - (2)*q(c5,o2) - (2)*q(c6,o3) - (3.6)*q(c7,o3) - (4.4)*q(c8,o3) + (15)*y(o1,p1) + (24)*y(o1,p2) + (14)*y(o1,p3) + (9)*y(o1,p4) + (14.3)*y(o2,p1) + (23.3)*y(o2,p2) + (13.3)*y(o2,p3)
     
      + (8.3)*y(o2,p4) + (13.5)*y(o3,p1) + (22.5)*y(o3,p2) + (12.5)*y(o3,p3) + (7.5)*y(o3,p4) + cost =E= 0 ; (LHS = 17.72, INFES = 17.72 ****)
     

---- clower  =G=  lower bound component availability

clower(c1)..  (0.4)*q(c1,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) =G= 0 ; (LHS = 0.04)
     
clower(c2)..  (0.4)*q(c2,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) =G= 0 ; (LHS = 0.04)
     
clower(c3)..  (0.4)*q(c3,o2) + (0.1)*y(o2,p1) + (0.1)*y(o2,p2) + (0.1)*y(o2,p3) + (0.1)*y(o2,p4) =G= 0 ; (LHS = 0.04)
     
REMAINING 5 ENTRIES SKIPPED


---- cupper  =L=  upper bound component availability

cupper(c1)..  (0.4)*q(c1,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) =L= 75 ; (LHS = 0.0400000000000063)
     
cupper(c2)..  (0.4)*q(c2,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) =L= 75 ; (LHS = 0.0400000000000063)
     
cupper(c3)..  (0.4)*q(c3,o2) + (0.1)*y(o2,p1) + (0.1)*y(o2,p2) + (0.1)*y(o2,p3) + (0.1)*y(o2,p4) =L= 75 ; (LHS = 0.0400000000000063)
     
REMAINING 5 ENTRIES SKIPPED


---- pszrlt  =L=  ss-rlt on pool size constraints

pszrlt(c1,o1)..  - (74.6)*q(c1,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) =L= 0 ; (LHS = -7.46)
     
pszrlt(c2,o1)..  - (74.6)*q(c2,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) =L= 0 ; (LHS = -7.46)
     
pszrlt(c3,o2)..  - (74.6)*q(c3,o2) + (0.1)*y(o2,p1) + (0.1)*y(o2,p2) + (0.1)*y(o2,p3) + (0.1)*y(o2,p4) =L= 0 ; (LHS = -7.46)
     
REMAINING 5 ENTRIES SKIPPED


---- plower  =G=  minimum product production

plower(p1)..  y(o1,p1) + y(o2,p1) + y(o3,p1) =G= 0 ; (LHS = 0.3)
     
plower(p2)..  y(o1,p2) + y(o2,p2) + y(o3,p2) =G= 0 ; (LHS = 0.3)
     
plower(p3)..  y(o1,p3) + y(o2,p3) + y(o3,p3) =G= 0 ; (LHS = 0.3)
     
REMAINING ENTRY SKIPPED

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                    12/13/18 11:22:58 Page 126
The Pooling Problem (POOL,SEQ=254)
Equation Listing    SOLVE poolprob Using NLP From line 947


---- pupper  =L=  maximum product demand

pupper(p1)..  y(o1,p1) + y(o2,p1) + y(o3,p1) =L= 10 ; (LHS = 0.300000000000001)
     
pupper(p2)..  y(o1,p2) + y(o2,p2) + y(o3,p2) =L= 25 ; (LHS = 0.300000000000001)
     
pupper(p3)..  y(o1,p3) + y(o2,p3) + y(o3,p3) =L= 30 ; (LHS = 0.300000000000001)
     
REMAINING ENTRY SKIPPED


---- pqlower  =G=  minimum product quality requirement

pqlower(p1,q1)..  (0.1)*q(c1,o1) + (0.4)*q(c2,o1) + (0.4)*q(c3,o2) + (0.3)*q(c4,o2) + (0.1)*q(c5,o2) + (0.18)*q(c6,o3) + (0.5)*q(c7,o3) + (0.3)*q(c8,o3) + (0.5)*y(o1,p1) + (0.8)*y(o2,p1) + (0.98)*y(o3,p1) =G= 0 ; (LHS = 0.228)
     
pqlower(p1,q2)..  (0.6)*q(c1,o1) + (0.1)*q(c2,o1) + (0.55)*q(c3,o2) + (0.3)*q(c4,o2) + (0.27)*q(c5,o2) + (0.27)*q(c6,o3) + (0.1)*q(c7,o3) + (0.3)*q(c8,o3) + (0.7)*y(o1,p1) + (1.12)*y(o2,p1) + (0.67)*y(o3,p1) =G= 0 ; (LHS = 0.249)
     
pqlower(p1,q3)..  (0.4)*q(c1,o1) + (0.3)*q(c2,o1) + (0.3)*q(c3,o2) + (0.3)*q(c4,o2) + (0.4)*q(c5,o2) + (0.4)*q(c6,o3) + (0.17)*q(c7,o3) + (0.3)*q(c8,o3) + (0.7)*y(o1,p1) + (1)*y(o2,p1) + (0.87)*y(o3,p1) =G= 0 ; (LHS = 0.257)
     
REMAINING 21 ENTRIES SKIPPED


---- pqupper  =L=  maximum product quality

pqupper(p1,q1)..  (0.1)*q(c1,o1) + (0.4)*q(c2,o1) + (0.4)*q(c3,o2) + (0.3)*q(c4,o2) + (0.1)*q(c5,o2) + (0.18)*q(c6,o3) + (0.5)*q(c7,o3) + (0.3)*q(c8,o3) - (2.5)*y(o1,p1) - (2.2)*y(o2,p1) - (2.02)*y(o3,p1) =L= 0 ; (LHS = -0.672)
     
pqupper(p1,q2)..  (0.6)*q(c1,o1) + (0.1)*q(c2,o1) + (0.55)*q(c3,o2) + (0.3)*q(c4,o2) + (0.27)*q(c5,o2) + (0.27)*q(c6,o3) + (0.1)*q(c7,o3) + (0.3)*q(c8,o3) - (2.3)*y(o1,p1) - (1.88)*y(o2,p1) - (2.33)*y(o3,p1) =L= 0 ; (LHS = -0.651)
     
pqupper(p1,q3)..  (0.4)*q(c1,o1) + (0.3)*q(c2,o1) + (0.3)*q(c3,o2) + (0.3)*q(c4,o2) + (0.4)*q(c5,o2) + (0.4)*q(c6,o3) + (0.17)*q(c7,o3) + (0.3)*q(c8,o3) - (2.55)*y(o1,p1) - (2.25)*y(o2,p1) - (2.38)*y(o3,p1) =L= 0 ; (LHS = -0.718)
     
REMAINING 21 ENTRIES SKIPPED


---- fraction  =E=  fractions sum to one

fraction(o1)..  q(c1,o1) + q(c2,o1) =E= 1 ; (LHS = 0.2, INFES = 0.8 ****)
     
fraction(o2)..  q(c3,o2) + q(c4,o2) + q(c5,o2) =E= 1 ; (LHS = 0.3, INFES = 0.7 ****)
     
fraction(o3)..  q(c6,o3) + q(c7,o3) + q(c8,o3) =E= 1 ; (LHS = 0.3, INFES = 0.7 ****)
     

---- extensions  =E=  convexification constraints

extensions(o1,p1)..  (0.1)*q(c1,o1) + (0.1)*q(c2,o1) - (0.8)*y(o1,p1) =E= 0 ; (LHS = -0.08, INFES = 0.08 ****)
     
extensions(o1,p2)..  (0.1)*q(c1,o1) + (0.1)*q(c2,o1) - (0.8)*y(o1,p2) =E= 0 ; (LHS = -0.08, INFES = 0.08 ****)
     
extensions(o1,p3)..  (0.1)*q(c1,o1) + (0.1)*q(c2,o1) - (0.8)*y(o1,p3) =E= 0 ; (LHS = -0.08, INFES = 0.08 ****)
     
REMAINING 9 ENTRIES SKIPPED

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                    12/13/18 11:22:58 Page 127
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


---- q  pool quality from pooling raw materials

q(c1,o1)
                (.LO, .L, .UP, .M = 0, 0.1, 1, 0)
      (-2.8)    obj
       (0.4)    clower(c1)
       (0.4)    cupper(c1)
     (-74.6)    pszrlt(c1,o1)
       (0.1)    pqlower(p1,q1)
       (0.6)    pqlower(p1,q2)
       (0.4)    pqlower(p1,q3)
       (0.05)   pqlower(p1,q4)
       (0.5)    pqlower(p1,q5)
       (0.9)    pqlower(p1,q6)
       (0.1)    pqlower(p2,q1)
       (0.6)    pqlower(p2,q2)
       (0.4)    pqlower(p2,q3)
       (0.05)   pqlower(p2,q4)
       (0.5)    pqlower(p2,q5)
       (0.9)    pqlower(p2,q6)
       (0.1)    pqlower(p3,q1)
       (0.6)    pqlower(p3,q2)
       (0.4)    pqlower(p3,q3)
       (0.05)   pqlower(p3,q4)
       (0.5)    pqlower(p3,q5)
       (0.9)    pqlower(p3,q6)
       (0.1)    pqlower(p4,q1)
       (0.6)    pqlower(p4,q2)
       (0.4)    pqlower(p4,q3)
       (0.05)   pqlower(p4,q4)
       (0.5)    pqlower(p4,q5)
       (0.9)    pqlower(p4,q6)
       (0.1)    pqupper(p1,q1)
       (0.6)    pqupper(p1,q2)
       (0.4)    pqupper(p1,q3)
       (0.05)   pqupper(p1,q4)
       (0.5)    pqupper(p1,q5)
       (0.9)    pqupper(p1,q6)
       (0.1)    pqupper(p2,q1)
       (0.6)    pqupper(p2,q2)
       (0.4)    pqupper(p2,q3)
       (0.05)   pqupper(p2,q4)
       (0.5)    pqupper(p2,q5)
       (0.9)    pqupper(p2,q6)
       (0.1)    pqupper(p3,q1)
       (0.6)    pqupper(p3,q2)
       (0.4)    pqupper(p3,q3)
       (0.05)   pqupper(p3,q4)
       (0.5)    pqupper(p3,q5)
       (0.9)    pqupper(p3,q6)
       (0.1)    pqupper(p4,q1)
       (0.6)    pqupper(p4,q2)
       (0.4)    pqupper(p4,q3)
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                    12/13/18 11:22:58 Page 128
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


     q  pool quality from pooling raw materials

       (0.05)   pqupper(p4,q4)
       (0.5)    pqupper(p4,q5)
       (0.9)    pqupper(p4,q6)
        1       fraction(o1)
       (0.1)    extensions(o1,p1)
       (0.1)    extensions(o1,p2)
       (0.1)    extensions(o1,p3)
       (0.1)    extensions(o1,p4)

q(c2,o1)
                (.LO, .L, .UP, .M = 0, 0.1, 1, 0)
      (-1.2)    obj
       (0.4)    clower(c2)
       (0.4)    cupper(c2)
     (-74.6)    pszrlt(c2,o1)
       (0.4)    pqlower(p1,q1)
       (0.1)    pqlower(p1,q2)
       (0.3)    pqlower(p1,q3)
       (0.2)    pqlower(p1,q4)
       (0.4)    pqlower(p1,q5)
       (0.4)    pqlower(p1,q6)
       (0.4)    pqlower(p2,q1)
       (0.1)    pqlower(p2,q2)
       (0.3)    pqlower(p2,q3)
       (0.2)    pqlower(p2,q4)
       (0.4)    pqlower(p2,q5)
       (0.4)    pqlower(p2,q6)
       (0.4)    pqlower(p3,q1)
       (0.1)    pqlower(p3,q2)
       (0.3)    pqlower(p3,q3)
       (0.2)    pqlower(p3,q4)
       (0.4)    pqlower(p3,q5)
       (0.4)    pqlower(p3,q6)
       (0.4)    pqlower(p4,q1)
       (0.1)    pqlower(p4,q2)
       (0.3)    pqlower(p4,q3)
       (0.2)    pqlower(p4,q4)
       (0.4)    pqlower(p4,q5)
       (0.4)    pqlower(p4,q6)
       (0.4)    pqupper(p1,q1)
       (0.1)    pqupper(p1,q2)
       (0.3)    pqupper(p1,q3)
       (0.2)    pqupper(p1,q4)
       (0.4)    pqupper(p1,q5)
       (0.4)    pqupper(p1,q6)
       (0.4)    pqupper(p2,q1)
       (0.1)    pqupper(p2,q2)
       (0.3)    pqupper(p2,q3)
       (0.2)    pqupper(p2,q4)
       (0.4)    pqupper(p2,q5)
       (0.4)    pqupper(p2,q6)
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                    12/13/18 11:22:58 Page 129
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


     q  pool quality from pooling raw materials

       (0.4)    pqupper(p3,q1)
       (0.1)    pqupper(p3,q2)
       (0.3)    pqupper(p3,q3)
       (0.2)    pqupper(p3,q4)
       (0.4)    pqupper(p3,q5)
       (0.4)    pqupper(p3,q6)
       (0.4)    pqupper(p4,q1)
       (0.1)    pqupper(p4,q2)
       (0.3)    pqupper(p4,q3)
       (0.2)    pqupper(p4,q4)
       (0.4)    pqupper(p4,q5)
       (0.4)    pqupper(p4,q6)
        1       fraction(o1)
       (0.1)    extensions(o1,p1)
       (0.1)    extensions(o1,p2)
       (0.1)    extensions(o1,p3)
       (0.1)    extensions(o1,p4)

q(c3,o2)
                (.LO, .L, .UP, .M = 0, 0.1, 1, 0)
      (-0.8)    obj
       (0.4)    clower(c3)
       (0.4)    cupper(c3)
     (-74.6)    pszrlt(c3,o2)
       (0.4)    pqlower(p1,q1)
       (0.55)   pqlower(p1,q2)
       (0.3)    pqlower(p1,q3)
       (0.09)   pqlower(p1,q4)
       (0.7)    pqlower(p1,q5)
       (1)      pqlower(p1,q6)
       (0.4)    pqlower(p2,q1)
       (0.55)   pqlower(p2,q2)
       (0.3)    pqlower(p2,q3)
       (0.09)   pqlower(p2,q4)
       (0.7)    pqlower(p2,q5)
       (1)      pqlower(p2,q6)
       (0.4)    pqlower(p3,q1)
       (0.55)   pqlower(p3,q2)
       (0.3)    pqlower(p3,q3)
       (0.09)   pqlower(p3,q4)
       (0.7)    pqlower(p3,q5)
       (1)      pqlower(p3,q6)
       (0.4)    pqlower(p4,q1)
       (0.55)   pqlower(p4,q2)
       (0.3)    pqlower(p4,q3)
       (0.09)   pqlower(p4,q4)
       (0.7)    pqlower(p4,q5)
       (1)      pqlower(p4,q6)
       (0.4)    pqupper(p1,q1)
       (0.55)   pqupper(p1,q2)
       (0.3)    pqupper(p1,q3)
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                    12/13/18 11:22:58 Page 130
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


     q  pool quality from pooling raw materials

       (0.09)   pqupper(p1,q4)
       (0.7)    pqupper(p1,q5)
       (1)      pqupper(p1,q6)
       (0.4)    pqupper(p2,q1)
       (0.55)   pqupper(p2,q2)
       (0.3)    pqupper(p2,q3)
       (0.09)   pqupper(p2,q4)
       (0.7)    pqupper(p2,q5)
       (1)      pqupper(p2,q6)
       (0.4)    pqupper(p3,q1)
       (0.55)   pqupper(p3,q2)
       (0.3)    pqupper(p3,q3)
       (0.09)   pqupper(p3,q4)
       (0.7)    pqupper(p3,q5)
       (1)      pqupper(p3,q6)
       (0.4)    pqupper(p4,q1)
       (0.55)   pqupper(p4,q2)
       (0.3)    pqupper(p4,q3)
       (0.09)   pqupper(p4,q4)
       (0.7)    pqupper(p4,q5)
       (1)      pqupper(p4,q6)
        1       fraction(o2)
       (0.1)    extensions(o2,p1)
       (0.1)    extensions(o2,p2)
       (0.1)    extensions(o2,p3)
       (0.1)    extensions(o2,p4)

REMAINING 5 ENTRIES SKIPPED

---- y  flow from pool to product

y(o1,p1)
                (.LO, .L, .UP, .M = 0, 0.1, 10, 0)
      (15)      obj
       (0.1)    clower(c1)
       (0.1)    clower(c2)
       (0.1)    cupper(c1)
       (0.1)    cupper(c2)
       (0.1)    pszrlt(c1,o1)
       (0.1)    pszrlt(c2,o1)
        1       plower(p1)
        1       pupper(p1)
       (0.5)    pqlower(p1,q1)
       (0.7)    pqlower(p1,q2)
       (0.7)    pqlower(p1,q3)
       (0.25)   pqlower(p1,q4)
       (0.9)    pqlower(p1,q5)
       (1.3)    pqlower(p1,q6)
      (-2.5)    pqupper(p1,q1)
      (-2.3)    pqupper(p1,q2)
      (-2.55)   pqupper(p1,q3)
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                    12/13/18 11:22:58 Page 131
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


     y  flow from pool to product

      (-0.5)    pqupper(p1,q4)
      (-5.1)    pqupper(p1,q5)
      (-3.7)    pqupper(p1,q6)
      (-0.8)    extensions(o1,p1)

y(o1,p2)
                (.LO, .L, .UP, .M = 0, 0.1, 25, 0)
      (24)      obj
       (0.1)    clower(c1)
       (0.1)    clower(c2)
       (0.1)    cupper(c1)
       (0.1)    cupper(c2)
       (0.1)    pszrlt(c1,o1)
       (0.1)    pszrlt(c2,o1)
        1       plower(p2)
        1       pupper(p2)
       (0.5)    pqlower(p2,q1)
       (0.7)    pqlower(p2,q2)
       (0.7)    pqlower(p2,q3)
       (0.25)   pqlower(p2,q4)
       (0.9)    pqlower(p2,q5)
       (1.3)    pqlower(p2,q6)
      (-3.5)    pqupper(p2,q1)
      (-1.8)    pqupper(p2,q2)
      (-2.8)    pqupper(p2,q3)
      (-1.25)   pqupper(p2,q4)
      (-6.1)    pqupper(p2,q5)
      (-4.7)    pqupper(p2,q6)
      (-0.8)    extensions(o1,p2)

y(o1,p3)
                (.LO, .L, .UP, .M = 0, 0.1, 30, 0)
      (14)      obj
       (0.1)    clower(c1)
       (0.1)    clower(c2)
       (0.1)    cupper(c1)
       (0.1)    cupper(c2)
       (0.1)    pszrlt(c1,o1)
       (0.1)    pszrlt(c2,o1)
        1       plower(p3)
        1       pupper(p3)
       (0.5)    pqlower(p3,q1)
       (0.7)    pqlower(p3,q2)
       (0.7)    pqlower(p3,q3)
       (0.25)   pqlower(p3,q4)
       (0.9)    pqlower(p3,q5)
       (1.3)    pqlower(p3,q6)
      (-1)      pqupper(p3,q1)
      (-4.8)    pqupper(p3,q2)
      (-3.2)    pqupper(p3,q3)
      (-0.55)   pqupper(p3,q4)
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                    12/13/18 11:22:58 Page 132
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


     y  flow from pool to product

      (-6.1)    pqupper(p3,q5)
      (-4.7)    pqupper(p3,q6)
      (-0.8)    extensions(o1,p3)

REMAINING 9 ENTRIES SKIPPED

---- cost  total cost

cost
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       obj

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                    12/13/18 11:22:58 Page 133
The Pooling Problem (POOL,SEQ=254)
Model Statistics    SOLVE poolprob Using NLP From line 947


LOOPS                                 case   adhya3


MODEL STATISTICS

BLOCKS OF EQUATIONS          10     SINGLE EQUATIONS           96
BLOCKS OF VARIABLES           3     SINGLE VARIABLES           21
NON ZERO ELEMENTS           745     NON LINEAR N-Z            712
DERIVATIVE POOL              20     CONSTANT POOL              49
CODE LENGTH               2,283


GENERATION TIME      =        0.004 SECONDS      3 MB  24.7.4 r58773 LEX-LEG


EXECUTION TIME       =        0.004 SECONDS      3 MB  24.7.4 r58773 LEX-LEG
               L O O P S               case adhya3

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                    12/13/18 11:22:58 Page 134
The Pooling Problem (POOL,SEQ=254)
Solution Report     SOLVE poolprob Using NLP From line 947


               S O L V E      S U M M A R Y

     MODEL   poolprob            OBJECTIVE  cost
     TYPE    NLP                 DIRECTION  MINIMIZE
     SOLVER  CONVERT             FROM LINE  947

**** SOLVER STATUS     1 Normal Completion         
**** MODEL STATUS      14 No Solution Returned     
**** OBJECTIVE VALUE                0.0000

 RESOURCE USAGE, LIMIT          0.000      1000.000
 ITERATION COUNT, LIMIT         0    2000000000
 EVALUATION ERRORS              0             0

Convert 2.0      24.7.4 r58773 Released Sep 19, 2016 LEG x86 64bit/Linux      

--- Using Option File
Reading parameter(s) from "/home/renigijus/gams/opt-mod-lib/gamslib/pool/convert.opt"
>>  ampl pool-scalar.mod
Finished reading from "/home/renigijus/gams/opt-mod-lib/gamslib/pool/convert.opt"
Ampl      : pool-scalar.mod


No solution returned
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                    12/13/18 11:22:58 Page 135
The Pooling Problem (POOL,SEQ=254)
Equation Listing    SOLVE poolprob Using NLP From line 947


---- obj  =E=  objective function

obj..  - (7.5)*q(c1,o1) - (3.5)*q(c2,o1) - (2)*q(c3,o1) - (2.5)*q(c4,o1) - (3)*q(c5,o2) - (1.5)*q(c6,o2) - (2.5)*q(c7,o2) - (2.5)*q(c8,o2) + (6.9)*y(o1,p1) + (21.9)*y(o1,p2) + (26.9)*y(o1,p3) + (2.9)*y(o1,p4) + (6.9)*y(o1,p5) + (8.1)*y(o2,p1)
     
      + (23.1)*y(o2,p2) + (28.1)*y(o2,p3) + (4.1)*y(o2,p4) + (8.1)*y(o2,p5) + cost =E= 0 ; (LHS = 13.7, INFES = 13.7 ****)
     

---- clower  =G=  lower bound component availability

clower(c1)..  (0.5)*q(c1,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) + (0.1)*y(o1,p5) =G= 0 ; (LHS = 0.05)
     
clower(c2)..  (0.5)*q(c2,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) + (0.1)*y(o1,p5) =G= 0 ; (LHS = 0.05)
     
clower(c3)..  (0.5)*q(c3,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) + (0.1)*y(o1,p5) =G= 0 ; (LHS = 0.05)
     
REMAINING 5 ENTRIES SKIPPED


---- cupper  =L=  upper bound component availability

cupper(c1)..  (0.5)*q(c1,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) + (0.1)*y(o1,p5) =L= 85 ; (LHS = 0.0499999999999972)
     
cupper(c2)..  (0.5)*q(c2,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) + (0.1)*y(o1,p5) =L= 85 ; (LHS = 0.0499999999999972)
     
cupper(c3)..  (0.5)*q(c3,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) + (0.1)*y(o1,p5) =L= 85 ; (LHS = 0.0499999999999972)
     
REMAINING 5 ENTRIES SKIPPED


---- pszrlt  =L=  ss-rlt on pool size constraints

pszrlt(c1,o1)..  - (84.5)*q(c1,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) + (0.1)*y(o1,p5) =L= 0 ; (LHS = -8.45)
     
pszrlt(c2,o1)..  - (84.5)*q(c2,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) + (0.1)*y(o1,p5) =L= 0 ; (LHS = -8.45)
     
pszrlt(c3,o1)..  - (84.5)*q(c3,o1) + (0.1)*y(o1,p1) + (0.1)*y(o1,p2) + (0.1)*y(o1,p3) + (0.1)*y(o1,p4) + (0.1)*y(o1,p5) =L= 0 ; (LHS = -8.45)
     
REMAINING 5 ENTRIES SKIPPED


---- plower  =G=  minimum product production

plower(p1)..  y(o1,p1) + y(o2,p1) =G= 0 ; (LHS = 0.2)
     
plower(p2)..  y(o1,p2) + y(o2,p2) =G= 0 ; (LHS = 0.2)
     
plower(p3)..  y(o1,p3) + y(o2,p3) =G= 0 ; (LHS = 0.2)
     
REMAINING 2 ENTRIES SKIPPED

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                    12/13/18 11:22:58 Page 136
The Pooling Problem (POOL,SEQ=254)
Equation Listing    SOLVE poolprob Using NLP From line 947


---- pupper  =L=  maximum product demand

pupper(p1)..  y(o1,p1) + y(o2,p1) =L= 15 ; (LHS = 0.199999999999999)
     
pupper(p2)..  y(o1,p2) + y(o2,p2) =L= 25 ; (LHS = 0.199999999999999)
     
pupper(p3)..  y(o1,p3) + y(o2,p3) =L= 10 ; (LHS = 0.199999999999999)
     
REMAINING 2 ENTRIES SKIPPED


---- pqlower  =G=  minimum product quality requirement

pqlower(p1,q1)..  (0.05)*q(c1,o1) + (0.14)*q(c2,o1) + (0.12)*q(c3,o1) + (0.15)*q(c4,o1) + (0.16)*q(c5,o2) + (0.12)*q(c6,o2) + (0.15)*q(c7,o2) + (0.14)*q(c8,o2) + (0.46)*y(o1,p1) + (0.57)*y(o2,p1) =G= 0 ; (LHS = 0.103)
     
pqlower(p1,q2)..  (0.19)*q(c1,o1) + (0.18)*q(c2,o1) + (0.19)*q(c3,o1) + (0.12)*q(c4,o1) + (0.18)*q(c5,o2) + (0.11)*q(c6,o2) + (0.15)*q(c7,o2) + (0.16)*q(c8,o2) + (0.68)*y(o1,p1) + (0.6)*y(o2,p1) =G= 0 ; (LHS = 0.128)
     
pqlower(p1,q3)..  (0.13)*q(c1,o1) + (0.17)*q(c2,o1) + (0.14)*q(c3,o1) + (0.17)*q(c4,o1) + (0.16)*q(c5,o2) + (0.14)*q(c6,o2) + (0.15)*q(c7,o2) + (0.12)*q(c8,o2) + (0.61)*y(o1,p1) + (0.57)*y(o2,p1) =G= 0 ; (LHS = 0.118)
     
REMAINING 17 ENTRIES SKIPPED


---- pqupper  =L=  maximum product quality

pqupper(p1,q1)..  (0.05)*q(c1,o1) + (0.14)*q(c2,o1) + (0.12)*q(c3,o1) + (0.15)*q(c4,o1) + (0.16)*q(c5,o2) + (0.12)*q(c6,o2) + (0.15)*q(c7,o2) + (0.14)*q(c8,o2) - (0.74)*y(o1,p1) - (0.63)*y(o2,p1) =L= 0 ; (LHS = -0.137)
     
pqupper(p1,q2)..  (0.19)*q(c1,o1) + (0.18)*q(c2,o1) + (0.19)*q(c3,o1) + (0.12)*q(c4,o1) + (0.18)*q(c5,o2) + (0.11)*q(c6,o2) + (0.15)*q(c7,o2) + (0.16)*q(c8,o2) - (1.02)*y(o1,p1) - (1.1)*y(o2,p1) =L= 0 ; (LHS = -0.212)
     
pqupper(p1,q3)..  (0.13)*q(c1,o1) + (0.17)*q(c2,o1) + (0.14)*q(c3,o1) + (0.17)*q(c4,o1) + (0.16)*q(c5,o2) + (0.14)*q(c6,o2) + (0.15)*q(c7,o2) + (0.12)*q(c8,o2) - (0.79)*y(o1,p1) - (0.83)*y(o2,p1) =L= 0 ; (LHS = -0.162)
     
REMAINING 17 ENTRIES SKIPPED


---- fraction  =E=  fractions sum to one

fraction(o1)..  q(c1,o1) + q(c2,o1) + q(c3,o1) + q(c4,o1) =E= 1 ; (LHS = 0.4, INFES = 0.6 ****)
     
fraction(o2)..  q(c5,o2) + q(c6,o2) + q(c7,o2) + q(c8,o2) =E= 1 ; (LHS = 0.4, INFES = 0.6 ****)
     

---- extensions  =E=  convexification constraints

extensions(o1,p1)..  (0.1)*q(c1,o1) + (0.1)*q(c2,o1) + (0.1)*q(c3,o1) + (0.1)*q(c4,o1) - (0.6)*y(o1,p1) =E= 0 ; (LHS = -0.06, INFES = 0.06 ****)
     
extensions(o1,p2)..  (0.1)*q(c1,o1) + (0.1)*q(c2,o1) + (0.1)*q(c3,o1) + (0.1)*q(c4,o1) - (0.6)*y(o1,p2) =E= 0 ; (LHS = -0.06, INFES = 0.06 ****)
     
extensions(o1,p3)..  (0.1)*q(c1,o1) + (0.1)*q(c2,o1) + (0.1)*q(c3,o1) + (0.1)*q(c4,o1) - (0.6)*y(o1,p3) =E= 0 ; (LHS = -0.06, INFES = 0.06 ****)
     
REMAINING 7 ENTRIES SKIPPED

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                    12/13/18 11:22:58 Page 137
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


---- q  pool quality from pooling raw materials

q(c1,o1)
                (.LO, .L, .UP, .M = 0, 0.1, 1, 0)
      (-7.5)    obj
       (0.5)    clower(c1)
       (0.5)    cupper(c1)
     (-84.5)    pszrlt(c1,o1)
       (0.05)   pqlower(p1,q1)
       (0.19)   pqlower(p1,q2)
       (0.13)   pqlower(p1,q3)
       (0.1)    pqlower(p1,q4)
       (0.05)   pqlower(p2,q1)
       (0.19)   pqlower(p2,q2)
       (0.13)   pqlower(p2,q3)
       (0.1)    pqlower(p2,q4)
       (0.05)   pqlower(p3,q1)
       (0.19)   pqlower(p3,q2)
       (0.13)   pqlower(p3,q3)
       (0.1)    pqlower(p3,q4)
       (0.05)   pqlower(p4,q1)
       (0.19)   pqlower(p4,q2)
       (0.13)   pqlower(p4,q3)
       (0.1)    pqlower(p4,q4)
       (0.05)   pqlower(p5,q1)
       (0.19)   pqlower(p5,q2)
       (0.13)   pqlower(p5,q3)
       (0.1)    pqlower(p5,q4)
       (0.05)   pqupper(p1,q1)
       (0.19)   pqupper(p1,q2)
       (0.13)   pqupper(p1,q3)
       (0.1)    pqupper(p1,q4)
       (0.05)   pqupper(p2,q1)
       (0.19)   pqupper(p2,q2)
       (0.13)   pqupper(p2,q3)
       (0.1)    pqupper(p2,q4)
       (0.05)   pqupper(p3,q1)
       (0.19)   pqupper(p3,q2)
       (0.13)   pqupper(p3,q3)
       (0.1)    pqupper(p3,q4)
       (0.05)   pqupper(p4,q1)
       (0.19)   pqupper(p4,q2)
       (0.13)   pqupper(p4,q3)
       (0.1)    pqupper(p4,q4)
       (0.05)   pqupper(p5,q1)
       (0.19)   pqupper(p5,q2)
       (0.13)   pqupper(p5,q3)
       (0.1)    pqupper(p5,q4)
        1       fraction(o1)
       (0.1)    extensions(o1,p1)
       (0.1)    extensions(o1,p2)
       (0.1)    extensions(o1,p3)
       (0.1)    extensions(o1,p4)
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                    12/13/18 11:22:58 Page 138
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


     q  pool quality from pooling raw materials

       (0.1)    extensions(o1,p5)

q(c2,o1)
                (.LO, .L, .UP, .M = 0, 0.1, 1, 0)
      (-3.5)    obj
       (0.5)    clower(c2)
       (0.5)    cupper(c2)
     (-84.5)    pszrlt(c2,o1)
       (0.14)   pqlower(p1,q1)
       (0.18)   pqlower(p1,q2)
       (0.17)   pqlower(p1,q3)
       (0.16)   pqlower(p1,q4)
       (0.14)   pqlower(p2,q1)
       (0.18)   pqlower(p2,q2)
       (0.17)   pqlower(p2,q3)
       (0.16)   pqlower(p2,q4)
       (0.14)   pqlower(p3,q1)
       (0.18)   pqlower(p3,q2)
       (0.17)   pqlower(p3,q3)
       (0.16)   pqlower(p3,q4)
       (0.14)   pqlower(p4,q1)
       (0.18)   pqlower(p4,q2)
       (0.17)   pqlower(p4,q3)
       (0.16)   pqlower(p4,q4)
       (0.14)   pqlower(p5,q1)
       (0.18)   pqlower(p5,q2)
       (0.17)   pqlower(p5,q3)
       (0.16)   pqlower(p5,q4)
       (0.14)   pqupper(p1,q1)
       (0.18)   pqupper(p1,q2)
       (0.17)   pqupper(p1,q3)
       (0.16)   pqupper(p1,q4)
       (0.14)   pqupper(p2,q1)
       (0.18)   pqupper(p2,q2)
       (0.17)   pqupper(p2,q3)
       (0.16)   pqupper(p2,q4)
       (0.14)   pqupper(p3,q1)
       (0.18)   pqupper(p3,q2)
       (0.17)   pqupper(p3,q3)
       (0.16)   pqupper(p3,q4)
       (0.14)   pqupper(p4,q1)
       (0.18)   pqupper(p4,q2)
       (0.17)   pqupper(p4,q3)
       (0.16)   pqupper(p4,q4)
       (0.14)   pqupper(p5,q1)
       (0.18)   pqupper(p5,q2)
       (0.17)   pqupper(p5,q3)
       (0.16)   pqupper(p5,q4)
        1       fraction(o1)
       (0.1)    extensions(o1,p1)
       (0.1)    extensions(o1,p2)
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                    12/13/18 11:22:58 Page 139
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


     q  pool quality from pooling raw materials

       (0.1)    extensions(o1,p3)
       (0.1)    extensions(o1,p4)
       (0.1)    extensions(o1,p5)

q(c3,o1)
                (.LO, .L, .UP, .M = 0, 0.1, 1, 0)
      (-2)      obj
       (0.5)    clower(c3)
       (0.5)    cupper(c3)
     (-84.5)    pszrlt(c3,o1)
       (0.12)   pqlower(p1,q1)
       (0.19)   pqlower(p1,q2)
       (0.14)   pqlower(p1,q3)
       (0.14)   pqlower(p1,q4)
       (0.12)   pqlower(p2,q1)
       (0.19)   pqlower(p2,q2)
       (0.14)   pqlower(p2,q3)
       (0.14)   pqlower(p2,q4)
       (0.12)   pqlower(p3,q1)
       (0.19)   pqlower(p3,q2)
       (0.14)   pqlower(p3,q3)
       (0.14)   pqlower(p3,q4)
       (0.12)   pqlower(p4,q1)
       (0.19)   pqlower(p4,q2)
       (0.14)   pqlower(p4,q3)
       (0.14)   pqlower(p4,q4)
       (0.12)   pqlower(p5,q1)
       (0.19)   pqlower(p5,q2)
       (0.14)   pqlower(p5,q3)
       (0.14)   pqlower(p5,q4)
       (0.12)   pqupper(p1,q1)
       (0.19)   pqupper(p1,q2)
       (0.14)   pqupper(p1,q3)
       (0.14)   pqupper(p1,q4)
       (0.12)   pqupper(p2,q1)
       (0.19)   pqupper(p2,q2)
       (0.14)   pqupper(p2,q3)
       (0.14)   pqupper(p2,q4)
       (0.12)   pqupper(p3,q1)
       (0.19)   pqupper(p3,q2)
       (0.14)   pqupper(p3,q3)
       (0.14)   pqupper(p3,q4)
       (0.12)   pqupper(p4,q1)
       (0.19)   pqupper(p4,q2)
       (0.14)   pqupper(p4,q3)
       (0.14)   pqupper(p4,q4)
       (0.12)   pqupper(p5,q1)
       (0.19)   pqupper(p5,q2)
       (0.14)   pqupper(p5,q3)
       (0.14)   pqupper(p5,q4)
        1       fraction(o1)
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                    12/13/18 11:22:58 Page 140
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


     q  pool quality from pooling raw materials

       (0.1)    extensions(o1,p1)
       (0.1)    extensions(o1,p2)
       (0.1)    extensions(o1,p3)
       (0.1)    extensions(o1,p4)
       (0.1)    extensions(o1,p5)

REMAINING 5 ENTRIES SKIPPED

---- y  flow from pool to product

y(o1,p1)
                (.LO, .L, .UP, .M = 0, 0.1, 15, 0)
       (6.9)    obj
       (0.1)    clower(c1)
       (0.1)    clower(c2)
       (0.1)    clower(c3)
       (0.1)    clower(c4)
       (0.1)    cupper(c1)
       (0.1)    cupper(c2)
       (0.1)    cupper(c3)
       (0.1)    cupper(c4)
       (0.1)    pszrlt(c1,o1)
       (0.1)    pszrlt(c2,o1)
       (0.1)    pszrlt(c3,o1)
       (0.1)    pszrlt(c4,o1)
        1       plower(p1)
        1       pupper(p1)
       (0.46)   pqlower(p1,q1)
       (0.68)   pqlower(p1,q2)
       (0.61)   pqlower(p1,q3)
       (0.53)   pqlower(p1,q4)
      (-0.74)   pqupper(p1,q1)
      (-1.02)   pqupper(p1,q2)
      (-0.79)   pqupper(p1,q3)
      (-1.17)   pqupper(p1,q4)
      (-0.6)    extensions(o1,p1)

y(o1,p2)
                (.LO, .L, .UP, .M = 0, 0.1, 25, 0)
      (21.9)    obj
       (0.1)    clower(c1)
       (0.1)    clower(c2)
       (0.1)    clower(c3)
       (0.1)    clower(c4)
       (0.1)    cupper(c1)
       (0.1)    cupper(c2)
       (0.1)    cupper(c3)
       (0.1)    cupper(c4)
       (0.1)    pszrlt(c1,o1)
       (0.1)    pszrlt(c2,o1)
       (0.1)    pszrlt(c3,o1)
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                    12/13/18 11:22:58 Page 141
The Pooling Problem (POOL,SEQ=254)
Column Listing      SOLVE poolprob Using NLP From line 947


     y  flow from pool to product

       (0.1)    pszrlt(c4,o1)
        1       plower(p2)
        1       pupper(p2)
       (0.46)   pqlower(p2,q1)
       (0.68)   pqlower(p2,q2)
       (0.61)   pqlower(p2,q3)
       (0.53)   pqlower(p2,q4)
      (-0.94)   pqupper(p2,q1)
      (-0.62)   pqupper(p2,q2)
      (-1.19)   pqupper(p2,q3)
      (-0.87)   pqupper(p2,q4)
      (-0.6)    extensions(o1,p2)

y(o1,p3)
                (.LO, .L, .UP, .M = 0, 0.1, 10, 0)
      (26.9)    obj
       (0.1)    clower(c1)
       (0.1)    clower(c2)
       (0.1)    clower(c3)
       (0.1)    clower(c4)
       (0.1)    cupper(c1)
       (0.1)    cupper(c2)
       (0.1)    cupper(c3)
       (0.1)    cupper(c4)
       (0.1)    pszrlt(c1,o1)
       (0.1)    pszrlt(c2,o1)
       (0.1)    pszrlt(c3,o1)
       (0.1)    pszrlt(c4,o1)
        1       plower(p3)
        1       pupper(p3)
       (0.46)   pqlower(p3,q1)
       (0.68)   pqlower(p3,q2)
       (0.61)   pqlower(p3,q3)
       (0.53)   pqlower(p3,q4)
      (-0.84)   pqupper(p3,q1)
      (-0.62)   pqupper(p3,q2)
      (-1.29)   pqupper(p3,q3)
      (-1.37)   pqupper(p3,q4)
      (-0.6)    extensions(o1,p3)

REMAINING 7 ENTRIES SKIPPED

---- cost  total cost

cost
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       obj

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                    12/13/18 11:22:58 Page 142
The Pooling Problem (POOL,SEQ=254)
Model Statistics    SOLVE poolprob Using NLP From line 947


LOOPS                                 case   adhya4


MODEL STATISTICS

BLOCKS OF EQUATIONS          10     SINGLE EQUATIONS           87
BLOCKS OF VARIABLES           3     SINGLE VARIABLES           19
NON ZERO ELEMENTS           641     NON LINEAR N-Z            612
DERIVATIVE POOL              20     CONSTANT POOL              43
CODE LENGTH               2,113


GENERATION TIME      =        0.004 SECONDS      3 MB  24.7.4 r58773 LEX-LEG


EXECUTION TIME       =        0.005 SECONDS      3 MB  24.7.4 r58773 LEX-LEG
               L O O P S               case adhya4

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                    12/13/18 11:22:58 Page 143
The Pooling Problem (POOL,SEQ=254)
Solution Report     SOLVE poolprob Using NLP From line 947


               S O L V E      S U M M A R Y

     MODEL   poolprob            OBJECTIVE  cost
     TYPE    NLP                 DIRECTION  MINIMIZE
     SOLVER  CONVERT             FROM LINE  947

**** SOLVER STATUS     1 Normal Completion         
**** MODEL STATUS      14 No Solution Returned     
**** OBJECTIVE VALUE                0.0000

 RESOURCE USAGE, LIMIT          0.000      1000.000
 ITERATION COUNT, LIMIT         0    2000000000
 EVALUATION ERRORS              0             0

Convert 2.0      24.7.4 r58773 Released Sep 19, 2016 LEG x86 64bit/Linux      

--- Using Option File
Reading parameter(s) from "/home/renigijus/gams/opt-mod-lib/gamslib/pool/convert.opt"
>>  ampl pool-scalar.mod
Finished reading from "/home/renigijus/gams/opt-mod-lib/gamslib/pool/convert.opt"
Ampl      : pool-scalar.mod


No solution returned
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                    12/13/18 11:22:58 Page 144
The Pooling Problem (POOL,SEQ=254)
E x e c u t i o n


----    968 PARAMETER rep1  Problem Characteristics

              RawMat    Products   Qualities       Pools        Equs        Vars          NZ

haverly1       3.000       2.000       1.000       1.000      20.000       7.000      61.000
haverly2       3.000       2.000       1.000       1.000      20.000       7.000      61.000
haverly3       3.000       2.000       1.000       1.000      20.000       7.000      61.000
foulds2        6.000       4.000       1.000       2.000      43.000      21.000     219.000
foulds3       32.000      16.000       1.000       8.000     297.000     161.000    4001.000
foulds4       11.000      16.000       1.000       8.000     255.000     161.000    4001.000
foulds5       11.000      16.000       1.000       8.000     255.000     161.000    4001.000
bental4        4.000       2.000       1.000       1.000      23.000       8.000      78.000
bental5       13.000       5.000       2.000       3.000      87.000      33.000     702.000
rt2            3.000       3.000       4.000       2.000      51.000      17.000     341.000
adhya1         5.000       4.000       4.000       2.000      66.000      14.000     362.000
adhya2         5.000       4.000       6.000       2.000      82.000      14.000     474.000
adhya3         8.000       4.000       6.000       3.000      96.000      21.000     745.000
adhya4         8.000       5.000       4.000       2.000      87.000      19.000     641.000


----    968 PARAMETER rep2  Solution Summary

             Solstat     Modstat   GlobalObj       optcr       optca

haverly1       1.000      14.000    -400.000       1.000     400.000
haverly2       1.000      14.000    -600.000       1.000     600.000
haverly3       1.000      14.000    -750.000       1.000     750.000
foulds2        1.000      14.000   -1100.000       1.000    1100.000
foulds3        1.000      14.000      -8.000       1.000       8.000
foulds4        1.000      14.000      -8.000       1.000       8.000
foulds5        1.000      14.000      -8.000       1.000       8.000
bental4        1.000      14.000    -450.000       1.000     450.000
bental5        1.000      14.000   -3500.000       1.000    3500.000
rt2            1.000      14.000   -4391.826       1.000    4391.826
adhya1         1.000      14.000    -549.803       1.000     549.803
adhya2         1.000      14.000    -549.803       1.000     549.803
adhya3         1.000      14.000    -561.045       1.000     561.045
adhya4         1.000      14.000    -877.646       1.000     877.646



EXECUTION TIME       =        0.000 SECONDS      3 MB  24.7.4 r58773 LEX-LEG


USER: Remigijus Paulavicius, Single User License     S170731:0859AO-LNX
      Imperial College London, Dept. of Chemical Engineering    DC13449
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      /home/renigijus/gams/opt-mod-lib/gamslib/pool/pool.gms
Output     /home/renigijus/gams/opt-mod-lib/gamslib/pool/pool-scalar.mod.lst
