GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 10:30:51 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1  option MIP=convert;
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 10:30:51 Page 2
The Orthogonal Latin-Square Problem (LATIN,SEQ=159)
C o m p i l a t i o n


        A latin square is an arrangement of objects such that no object
        is repeated in a row or column. Two latin squares are orthogonal
        if all entries are different. For example,
       
                one     two
               1 3 2   2 1 3
               3 2 1   1 3 2
               2 1 3   3 2 1
       
        The case of n=10 has historical interest and was only settled in 1952.
       
        The original formulation is not correct. A new formulation
        is presented which generates a correct solution. Also note that the
        solution time is very sensitive to formulation details and depends on
        the kind of algorithm used.
       
        The size of the square can easily by changed by editing the lines
        containing the definitions of the rows, columns and values in the.
        set definition below. This kind of assignment problem can be very
        difficult to solve for general purpose MIP codes.
       
       
      Dantzig, G B, Chapter 26.3. In Linear Programming and Extensions. Princeton University Press, Princeton, New Jersey, 1963.
       
  30   
  31  sets k  rows    / row-1*row-4/      ! change row-4 to new size
  32       l  columns / col-1*col-4/      ! change col-4 to new size
  33       v  values  / val-1*val-4/      ! change val-4 to new size
  34   
  35  alias (i,j,v);
  36   
  37  *  ORIGINAL FORMULATION
  38  *
  39  *  Note that the squares use k,l for row and column indexes. The first
  40  *  index position (i) is for the values of square one and the second
  41  *  index position (j) is for square two. For example, the cell 2,3
  42  *  in the latin square shown above would be defined by the value of
  43  *  one for the following index values:
  44  *
  45  *      x.fx('val-1','val-2','row-2',col-3') = 1;
  46  *
  47  *  The original formulation is not correct. For example, you can pick
  48  *  any cell (k,l) and pick and make the cell values equal and the
  49  *  model will find a feasible solution. For example, you could set:
  50  *
  51  *      x.fx('val-1','val-1','row-1','col-1') = 1;
  52  *
  53  *  and get a feasible solution. Both the original and a new formulation
  54  *  are given.
  55   
  56  variables x(i,j,k,l)  'pairs (i,j) allocated to cell(k,l)'
  57            z           some objective
  58  binary variable x;
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 10:30:51 Page 3
The Orthogonal Latin-Square Problem (LATIN,SEQ=159)
C o m p i l a t i o n


  59   
  60  equations
  61     c1(i,j)   for each cell pick only one item pair
  62     c2(k,l)   an item pair can show up only once
  63     c3(i,l)   items have to be unique in each column for square one
  64     c4(j,l)   items have to be unique in each column for square two
  65     c5(i,k)   items have to be unique in each row for square one
  66     c6(j,k)   items have to be unique in each row for square two
  67     obj       some objective function;
  68   
  69  c1(i,j)..     sum((k,l), x(i,j,k,l)) =e= 1;
  70  c2(k,l)..     sum((i,j), x(i,j,k,l)) =e= 1;
  71  c3(i,l)..     sum((j,k), x(i,j,k,l)) =e= 1;
  72  c4(j,l)..     sum((i,k), x(i,j,k,l)) =e= 1;
  73  c5(i,k)..     sum((j,l), x(i,j,k,l)) =e= 1;
  74  c6(j,k)..     sum((i,l), x(i,j,k,l)) =e= 1;
  75  obj..   z =e= sum((i,j,k,l), x(i,j,k,l));
  76   
  77  model latin / all /;
  78   
  79  parameter report(*,k,l); option report:0:1:1;
  80   
       
      * force an incorrect solution
      x.fx('val-1','val-1','row-1','col-1') = 1;
       
      solve latin minimizing z using mip;
       
       
      loop((i,j,k,l)$x.l(i,j,k,l),
         report('one',k,l) = ord(i);
         report('two',k,l) = ord(j); );
       
      display report;
       
  96   
  97  *   NEW FORMULATION
  98   
  99  set  s  square  / one, two /
 100   
 101  variables  y(s,v,k,l)  'square s has value v in cell(k,l)'
 102             dev(v,k,l)  deviation from correct formulation
 103             w           some objective
 104  binary variable y;
 105   
 106  equations
 107   
 108     n2(s,k,l)   exactly one value for each cell
 109     n3(s,v,l)   columns entries have to be unique
 110     n5(s,v,k)   row entries have to be unique
 111     n6(v,k,l)   entries in squares have to be different
 112     nobj        definition of objective - anything ;
 113   
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 10:30:51 Page 4
The Orthogonal Latin-Square Problem (LATIN,SEQ=159)
C o m p i l a t i o n


 114  n2(s,k,l)..   sum(v, y(s,v,k,l)) =e= 1;
 115  n3(s,v,l)..   sum(k, y(s,v,k,l)) =e= 1;
 116  n5(s,v,k)..   sum(l, y(s,v,k,l)) =e= 1;
 117  n6(v,k,l)..   sum(s, y(s,v,k,l)) =l= 1;
 118  nobj..        w =e= sum((s,v,k,l), y(s,v,k,l));
 119   
 120  model newlatin / nobj,n2,n3,n5,n6 /;
 121   
 122  * position the solution
 123  y.fx('one','val-1','row-1','col-1') = 1;
 124   
 125  solve newlatin min w us mip;
 126   
 127  loop((s,v,k,l)$y.l(s,v,k,l),
 128     report(s,k,l) = ord(v);
 129     report(s,k,l) = ord(v); );
 130   
 131  display report;


COMPILATION TIME     =        0.001 SECONDS      3 MB  24.7.4 r58773 LEX-LEG
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 10:30:51 Page 5
The Orthogonal Latin-Square Problem (LATIN,SEQ=159)
Equation Listing    SOLVE newlatin Using MIP From line 125


---- nobj  =E=  definition of objective - anything

nobj..  - y(one,val-1,row-1,col-1) - y(one,val-1,row-1,col-2) - y(one,val-1,row-1,col-3) - y(one,val-1,row-1,col-4) - y(one,val-1,row-2,col-1) - y(one,val-1,row-2,col-2) - y(one,val-1,row-2,col-3) - y(one,val-1,row-2,col-4) - y(one,val-1,row-3,col-1)
     
      - y(one,val-1,row-3,col-2) - y(one,val-1,row-3,col-3) - y(one,val-1,row-3,col-4) - y(one,val-1,row-4,col-1) - y(one,val-1,row-4,col-2) - y(one,val-1,row-4,col-3) - y(one,val-1,row-4,col-4) - y(one,val-2,row-1,col-1) - y(one,val-2,row-1,col-2)
     
      - y(one,val-2,row-1,col-3) - y(one,val-2,row-1,col-4) - y(one,val-2,row-2,col-1) - y(one,val-2,row-2,col-2) - y(one,val-2,row-2,col-3) - y(one,val-2,row-2,col-4) - y(one,val-2,row-3,col-1) - y(one,val-2,row-3,col-2) - y(one,val-2,row-3,col-3)
     
      - y(one,val-2,row-3,col-4) - y(one,val-2,row-4,col-1) - y(one,val-2,row-4,col-2) - y(one,val-2,row-4,col-3) - y(one,val-2,row-4,col-4) - y(one,val-3,row-1,col-1) - y(one,val-3,row-1,col-2) - y(one,val-3,row-1,col-3) - y(one,val-3,row-1,col-4)
     
      - y(one,val-3,row-2,col-1) - y(one,val-3,row-2,col-2) - y(one,val-3,row-2,col-3) - y(one,val-3,row-2,col-4) - y(one,val-3,row-3,col-1) - y(one,val-3,row-3,col-2) - y(one,val-3,row-3,col-3) - y(one,val-3,row-3,col-4) - y(one,val-3,row-4,col-1)
     
      - y(one,val-3,row-4,col-2) - y(one,val-3,row-4,col-3) - y(one,val-3,row-4,col-4) - y(one,val-4,row-1,col-1) - y(one,val-4,row-1,col-2) - y(one,val-4,row-1,col-3) - y(one,val-4,row-1,col-4) - y(one,val-4,row-2,col-1) - y(one,val-4,row-2,col-2)
     
      - y(one,val-4,row-2,col-3) - y(one,val-4,row-2,col-4) - y(one,val-4,row-3,col-1) - y(one,val-4,row-3,col-2) - y(one,val-4,row-3,col-3) - y(one,val-4,row-3,col-4) - y(one,val-4,row-4,col-1) - y(one,val-4,row-4,col-2) - y(one,val-4,row-4,col-3)
     
      - y(one,val-4,row-4,col-4) - y(two,val-1,row-1,col-1) - y(two,val-1,row-1,col-2) - y(two,val-1,row-1,col-3) - y(two,val-1,row-1,col-4) - y(two,val-1,row-2,col-1) - y(two,val-1,row-2,col-2) - y(two,val-1,row-2,col-3) - y(two,val-1,row-2,col-4)
     
      - y(two,val-1,row-3,col-1) - y(two,val-1,row-3,col-2) - y(two,val-1,row-3,col-3) - y(two,val-1,row-3,col-4) - y(two,val-1,row-4,col-1) - y(two,val-1,row-4,col-2) - y(two,val-1,row-4,col-3) - y(two,val-1,row-4,col-4) - y(two,val-2,row-1,col-1)
     
      - y(two,val-2,row-1,col-2) - y(two,val-2,row-1,col-3) - y(two,val-2,row-1,col-4) - y(two,val-2,row-2,col-1) - y(two,val-2,row-2,col-2) - y(two,val-2,row-2,col-3) - y(two,val-2,row-2,col-4) - y(two,val-2,row-3,col-1) - y(two,val-2,row-3,col-2)
     
      - y(two,val-2,row-3,col-3) - y(two,val-2,row-3,col-4) - y(two,val-2,row-4,col-1) - y(two,val-2,row-4,col-2) - y(two,val-2,row-4,col-3) - y(two,val-2,row-4,col-4) - y(two,val-3,row-1,col-1) - y(two,val-3,row-1,col-2) - y(two,val-3,row-1,col-3)
     
      - y(two,val-3,row-1,col-4) - y(two,val-3,row-2,col-1) - y(two,val-3,row-2,col-2) - y(two,val-3,row-2,col-3) - y(two,val-3,row-2,col-4) - y(two,val-3,row-3,col-1) - y(two,val-3,row-3,col-2) - y(two,val-3,row-3,col-3) - y(two,val-3,row-3,col-4)
     
      - y(two,val-3,row-4,col-1) - y(two,val-3,row-4,col-2) - y(two,val-3,row-4,col-3) - y(two,val-3,row-4,col-4) - y(two,val-4,row-1,col-1) - y(two,val-4,row-1,col-2) - y(two,val-4,row-1,col-3) - y(two,val-4,row-1,col-4) - y(two,val-4,row-2,col-1)
     
      - y(two,val-4,row-2,col-2) - y(two,val-4,row-2,col-3) - y(two,val-4,row-2,col-4) - y(two,val-4,row-3,col-1) - y(two,val-4,row-3,col-2) - y(two,val-4,row-3,col-3) - y(two,val-4,row-3,col-4) - y(two,val-4,row-4,col-1) - y(two,val-4,row-4,col-2)
     
      - y(two,val-4,row-4,col-3) - y(two,val-4,row-4,col-4) + w =E= 0 ; (LHS = -1, INFES = 1 ****)
     

---- n2  =E=  exactly one value for each cell

n2(one,row-1,col-1)..  y(one,val-1,row-1,col-1) + y(one,val-2,row-1,col-1) + y(one,val-3,row-1,col-1) + y(one,val-4,row-1,col-1) =E= 1 ; (LHS = 1)
     
n2(one,row-1,col-2)..  y(one,val-1,row-1,col-2) + y(one,val-2,row-1,col-2) + y(one,val-3,row-1,col-2) + y(one,val-4,row-1,col-2) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
n2(one,row-1,col-3)..  y(one,val-1,row-1,col-3) + y(one,val-2,row-1,col-3) + y(one,val-3,row-1,col-3) + y(one,val-4,row-1,col-3) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
REMAINING 29 ENTRIES SKIPPED


---- n3  =E=  columns entries have to be unique

n3(one,val-1,col-1)..  y(one,val-1,row-1,col-1) + y(one,val-1,row-2,col-1) + y(one,val-1,row-3,col-1) + y(one,val-1,row-4,col-1) =E= 1 ; (LHS = 1)
     
n3(one,val-1,col-2)..  y(one,val-1,row-1,col-2) + y(one,val-1,row-2,col-2) + y(one,val-1,row-3,col-2) + y(one,val-1,row-4,col-2) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 10:30:51 Page 6
The Orthogonal Latin-Square Problem (LATIN,SEQ=159)
Equation Listing    SOLVE newlatin Using MIP From line 125


     n3  =E=  columns entries have to be unique

n3(one,val-1,col-3)..  y(one,val-1,row-1,col-3) + y(one,val-1,row-2,col-3) + y(one,val-1,row-3,col-3) + y(one,val-1,row-4,col-3) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
REMAINING 29 ENTRIES SKIPPED


---- n5  =E=  row entries have to be unique

n5(one,val-1,row-1)..  y(one,val-1,row-1,col-1) + y(one,val-1,row-1,col-2) + y(one,val-1,row-1,col-3) + y(one,val-1,row-1,col-4) =E= 1 ; (LHS = 1)
     
n5(one,val-1,row-2)..  y(one,val-1,row-2,col-1) + y(one,val-1,row-2,col-2) + y(one,val-1,row-2,col-3) + y(one,val-1,row-2,col-4) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
n5(one,val-1,row-3)..  y(one,val-1,row-3,col-1) + y(one,val-1,row-3,col-2) + y(one,val-1,row-3,col-3) + y(one,val-1,row-3,col-4) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
REMAINING 29 ENTRIES SKIPPED


---- n6  =L=  entries in squares have to be different

n6(val-1,row-1,col-1)..  y(one,val-1,row-1,col-1) + y(two,val-1,row-1,col-1) =L= 1 ; (LHS = 1)
     
n6(val-1,row-1,col-2)..  y(one,val-1,row-1,col-2) + y(two,val-1,row-1,col-2) =L= 1 ; (LHS = 0)
     
n6(val-1,row-1,col-3)..  y(one,val-1,row-1,col-3) + y(two,val-1,row-1,col-3) =L= 1 ; (LHS = 0)
     
REMAINING 61 ENTRIES SKIPPED

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 10:30:51 Page 7
The Orthogonal Latin-Square Problem (LATIN,SEQ=159)
Column Listing      SOLVE newlatin Using MIP From line 125


---- y  square s has value v in cell(k,l)

y(one,val-1,row-1,col-1)
                (.LO, .L, .UP, .M = 1, 1, 1, 0)
       -1       nobj
        1       n2(one,row-1,col-1)
        1       n3(one,val-1,col-1)
        1       n5(one,val-1,row-1)
        1       n6(val-1,row-1,col-1)

y(one,val-1,row-1,col-2)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
       -1       nobj
        1       n2(one,row-1,col-2)
        1       n3(one,val-1,col-2)
        1       n5(one,val-1,row-1)
        1       n6(val-1,row-1,col-2)

y(one,val-1,row-1,col-3)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
       -1       nobj
        1       n2(one,row-1,col-3)
        1       n3(one,val-1,col-3)
        1       n5(one,val-1,row-1)
        1       n6(val-1,row-1,col-3)

REMAINING 125 ENTRIES SKIPPED

---- w  some objective

w
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       nobj

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 10:30:51 Page 8
The Orthogonal Latin-Square Problem (LATIN,SEQ=159)
Model Statistics    SOLVE newlatin Using MIP From line 125


MODEL STATISTICS

BLOCKS OF EQUATIONS           5     SINGLE EQUATIONS          161
BLOCKS OF VARIABLES           2     SINGLE VARIABLES          129
NON ZERO ELEMENTS           641     DISCRETE VARIABLES        127


GENERATION TIME      =        0.004 SECONDS      4 MB  24.7.4 r58773 LEX-LEG


EXECUTION TIME       =        0.004 SECONDS      4 MB  24.7.4 r58773 LEX-LEG
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 10:30:51 Page 9
The Orthogonal Latin-Square Problem (LATIN,SEQ=159)
Solution Report     SOLVE newlatin Using MIP From line 125


               S O L V E      S U M M A R Y

     MODEL   newlatin            OBJECTIVE  w
     TYPE    MIP                 DIRECTION  MINIMIZE
     SOLVER  CONVERT             FROM LINE  125

**** SOLVER STATUS     1 Normal Completion         
**** MODEL STATUS      14 No Solution Returned     
**** OBJECTIVE VALUE                0.0000

 RESOURCE USAGE, LIMIT          0.000      1000.000
 ITERATION COUNT, LIMIT         0    2000000000

Convert 2.0      24.7.4 r58773 Released Sep 19, 2016 LEG x86 64bit/Linux      

--- Using Option File
Reading parameter(s) from "/home/renigijus/gams/opt-mod-lib/gamslib/latin/convert.opt"
>>  ampl latin-scalar.mod
Finished reading from "/home/renigijus/gams/opt-mod-lib/gamslib/latin/convert.opt"
Ampl      : latin-scalar.mod


No solution returned
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 10:30:51 Page 10
The Orthogonal Latin-Square Problem (LATIN,SEQ=159)
E x e c u t i o n


----    131 PARAMETER report  

INDEX 1 = one

            col-1

row-1           1



EXECUTION TIME       =        0.000 SECONDS      3 MB  24.7.4 r58773 LEX-LEG


USER: Remigijus Paulavicius, Single User License     S170731:0859AO-LNX
      Imperial College London, Dept. of Chemical Engineering    DC13449
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      /home/renigijus/gams/opt-mod-lib/gamslib/latin/latin.gms
Output     /home/renigijus/gams/opt-mod-lib/gamslib/latin/latin-scalar.mod.lst
