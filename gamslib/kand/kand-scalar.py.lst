GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 10:32:16 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1  option LP=convert;
   2  option LP=convert;
   3  option LP=convert;
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 10:32:16 Page 2
Stochastic Programming (KAND,SEQ=187)
C o m p i l a t i o n


      A refinery can blend raw materials into different products. At present, the management is trying
      to decide how much of each of the raw materials to purchase and stock, so that they can be
      blended to satisfy the demand for the products in future time periods. The demand has to be
      completely satisfied, and in case of raw material shortage the products can be outsourced at a
      higher cost. There is an inventory constraint on how much raw material can be stocked in total.
       
       
      Kall, P, and Wallace, S W, Stochastic Programming. John Wiley and
      Sons, Chichester, England, 1994.
       
  17   
  18   
  19  sets i raw materials / raw-1, raw-2 /
  20       j products      / p-1,p-2 /
  21       t time periods  / time-1, time-2 /
  22       n nodes         / n-1*n-12 /
  23  alias(n,nn);
  24   
  25  Parameters c(i) present cost of raw materials / raw-1 2, raw-2 3/
  26   
  27  table a(j,i) yields
  28   
  29         raw-1 raw-2
  30  p-1     2    6
  31  p-2     3    3.4
  32   
  33  table f(j,t) cost of outsourcing
  34        time-1  time-2
  35  p-1     7       10
  36  p-2    12       15
  37   
  38  scalar b inventory capacity / 50 /;
  39   
  40   
  41  table stdat(n,*) scenario tree data
  42       prob   p-1  p-2
  43  n-1   .3    200  180
  44  n-2   .4    180  160
  45  n-3   .3    160  140
  46   
  47  n-4   .2    200  180
  48  n-5   .5    180  160
  49  n-6   .3    160  140
  50   
  51  n-7   .3    200  180
  52  n-8   .4    180  160
  53  n-9   .3    160  140
  54   
  55  n-10  .4    200  180
  56  n-11  .4    180  160
  57  n-12  .2    160  140
  58   
  59  set tn(t,n) time node mapping / time-1.(n-1*n-3), time-2.(n-4*n-12) /
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 10:32:16 Page 3
Stochastic Programming (KAND,SEQ=187)
C o m p i l a t i o n


  60      tree(n,n) / n-1.(n-4*n-6), n-2.(n-7*n-9), n-3.(n-10*n-12) /
  61   
  62  parameter dem(n,j) stochastic demand
  63            prob(n)  node probability;
  64   
  65  dem(n,j) = stdat(n,j);
  66   
  67  prob(n)$tn('time-1',n) = stdat(n,'prob');
  68  prob(n)$tn('time-2',n) = sum(tree(nn,n), stdat(nn,'prob')*stdat(n,'prob'));
  69   
  70  display prob;
  71   
  72  variables x(i,t) raw material purchased for use in time t
  73            y(j,t,n) outsourced products
  74            cost
  75  positive variables x,y;
  76   
  77  equations obj   total cost definition
  78            bal   purchase limit
  79            dembal(j,t,n) demand balance;
  80   
  81  obj.. cost =e= sum((i,t), c(i)*x(i,t)) + sum((j,tn(t,n)), prob(n)*f(j,t)*y(j,tn));
  82   
  83  bal.. sum((i,t), x(i,t)) =l= b;
  84   
  85  dembal(j,tn(t,n)).. sum(i, a(j,i)*x(i,t)) + y(j,tn) =g= dem(n,j);
  86   
  87  model kand / all /;
  88   
  89  solve kand min cost us lp;
  90   
  91  *  In order to use the SPOSL system we need to insert some dummy links
  92  *  between stages two and three. Without these links, the SPOSL system will
  93  *  identify only a two stage problem with different subproblem structures.
  94  *  The value EPS is used to insert a constraint entry with numerical values
  95  *  of zero.
  96   
  97  equation dembalx(j,t,n) demand balance modified to include back link;
  98   
  99  dembalx(j,tn(t,n)).. sum(i, a(j,i)*x(i,t)) + y(j,tn) =g= dem(n,j)
 100                      + eps*sum(tree(nn,n), y(j,t-1,nn));
 101   
 102  model kandsp / obj, bal, dembalx /;
 103   
 104  solve kandsp min cost us lp;


COMPILATION TIME     =        0.001 SECONDS      3 MB  24.7.4 r58773 LEX-LEG
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 10:32:16 Page 4
Stochastic Programming (KAND,SEQ=187)
E x e c u t i o n


----     70 PARAMETER prob  node probability

n-1  0.300,    n-2  0.400,    n-3  0.300,    n-4  0.060,    n-5  0.150,    n-6  0.090,    n-7  0.120,    n-8  0.160,    n-9  0.120,    n-10 0.120,    n-11 0.120,    n-12 0.060

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 10:32:16 Page 5
Stochastic Programming (KAND,SEQ=187)
Equation Listing    SOLVE kand Using LP From line 89


---- obj  =E=  total cost definition

obj..  - 2*x(raw-1,time-1) - 2*x(raw-1,time-2) - 3*x(raw-2,time-1) - 3*x(raw-2,time-2) - 2.1*y(p-1,time-1,n-1) - 2.8*y(p-1,time-1,n-2) - 2.1*y(p-1,time-1,n-3) - 0.6*y(p-1,time-2,n-4) - 1.5*y(p-1,time-2,n-5) - 0.9*y(p-1,time-2,n-6) - 1.2*y(p-1,time-2,n-7)
     
      - 1.6*y(p-1,time-2,n-8) - 1.2*y(p-1,time-2,n-9) - 1.2*y(p-1,time-2,n-10) - 1.2*y(p-1,time-2,n-11) - 0.6*y(p-1,time-2,n-12) - 3.6*y(p-2,time-1,n-1) - 4.8*y(p-2,time-1,n-2) - 3.6*y(p-2,time-1,n-3) - 0.9*y(p-2,time-2,n-4) - 2.25*y(p-2,time-2,n-5)
     
      - 1.35*y(p-2,time-2,n-6) - 1.8*y(p-2,time-2,n-7) - 2.4*y(p-2,time-2,n-8) - 1.8*y(p-2,time-2,n-9) - 1.8*y(p-2,time-2,n-10) - 1.8*y(p-2,time-2,n-11) - 0.9*y(p-2,time-2,n-12) + cost =E= 0 ; (LHS = 0)
     

---- bal  =L=  purchase limit

bal..  x(raw-1,time-1) + x(raw-1,time-2) + x(raw-2,time-1) + x(raw-2,time-2) =L= 50 ; (LHS = 0)
     

---- dembal  =G=  demand balance

dembal(p-1,time-1,n-1)..  2*x(raw-1,time-1) + 6*x(raw-2,time-1) + y(p-1,time-1,n-1) =G= 200 ; (LHS = 0, INFES = 200 ****)
     
dembal(p-1,time-1,n-2)..  2*x(raw-1,time-1) + 6*x(raw-2,time-1) + y(p-1,time-1,n-2) =G= 180 ; (LHS = 0, INFES = 180 ****)
     
dembal(p-1,time-1,n-3)..  2*x(raw-1,time-1) + 6*x(raw-2,time-1) + y(p-1,time-1,n-3) =G= 160 ; (LHS = 0, INFES = 160 ****)
     
REMAINING 21 ENTRIES SKIPPED

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 10:32:16 Page 6
Stochastic Programming (KAND,SEQ=187)
Column Listing      SOLVE kand Using LP From line 89


---- x  raw material purchased for use in time t

x(raw-1,time-1)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -2       obj
        1       bal
        2       dembal(p-1,time-1,n-1)
        2       dembal(p-1,time-1,n-2)
        2       dembal(p-1,time-1,n-3)
        3       dembal(p-2,time-1,n-1)
        3       dembal(p-2,time-1,n-2)
        3       dembal(p-2,time-1,n-3)

x(raw-1,time-2)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -2       obj
        1       bal
        2       dembal(p-1,time-2,n-4)
        2       dembal(p-1,time-2,n-5)
        2       dembal(p-1,time-2,n-6)
        2       dembal(p-1,time-2,n-7)
        2       dembal(p-1,time-2,n-8)
        2       dembal(p-1,time-2,n-9)
        2       dembal(p-1,time-2,n-10)
        2       dembal(p-1,time-2,n-11)
        2       dembal(p-1,time-2,n-12)
        3       dembal(p-2,time-2,n-4)
        3       dembal(p-2,time-2,n-5)
        3       dembal(p-2,time-2,n-6)
        3       dembal(p-2,time-2,n-7)
        3       dembal(p-2,time-2,n-8)
        3       dembal(p-2,time-2,n-9)
        3       dembal(p-2,time-2,n-10)
        3       dembal(p-2,time-2,n-11)
        3       dembal(p-2,time-2,n-12)

x(raw-2,time-1)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -3       obj
        1       bal
        6       dembal(p-1,time-1,n-1)
        6       dembal(p-1,time-1,n-2)
        6       dembal(p-1,time-1,n-3)
        3.4     dembal(p-2,time-1,n-1)
        3.4     dembal(p-2,time-1,n-2)
        3.4     dembal(p-2,time-1,n-3)

REMAINING ENTRY SKIPPED
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 10:32:16 Page 7
Stochastic Programming (KAND,SEQ=187)
Column Listing      SOLVE kand Using LP From line 89


---- y  outsourced products

y(p-1,time-1,n-1)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -2.1     obj
        1       dembal(p-1,time-1,n-1)

y(p-1,time-1,n-2)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -2.8     obj
        1       dembal(p-1,time-1,n-2)

y(p-1,time-1,n-3)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -2.1     obj
        1       dembal(p-1,time-1,n-3)

REMAINING 21 ENTRIES SKIPPED

---- cost  

cost
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       obj

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 10:32:16 Page 8
Stochastic Programming (KAND,SEQ=187)
Model Statistics    SOLVE kand Using LP From line 89


MODEL STATISTICS

BLOCKS OF EQUATIONS           3     SINGLE EQUATIONS           26
BLOCKS OF VARIABLES           3     SINGLE VARIABLES           29
NON ZERO ELEMENTS           105


GENERATION TIME      =        0.003 SECONDS      4 MB  24.7.4 r58773 LEX-LEG


EXECUTION TIME       =        0.003 SECONDS      4 MB  24.7.4 r58773 LEX-LEG
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 10:32:16 Page 9
Stochastic Programming (KAND,SEQ=187)
Solution Report     SOLVE kand Using LP From line 89


               S O L V E      S U M M A R Y

     MODEL   kand                OBJECTIVE  cost
     TYPE    LP                  DIRECTION  MINIMIZE
     SOLVER  CONVERT             FROM LINE  89

**** SOLVER STATUS     1 Normal Completion         
**** MODEL STATUS      14 No Solution Returned     
**** OBJECTIVE VALUE                0.0000

 RESOURCE USAGE, LIMIT          0.000      1000.000
 ITERATION COUNT, LIMIT         0    2000000000

Convert 2.0      24.7.4 r58773 Released Sep 19, 2016 LEG x86 64bit/Linux      

--- Using Option File
Reading parameter(s) from "/home/renigijus/gams/opt-mod-lib/gamslib/kand/convert.opt"
>>  pyomo kand-scalar.py
Finished reading from "/home/renigijus/gams/opt-mod-lib/gamslib/kand/convert.opt"
Pyomo     : kand-scalar.py


No solution returned
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 10:32:16 Page 10
Stochastic Programming (KAND,SEQ=187)
Equation Listing    SOLVE kandsp Using LP From line 104


---- obj  =E=  total cost definition

obj..  - 2*x(raw-1,time-1) - 2*x(raw-1,time-2) - 3*x(raw-2,time-1) - 3*x(raw-2,time-2) - 2.1*y(p-1,time-1,n-1) - 2.8*y(p-1,time-1,n-2) - 2.1*y(p-1,time-1,n-3) - 0.6*y(p-1,time-2,n-4) - 1.5*y(p-1,time-2,n-5) - 0.9*y(p-1,time-2,n-6) - 1.2*y(p-1,time-2,n-7)
     
      - 1.6*y(p-1,time-2,n-8) - 1.2*y(p-1,time-2,n-9) - 1.2*y(p-1,time-2,n-10) - 1.2*y(p-1,time-2,n-11) - 0.6*y(p-1,time-2,n-12) - 3.6*y(p-2,time-1,n-1) - 4.8*y(p-2,time-1,n-2) - 3.6*y(p-2,time-1,n-3) - 0.9*y(p-2,time-2,n-4) - 2.25*y(p-2,time-2,n-5)
     
      - 1.35*y(p-2,time-2,n-6) - 1.8*y(p-2,time-2,n-7) - 2.4*y(p-2,time-2,n-8) - 1.8*y(p-2,time-2,n-9) - 1.8*y(p-2,time-2,n-10) - 1.8*y(p-2,time-2,n-11) - 0.9*y(p-2,time-2,n-12) + cost =E= 0 ; (LHS = 0)
     

---- bal  =L=  purchase limit

bal..  x(raw-1,time-1) + x(raw-1,time-2) + x(raw-2,time-1) + x(raw-2,time-2) =L= 50 ; (LHS = 0)
     

---- dembalx  =G=  demand balance modified to include back link

dembalx(p-1,time-1,n-1)..  2*x(raw-1,time-1) + 6*x(raw-2,time-1) + y(p-1,time-1,n-1) =G= 200 ; (LHS = 0, INFES = 200 ****)
     
dembalx(p-1,time-1,n-2)..  2*x(raw-1,time-1) + 6*x(raw-2,time-1) + y(p-1,time-1,n-2) =G= 180 ; (LHS = 0, INFES = 180 ****)
     
dembalx(p-1,time-1,n-3)..  2*x(raw-1,time-1) + 6*x(raw-2,time-1) + y(p-1,time-1,n-3) =G= 160 ; (LHS = 0, INFES = 160 ****)
     
REMAINING 21 ENTRIES SKIPPED

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 10:32:16 Page 11
Stochastic Programming (KAND,SEQ=187)
Column Listing      SOLVE kandsp Using LP From line 104


---- x  raw material purchased for use in time t

x(raw-1,time-1)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -2       obj
        1       bal
        2       dembalx(p-1,time-1,n-1)
        2       dembalx(p-1,time-1,n-2)
        2       dembalx(p-1,time-1,n-3)
        3       dembalx(p-2,time-1,n-1)
        3       dembalx(p-2,time-1,n-2)
        3       dembalx(p-2,time-1,n-3)

x(raw-1,time-2)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -2       obj
        1       bal
        2       dembalx(p-1,time-2,n-4)
        2       dembalx(p-1,time-2,n-5)
        2       dembalx(p-1,time-2,n-6)
        2       dembalx(p-1,time-2,n-7)
        2       dembalx(p-1,time-2,n-8)
        2       dembalx(p-1,time-2,n-9)
        2       dembalx(p-1,time-2,n-10)
        2       dembalx(p-1,time-2,n-11)
        2       dembalx(p-1,time-2,n-12)
        3       dembalx(p-2,time-2,n-4)
        3       dembalx(p-2,time-2,n-5)
        3       dembalx(p-2,time-2,n-6)
        3       dembalx(p-2,time-2,n-7)
        3       dembalx(p-2,time-2,n-8)
        3       dembalx(p-2,time-2,n-9)
        3       dembalx(p-2,time-2,n-10)
        3       dembalx(p-2,time-2,n-11)
        3       dembalx(p-2,time-2,n-12)

x(raw-2,time-1)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -3       obj
        1       bal
        6       dembalx(p-1,time-1,n-1)
        6       dembalx(p-1,time-1,n-2)
        6       dembalx(p-1,time-1,n-3)
        3.4     dembalx(p-2,time-1,n-1)
        3.4     dembalx(p-2,time-1,n-2)
        3.4     dembalx(p-2,time-1,n-3)

REMAINING ENTRY SKIPPED
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 10:32:16 Page 12
Stochastic Programming (KAND,SEQ=187)
Column Listing      SOLVE kandsp Using LP From line 104


---- y  outsourced products

y(p-1,time-1,n-1)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -2.1     obj
        1       dembalx(p-1,time-1,n-1)
           EPS  dembalx(p-1,time-2,n-4)
           EPS  dembalx(p-1,time-2,n-5)
           EPS  dembalx(p-1,time-2,n-6)

y(p-1,time-1,n-2)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -2.8     obj
        1       dembalx(p-1,time-1,n-2)
           EPS  dembalx(p-1,time-2,n-7)
           EPS  dembalx(p-1,time-2,n-8)
           EPS  dembalx(p-1,time-2,n-9)

y(p-1,time-1,n-3)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -2.1     obj
        1       dembalx(p-1,time-1,n-3)
           EPS  dembalx(p-1,time-2,n-10)
           EPS  dembalx(p-1,time-2,n-11)
           EPS  dembalx(p-1,time-2,n-12)

REMAINING 21 ENTRIES SKIPPED

---- cost  

cost
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       obj

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 10:32:16 Page 13
Stochastic Programming (KAND,SEQ=187)
Model Statistics    SOLVE kandsp Using LP From line 104


MODEL STATISTICS

BLOCKS OF EQUATIONS           3     SINGLE EQUATIONS           26
BLOCKS OF VARIABLES           3     SINGLE VARIABLES           29
NON ZERO ELEMENTS           123


GENERATION TIME      =        0.002 SECONDS      3 MB  24.7.4 r58773 LEX-LEG


EXECUTION TIME       =        0.002 SECONDS      3 MB  24.7.4 r58773 LEX-LEG
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 10:32:16 Page 14
Stochastic Programming (KAND,SEQ=187)
Solution Report     SOLVE kandsp Using LP From line 104


               S O L V E      S U M M A R Y

     MODEL   kandsp              OBJECTIVE  cost
     TYPE    LP                  DIRECTION  MINIMIZE
     SOLVER  CONVERT             FROM LINE  104

**** SOLVER STATUS     1 Normal Completion         
**** MODEL STATUS      14 No Solution Returned     
**** OBJECTIVE VALUE                0.0000

 RESOURCE USAGE, LIMIT          0.000      1000.000
 ITERATION COUNT, LIMIT         0    2000000000

Convert 2.0      24.7.4 r58773 Released Sep 19, 2016 LEG x86 64bit/Linux      

--- Using Option File
Reading parameter(s) from "/home/renigijus/gams/opt-mod-lib/gamslib/kand/convert.opt"
>>  pyomo kand-scalar.py
Finished reading from "/home/renigijus/gams/opt-mod-lib/gamslib/kand/convert.opt"
Pyomo     : kand-scalar.py


No solution returned


EXECUTION TIME       =        0.001 SECONDS      2 MB  24.7.4 r58773 LEX-LEG


USER: Remigijus Paulavicius, Single User License     S170731:0859AO-LNX
      Imperial College London, Dept. of Chemical Engineering    DC13449
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      /home/renigijus/gams/opt-mod-lib/gamslib/kand/kand.gms
Output     /home/renigijus/gams/opt-mod-lib/gamslib/kand/kand-scalar.py.lst
