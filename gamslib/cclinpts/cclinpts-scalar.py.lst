GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 11:34:19 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1  option NLP=convert;
   2  option NLP=convert;
   3  option NLP=convert;
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 11:34:19 Page 2
Finding Optimal Breakpoints when linearizing a power utility function (SEQ=373)
C o m p i l a t i o n


   5   
      A power utility function with constant relative risk aversion is often used
      in economic and financial modelling. It may be desired, for computational
      reasons, to linearize this function when it is used together with constraints
      requiring integer variables. This model finds the optimal breakpoints for
      such a linearization for a given interval.
       
       
      Author: 
      Kourosh Marjani Rasmussen, July 2011
      Technical University of Denmark
      Department of Management Engineering
      Section for Operations Research,
      Financial Engineering Group
  21   
  24   
  25  Scalar gamma      relative risk aversion    / 2 /;
  26  Sets   j          number of break points    / s1*s30 /
  27         first(j), last(j);
  28  alias (j,jj);
  29   
  30  first('s1') = yes;
  31  last('s30')   = yes;
  32   
  33  * Start and end x-axis values for the linearization interval
  34  Scalars
  35         b0         start point (positive)    /   5 /
  36         bm         end point                 / 100 /;
  37   
  38  abort$(b0<0)  'b0 should be a positive number', b0
  39  abort$(bm<b0) 'end point needs to be greater than start point', b0, bm;
  40   
  41  Variables
  42         ObjV       The value of the objective function
  43         b(j)       Breakpoints
  44         fb(j)      function values for the break points;
  45   
  46  b.lo(j) = b0;
  47  b.up(j) = bm;
  48   
  49  Equations
  50         object     The area under the curve
  51         FBCalc(j)  Calculating the power function values;
  52   
  53  object..    ObjV =e=
  54                         sum(j$(not last(j)),  [b('s30')-b(j)]*[fb(j)-fb(j-1)])
  55                   + 0.5*sum(j$(not first(j)), [b(j)-b(j-1)]*[fb(j)-fb(j-1)]);
  56   
  57  FBCalc(j).. fb(j) =e= power(b(j),(1-gamma))/(1-gamma);
  58   
  59  b.fx('s1') = b0;
  60  b.fx('s30') = bm;
  61   
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 11:34:19 Page 3
Finding Optimal Breakpoints when linearizing a power utility function (SEQ=373)
C o m p i l a t i o n


  62  Model OptimalLinearization /all/ ;
  63  Solve OptimalLinearization using nlp maximizing ObjV;


COMPILATION TIME     =        0.000 SECONDS      3 MB  24.7.4 r58773 LEX-LEG
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 11:34:19 Page 4
Finding Optimal Breakpoints when linearizing a power utility function (SEQ=373)
Equation Listing    SOLVE OptimalLinearization Using NLP From line 63


---- object  =E=  The area under the curve

object..  ObjV + (0)*b(s1) + (0)*b(s2) + (0)*b(s3) + (0)*b(s4) + (0)*b(s5) + (0)*b(s6) + (0)*b(s7) + (0)*b(s8) + (0)*b(s9) + (0)*b(s10) + (0)*b(s11) + (0)*b(s12) + (0)*b(s13) + (0)*b(s14) + (0)*b(s15) + (0)*b(s16) + (0)*b(s17) + (0)*b(s18) + (0)*b(s19)
     
      + (0)*b(s20) + (0)*b(s21) + (0)*b(s22) + (0)*b(s23) + (0)*b(s24) + (0)*b(s25) + (0)*b(s26) + (0)*b(s27) + (0)*b(s28) + (0)*b(s29) + (0)*b(s30) + (0)*fb(s1) + (0)*fb(s2) + (0)*fb(s3) + (0)*fb(s4) + (0)*fb(s5) + (0)*fb(s6) + (0)*fb(s7) + (0)*fb(s8)
     
      + (0)*fb(s9) + (0)*fb(s10) + (0)*fb(s11) + (0)*fb(s12) + (0)*fb(s13) + (0)*fb(s14) + (0)*fb(s15) + (0)*fb(s16) + (0)*fb(s17) + (0)*fb(s18) + (0)*fb(s19) + (0)*fb(s20) + (0)*fb(s21) + (0)*fb(s22) + (0)*fb(s23) + (0)*fb(s24) + (0)*fb(s25)
     
      + (0)*fb(s26) + (0)*fb(s27) + (0)*fb(s28) - (47.5)*fb(s29) - (47.5)*fb(s30) =E= 0 ; (LHS = 0)
     

---- FBCalc  =E=  Calculating the power function values

FBCalc(s1)..  - (0.04)*b(s1) + fb(s1) =E= 0 ; (LHS = 0.2, INFES = 0.2 ****)
     
FBCalc(s2)..  - (0.04)*b(s2) + fb(s2) =E= 0 ; (LHS = 0.2, INFES = 0.2 ****)
     
FBCalc(s3)..  - (0.04)*b(s3) + fb(s3) =E= 0 ; (LHS = 0.2, INFES = 0.2 ****)
     
REMAINING 27 ENTRIES SKIPPED

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 11:34:19 Page 5
Finding Optimal Breakpoints when linearizing a power utility function (SEQ=373)
Column Listing      SOLVE OptimalLinearization Using NLP From line 63


---- ObjV  The value of the objective function

ObjV
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       object


---- b  Breakpoints

b(s1)
                (.LO, .L, .UP, .M = 5, 5, 5, 0)
       (0)      object
      (-0.04)   FBCalc(s1)

b(s2)
                (.LO, .L, .UP, .M = 5, 5, 100, 0)
       (0)      object
      (-0.04)   FBCalc(s2)
        0       (OLD LEVEL ****)

b(s3)
                (.LO, .L, .UP, .M = 5, 5, 100, 0)
       (0)      object
      (-0.04)   FBCalc(s3)
        0       (OLD LEVEL ****)

REMAINING 27 ENTRIES SKIPPED

---- fb  function values for the break points

fb(s1)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       (0)      object
        1       FBCalc(s1)

fb(s2)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       (0)      object
        1       FBCalc(s2)

fb(s3)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       (0)      object
        1       FBCalc(s3)

REMAINING 27 ENTRIES SKIPPED
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 11:34:19 Page 6
Finding Optimal Breakpoints when linearizing a power utility function (SEQ=373)
Model Statistics    SOLVE OptimalLinearization Using NLP From line 63


MODEL STATISTICS

BLOCKS OF EQUATIONS           2     SINGLE EQUATIONS           31
BLOCKS OF VARIABLES           3     SINGLE VARIABLES           61  28 projected
NON ZERO ELEMENTS           121     NON LINEAR N-Z             90
DERIVATIVE POOL              20     CONSTANT POOL              17
CODE LENGTH                 559


GENERATION TIME      =        0.002 SECONDS      4 MB  24.7.4 r58773 LEX-LEG


EXECUTION TIME       =        0.003 SECONDS      4 MB  24.7.4 r58773 LEX-LEG
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 11:34:19 Page 7
Finding Optimal Breakpoints when linearizing a power utility function (SEQ=373)
Solution Report     SOLVE OptimalLinearization Using NLP From line 63


               S O L V E      S U M M A R Y

     MODEL   OptimalLinearization   OBJECTIVE  ObjV
     TYPE    NLP                    DIRECTION  MAXIMIZE
     SOLVER  CONVERT                FROM LINE  63

**** SOLVER STATUS     1 Normal Completion         
**** MODEL STATUS      14 No Solution Returned     
**** OBJECTIVE VALUE                0.0000

 RESOURCE USAGE, LIMIT          0.000      1000.000
 ITERATION COUNT, LIMIT         0    2000000000
 EVALUATION ERRORS              0             0

Convert 2.0      24.7.4 r58773 Released Sep 19, 2016 LEG x86 64bit/Linux      

--- Using Option File
Reading parameter(s) from "/home/renigijus/gams/opt-mod-lib/gamslib/cclinpts/convert.opt"
>>  pyomo cclinpts-scalar.py
Finished reading from "/home/renigijus/gams/opt-mod-lib/gamslib/cclinpts/convert.opt"
Pyomo     : cclinpts-scalar.py


No solution returned


EXECUTION TIME       =        0.000 SECONDS      2 MB  24.7.4 r58773 LEX-LEG


USER: Remigijus Paulavicius, Single User License     S170731:0859AO-LNX
      Imperial College London, Dept. of Chemical Engineering    DC13449
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      /home/renigijus/gams/opt-mod-lib/gamslib/cclinpts/cclinpts.gms
Output     /home/renigijus/gams/opt-mod-lib/gamslib/cclinpts/cclinpts-scalar.py.lst
