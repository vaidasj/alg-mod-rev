#  MINLP written by GAMS Convert at 12/13/18 10:32:29
#  
#  Equation counts
#      Total        E        G        L        N        X        C        B
#         70       49       11       10        0        0        0        0
#  
#  Variable counts
#                   x        b        i      s1s      s2s       sc       si
#      Total     cont   binary  integer     sos1     sos2    scont     sint
#         91       81       10        0        0        0        0        0
#  FX      4        4        0        0        0        0        0        0
#  
#  Nonzero counts
#      Total    const       NL      DLL
#        267      137      130        0
# 
#  Reformulation has removed 1 variable and 1 equation


var x1 := 20, >= 2, <= 200;
var x2 := 20, >= 2, <= 200;
var x3 := 20, >= 2, <= 200;
var x4 := 20, >= 2, <= 200;
var x5 := 20, >= 2, <= 200;
var x6 := 20, >= 2, <= 200;
var x7 := 20, >= 2, <= 200;
var x8 := 20, >= 2, <= 200;
var x9 := 20, >= 2, <= 200;
var x10 := 20, >= 2, <= 200;
var x11 := 20, >= 2, <= 200;
var x12 := 200, >= 200, <= 1000;
var x13 := 200, >= 200, <= 1000;
var x14 := 200, >= 200, <= 1000;
var x15 := 200, >= 200, <= 1000;
var x16 := 200, >= 200, <= 1000;
var x17 := 200, >= 200, <= 1000;
var x18 := 200, >= 200, <= 1000;
var x19 := 200, >= 200, <= 1000;
var x20 := 200, >= 200, <= 1000;
var x21 := 200, >= 200, <= 1000;
var x22 := 200, >= 200, <= 1000;
var x23 := 500, >= 500, <= 500;
var x24 := 200, >= 200, <= 1000;
var x25 := 200, >= 200, <= 1000;
var x26 := 200, >= 200, <= 1000;
var x27 := 200, >= 200, <= 1000;
var x28 := 200, >= 200, <= 1000;
var x29 := 200, >= 200, <= 1000;
var x30 := 600, >= 600, <= 600;
var x31 := 200, >= 200, <= 1000;
var x32 := 200, >= 200, <= 1000;
var x33 := 200, >= 200, <= 1000;
var x34 := 300, >= 300, <= 300;
var x35 := 18, >= 4, <= 36;
var x36 := 18, >= 4, <= 36;
var x37 := 18, >= 4, <= 36;
var x38 := 18, >= 4, <= 18;
var x39 := 18, >= 4, <= 18;
var x40 := 18, >= 4, <= 18;
var x41 := 18, >= 4, <= 18;
var x42 := 18, >= 4, <= 18;
var x43 := 18, >= 4, <= 18;
var x44 := 18, >= 4, <= 18;
var x45 := 18, >= 4, <= 18;
var x46 := 600, >= 600, <= 600;
var x47 := 200, >= 200, <= 600;
var x48 := 200, >= 200, <= 600;
var x49 := 200, >= 200, <= 600;
var x50 := 200, >= 200, <= 600;
var x51 := 200, >= 200, <= 600;
var x52 := 200, >= 200, <= 600;
var x53 := 200, >= 200, <= 600;
var x54 := 200, >= 200, <= 600;
var x55 := 200, >= 200, <= 600;
var x56 := 200, >= 200, <= 600;
var x57 := 200, >= 200, <= 600;
var x58 := 1, >= 1, <= 2;
var x59 := 1, >= 1, <= 2;
var x60 := 1, >= 1, <= 2;
var x61 := 1, >= 1, <= 2;
var x62 := 1, >= 1, <= 2;
var x63 := 1, >= 1, <= 2;
var x64 := 1, >= 1, <= 2;
var x65 := 1, >= 1, <= 2;
var x66 := 1, >= 1, <= 2;
var x67 := 1, >= 1, <= 2;
var x68 >= 0;
var x69 >= 0;
var x70 >= 0;
var x71 >= 0;
var x72 >= 0;
var x73 >= 0;
var x74 >= 0;
var x75 >= 0;
var x76 >= 0;
var x77 >= 0;
var b78 binary >= 0, <= 1;
var b79 binary >= 0, <= 1;
var b80 binary >= 0, <= 1;
var b81 binary >= 0, <= 1;
var b82 binary >= 0, <= 1;
var b83 binary >= 0, <= 1;
var b84 binary >= 0, <= 1;
var b85 binary >= 0, <= 1;
var b86 binary >= 0, <= 1;
var b87 binary >= 0, <= 1;
var x88;
var x89;
var x90;

minimize obj:    x88 + x89 + x90;

subject to

e1:    x12 - x24 >= 0;

e2:    x13 - x25 >= 0;

e3:    x14 - x26 >= 0;

e4:    x15 - x27 >= 0;

e5:    x16 - x28 >= 0;

e6:    x17 - x29 >= 0;

e7:    x18 - x30 >= 0;

e8:    x19 - x31 >= 0;

e9:    x20 - x32 >= 0;

e10:    x21 - x33 >= 0;

e11:    x22 - x34 >= 0;

e12:    x1 + x2 + x3 + x4 + x5 + x6 + x7 = 175;

e13:    x1 + x2 + x3 + x8 + x9 + x10 + x11 = 200;

e14: -7.58641e-7*x35**5.33333333333333*(x12^2 - x24^2)/x47^2 + x1 = 0;

e15: -7.58641e-7*x36**5.33333333333333*(x13^2 - x25^2)/x48^2 + x2 = 0;

e16: -7.58641e-7*x37**5.33333333333333*(x14^2 - x26^2)/x49^2 + x3 = 0;

e17: -7.58641e-7*x38**5.33333333333333*(x15^2 - x27^2)/x50^2 + x4 = 0;

e18: -7.58641e-7*x39**5.33333333333333*(x16^2 - x28^2)/x51^2 + x5 = 0;

e19: -7.58641e-7*x40**5.33333333333333*(x17^2 - x29^2)/x52^2 + x6 = 0;

e20: -7.58641e-7*x41**5.33333333333333*(x18^2 - x30^2)/x53^2 + x7 = 0;

e21: -7.58641e-7*x42**5.33333333333333*(x19^2 - x31^2)/x54^2 + x8 = 0;

e22: -7.58641e-7*x43**5.33333333333333*(x20^2 - x32^2)/x55^2 + x9 = 0;

e23: -7.58641e-7*x44**5.33333333333333*(x21^2 - x33^2)/x56^2 + x10 = 0;

e24: -7.58641e-7*x45**5.33333333333333*(x22^2 - x34^2)/x57^2 + x11 = 0;

e25: x46 - 0.005*x46*b78 - x47 = 0;

e26: x47 - 0.005*x47*b79 - x48 = 0;

e27: x48 - 0.005*x48*b80 - x49 = 0;

e28: x49 - 0.005*x49*b81 - x50 - x54 = 0;

e29: x50 - 0.005*x50*b82 - x51 = 0;

e30: x51 - 0.005*x51*b83 - x52 = 0;

e31: x52 - 0.005*x52*b84 - x53 = 0;

e32: x54 - 0.005*x54*b85 - x55 = 0;

e33: x55 - 0.005*x55*b86 - x56 = 0;

e34: x56 - 0.005*x56*b87 - x57 = 0;

e35: -214.9812*(-1 + x58**0.181587301587302)*x47 + x68 = 0;

e36: -214.9812*(-1 + x59**0.181587301587302)*x48 + x69 = 0;

e37: -214.9812*(-1 + x60**0.181587301587302)*x49 + x70 = 0;

e38: -214.9812*(-1 + x61**0.181587301587302)*x50 + x71 = 0;

e39: -214.9812*(-1 + x61**0.181587301587302)*x54 + x71 = 0;

e40: -214.9812*(-1 + x62**0.181587301587302)*x51 + x72 = 0;

e41: -214.9812*(-1 + x63**0.181587301587302)*x52 + x73 = 0;

e42: -214.9812*(-1 + x64**0.181587301587302)*x53 + x74 = 0;

e43: -214.9812*(-1 + x65**0.181587301587302)*x55 + x75 = 0;

e44: -214.9812*(-1 + x66**0.181587301587302)*x56 + x76 = 0;

e45: -214.9812*(-1 + x67**0.181587301587302)*x57 + x77 = 0;

e46: x58*x23 - x12 = 0;

e47: x59*x24 - x13 = 0;

e48: x60*x25 - x14 = 0;

e49: x61*x26 - x15 = 0;

e50: x61*x26 - x19 = 0;

e51: x62*x27 - x16 = 0;

e52: x63*x28 - x17 = 0;

e53: x64*x29 - x18 = 0;

e54: x65*x31 - x20 = 0;

e55: x66*x32 - x21 = 0;

e56: x67*x33 - x22 = 0;

e57:    x58 - b78 <= 1;

e58:    x59 - b79 <= 1;

e59:    x60 - b80 <= 1;

e60:    x61 - b81 <= 1;

e61:    x62 - b82 <= 1;

e62:    x63 - b83 <= 1;

e63:    x64 - b84 <= 1;

e64:    x65 - b85 <= 1;

e65:    x66 - b86 <= 1;

e66:    x67 - b87 <= 1;

e67: -(870*x1*x35 + 870*x2*x36 + 870*x3*x37 + 870*x4*x38 + 870*x5*x39 + 870*x6*
     x40 + 870*x7*x41 + 870*x8*x42 + 870*x9*x43 + 870*x10*x44 + 870*x11*x45)
      + x88 = 0;

e68:  - 70*x68 - 70*x69 - 70*x70 - 70*x71 - 70*x72 - 70*x73 - 70*x74 - 70*x75
      - 70*x76 - 70*x77 - 10000*b78 - 10000*b79 - 10000*b80 - 10000*b81
      - 10000*b82 - 10000*b83 - 10000*b84 - 10000*b85 - 10000*b86 - 10000*b87
      + x89 = 0;

e69:  - 8*x68 - 8*x69 - 8*x70 - 8*x71 - 8*x72 - 8*x73 - 8*x74 - 8*x75 - 8*x76
      - 8*x77 + x90 = 0;
