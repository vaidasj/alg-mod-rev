GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 11:43:34 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1  option MIP=convert;
   2  option MIP=convert;
   3  option MIP=convert;
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 11:43:34 Page 2
Bid Evaluation with Piecewise Linear Functions (BIDPWL,SEQ=385)
C o m p i l a t i o n


      A company obtains a number of bids from vendors for the supply
      of a specified number of units of an item. Most of the submitted
      bids have prices that depend on the volume of business. A formulation
      with 0/1 variables is shown in the original gamslib model BID, one with
      SOS2 sets in gamslib model bidsos. Here we use segments with a point, length,
      and slope to define a model.
       
       
      Bracken, J, and McCormick, G P, Chapter 3. In Selected Applications
      of Nonlinear Programming. John Wiley and Sons, New York, 1968,
      pp. 28-36.
       
  20   
  21  sets   v   vendors        / a, b, c, d, e /
  22         cl  column labels  / setup, price, q-min, q-max ,cost /
  23         s   segements      / 0*5 /
  24         sl  segment labels / x, y coordinates, l length, g slope /
  25  scalar req requirements   / 239600.48 /;
  26   
  27  table bid(v,s,cl) bid data
  28                 setup      price     q-min    q-max
  29  a.1          3855.84     61.150              33000
  30  b.1        125804.84     68.099     22000    70000
  31  b.2                      66.049     70000   100000
  32  b.3                      64.099    100000   150000
  33  b.4                      62.119    150000   160000
  34  c.1         13456.00     62.190             165600
  35  d.1          6583.98     72.488              12000
  36  e.1                      70.150              42000
  37  e.2                      68.150     42000    77000;
  38   
  39  parameter BidPwl(v,s,sl) Bid segment definition;
  40  bidpwl(v,  s,'x') = bid(v,s,'q-min');
  41  bidpwl(v,'1','y') = bid(v,'1','setup') + bid(v,'1','q-min')*bid(v,'1','price');
  42  bidpwl(v,  s,'l') = bid(v,s,'q-max') - bid(v,s,'q-min');
  43  bidpwl(v,  s,'g') = bid(v,s,'price');
  44  bidpwl(v,'0','g') = 1; // no deal
  45   
  46  * This following batinclude has a parameter p as first argument that
  47  * defines segments of a piecewise linear function. A start point (x,y) of
  48  * a segment plus length and slope need to be provided provides by this
  49  * parameter. The actual labels for are also provided on the batinclude
  50  * call (arguments 3-6) together with the set of segments (arg 2) and an
  51  * optional index set (idxp) to define an indexed parameter to define multiple
  52  * piecewise linear functions (arg 7). The optional arguments 8 and 9 allow
  53  * the use the same function f with different endogenous arguments (idxm).
  54  *
  55  * The batinclude provides a subset of active segments p_Seg(s), i.e. the
  56  * parameter must have data before the batinclude call. The batinclude also
  57  * provide a couple of macros:
  58  * 1) p_Func(x[,idxp])   evaluates the function at point x
  59  * 2) p_x([idxp][,idxm]) expression to assign x(idxm) value
  60  * 3) p_y([idxp][,idxm]) expression to assign y(idxm) value
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 11:43:34 Page 3
Bid Evaluation with Piecewise Linear Functions (BIDPWL,SEQ=385)
C o m p i l a t i o n


  61  *
  62  * The header of pwlfunc.inc describes its use in more detail
  63   
BATINCLUDE /home/renigijus/gams/opt-mod-lib/gamslib/bidpwl/pwlfunc.inc
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 11:43:34 Page 4
Piecewise Linear Function include file
C o m p i l a t i o n


      This include file provides some symbol and macro definition for providing
      piecewise linear functions in GAMS in a convenient way. Piecewise linear
      functions are provided in terms of segments. Each segment has a
      (x,y) coordinate point, a (potentially infinite) length, and a slope. The
      sign of the length data determines if the segment expands to the left (negative
      length) or the right (positive length) of the (x,y) point. These segment
      definitions allow more that pure piecewise linear functions. Segments can
      overlap and there can be holes in the x coordinate space. There is also no
      order requirement of the segment x coordinates.
       
      Each segment has two variables associated: a binary variable that enables the
      segment to be used. Clearly only one segment can be active. The other variable
      is a positive variable (upper bound of this variable is the |length| of the
      segment. This variable shows how far we went into this segment from the starting
      point (x,y).
       
      A piecewise linear function is described by a parameter f(seg,hdr). In case f
      needs to be an indexed parameter (multiple functions), this include
      file needs to be called with an additional argument: the additional index
      set(s) of f (first position in f).
       
      This include file declares a macro that compues the f(x) value for a given x in
      assigment statements (f_Func). If also contains declarations and definitions
      of variables and equations to represent the piecewise linear function in a
      model. In some models we want to use a piecewise linear function at different
      input with different endogenous x values. While the exogenous function
      information does not change, we need to index the variables/equations for the
      linearization of the function call in the model. That is why we can supply as
      the 8th and 9th argument an index and a dynamic set over these indices, to
      connect multiple input and outputs to the same piecewise linear function.
       
      If the piecewise linear function contains segments of infinite length,
      the usual bigM trick segX <= L*sigB does not work. In this case we form a
      SOS1 constraint with the variables segX and 1-sigB. This has the same effect as
      the bigM constraint, but is independent of the length of the segment and hence
      also works with infinite length. While the required variables and equations will
      be declared, the model will only contain such constructs if segments with
      infinite length exist.
       
      The endogenous input parameter of a piecewise linear function can be couple
      to a model variable by using the marco (which expands into an expression) f_x.
      In a similar fashion the function value f(x) can be connected to a model
      variable using f_y.
 111   
 112  set PwlSeg__  SOS1 segments / pwls1__,pwls2__ /;
 113   
 120   
 139   
 141  Set BidPwl_Seg(v,s); option BidPwl_Seg<BidPwl;
 142   
 143  * The segements in FPwl may be overlapping and so f might not describe a
 144  * well defined function. So we need to make sure that for a given x we
 145  * return a single f(x). SMin and SMax are a possible choice for this
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 11:43:34 Page 5
Piecewise Linear Function include file
C o m p i l a t i o n


 146  $macro BidPwl_Func(arg,v) \
 147    smin(BidPwl_Seg(v,s)$(BidPwl(v,s,'l')=0 and abs(arg-BidPwl(v,s,'x'))<1e-6 and &\
 148                                           arg-1e-6<=BidPwl(v,s,'x')+BidPwl(v,s,'l')  \
 149                  or BidPwl(v,s,'l')>-1e-6 and arg-1e-6>=BidPwl(v,s,'x') and &\
 150                                           arg-1e-6<=BidPwl(v,s,'x')+BidPwl(v,s,'l')  \
 151                  or BidPwl(v,s,'l')<+1e-6 and arg-1e-6<=BidPwl(v,s,'x') and &\
 152                                           arg+1e-6>=BidPwl(v,s,'x')+BidPwl(v,s,'l')),\
 153                     BidPwl(v,s,'y')+ (arg-BidPwl(v,s,'x'))*BidPwl(v,s,'g'))
 154   
 155  * Declaration of subset of active segments of the function and variables and
 156  * equations to describe the piecewise linear function linearly.
 158   
 159  Positive Variable BidPwlSeg(v,s);
 160  Binary Variable BidPwlBin(v,s);
 161  Equation defBidPwlSeg(v,s), defBidPwlOne(v);
 162  defBidPwlSeg(BidPwl_Seg(v,s))$(abs(BidPwl(v,s,'l'))<>inf )..
 163    BidPwlSeg(v,s) =l= abs(BidPwl(v,s,'l'))*BidPwlBin(v,s);
 164  defBidPwlOne(v).. sum(BidPwl_Seg(v,s), BidPwlBin(v,s)) =e= 1;
 165  Equation defBidPwlinf1(v,s), defBidPwlinf2(v,s);
 166  SOS1 Variable BidPwlSOS1(v,s,PwlSeg__);
 167  defBidPwlinf1(BidPwl_Seg(v,s))$(abs(BidPwl(v,s,'l'))=inf )..
 168    1-BidPwlBin(v,s) =e= BidPwlSOS1(v,s,'pwls1__');
 169  defBidPwlinf2(BidPwl_Seg(v,s))$(abs(BidPwl(v,s,'l'))=inf )..
 170      BidPwlSeg(v,s) =e= BidPwlSOS1(v,s,'pwls2__');
 171   
 172  * The following macros define the x and y parts which can be connected
 173  * to existing variables in the model
 175  $macro BidPwl_x(v) \
 176    sum(BidPwl_Seg(v,s), BidPwlBin(v,s)*BidPwl(v,s,'x') \
 177                      + BidPwlSeg(v,s)*sign(BidPwl(v,s,'l')))
 179  $macro BidPwl_y(v) \
 180    sum(BidPwl_Seg(v,s), BidPwlBin(v,s)*BidPwl(v,s,'y') \
 181      + BidPwlSeg(v,s)*BidPwl(v,s,'g')*sign(BidPwl(v,s,'l')))
 182   
 183  * Fill missing y coordinate for s2 and further
 184  loop(BidPwl_Seg(v,s)$(ord(s)>2),
 185    BidPwl(v,s,'y') = BidPwl(v,s-1,'y') +
 186                      BidPwl(v,s-1,'g')*BidPwl(v,s-1,'l'));
 187   
 188  variable   c          total cost
 189             x(v)       vendor units
 190             y(v)       vendor units
 191  equations  defx(v)    define vendor units
 192             demand     demand constraint
 193             defy(v)    define cost of vendor units
 194             costdef    cost definition;
 195   
 196  defx(v).. x(v) =e= sum(BidPwl_Seg(v,s), BidPwlBin(v,s)*BidPwl(v,s,'x')+ BidPwlSeg(v,s)*sign(BidPwl(v,s,'l')));
 197  demand..  req  =e= sum(v, x(v));
 198  defy(v).. y(v) =e= sum(BidPwl_Seg(v,s), BidPwlBin(v,s)*BidPwl(v,s,'y')+ BidPwlSeg(v,s)*BidPwl(v,s,'g')*sign(BidPwl(v,s,'l')));
 199  costdef.. c    =e= sum(v, y(v));
 200   
 201  model bideval / all /;
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 11:43:34 Page 6
Piecewise Linear Function include file
C o m p i l a t i o n


 202   
 203  option optcr=0.0; solve bideval minimizing c using mip;
 204   
 205  parameter rep;
 206  rep(v,'xmodel') = x.l(v);
 207  rep(v,'ymodel') = y.l(v);
 208  rep(v,'yexec')  = smin(BidPwl_Seg(v,s)$(BidPwl(v,s,'l')=0 and abs(x.l(v)-BidPwl(v,s,'x'))<1e-6 and x.l(v)-1e-6<=BidPwl(v,s,'x')+BidPwl(v,s,'l')or BidPwl(v,s,'l')>-1e-6 and x.l(v)-1e-6>=BidPwl(v,s,'x') and x.l(v)-1e-6<=BidPwl(v,s,'x')+BidPwl(v,s,'l')
      or BidPwl(v,s,'l')<+1e-6 and x.l(v)-1e-6<=BidPwl(v,s,'x') and x.l(v)+1e-6>=BidPwl(v,s,'x')+BidPwl(v,s,'l')),BidPwl(v,s,'y')+ (x.l(v)-BidPwl(v,s,'x'))*BidPwl(v,s,'g'));
 209  rep(v,'diff')   = rep(v,'ymodel') - rep(v,'yexec');
 210  abort$(sum(v, abs(rep(v,'diff')))>(1e-6)*card(v))
 211         'model and execution time disagree', rep;
 212  display rep;
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 11:43:34 Page 7
Piecewise Linear Function include file
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  /home/renigijus/gams/opt-mod-lib/gamslib/bidpwl/bidpwl.gms
     2       64 BATINCLUDE     1      64  ./home/renigijus/gams/opt-mod-lib/gamslib/bidpwl/pwlfunc.inc


COMPILATION TIME     =        0.002 SECONDS      3 MB  24.7.4 r58773 LEX-LEG
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 11:43:34 Page 8
Piecewise Linear Function include file
Equation Listing    SOLVE bideval Using MIP From line 203


---- defBidPwlSeg  =L=  

defBidPwlSeg(a,0)..  BidPwlSeg(a,0) =L= 0 ; (LHS = 0)
     
defBidPwlSeg(a,1)..  BidPwlSeg(a,1) - 33000*BidPwlBin(a,1) =L= 0 ; (LHS = 0)
     
defBidPwlSeg(b,0)..  BidPwlSeg(b,0) =L= 0 ; (LHS = 0)
     
REMAINING 11 ENTRIES SKIPPED


---- defBidPwlOne  =E=  

defBidPwlOne(a)..  BidPwlBin(a,0) + BidPwlBin(a,1) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
defBidPwlOne(b)..  BidPwlBin(b,0) + BidPwlBin(b,1) + BidPwlBin(b,2) + BidPwlBin(b,3) + BidPwlBin(b,4) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
defBidPwlOne(c)..  BidPwlBin(c,0) + BidPwlBin(c,1) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
REMAINING 2 ENTRIES SKIPPED


---- defBidPwlinf1  =E=  

                NONE


---- defBidPwlinf2  =E=  

                NONE


---- defx  =E=  define vendor units

defx(a)..  - BidPwlSeg(a,1) + x(a) =E= 0 ; (LHS = 0)
     
defx(b)..  - BidPwlSeg(b,1) - BidPwlSeg(b,2) - BidPwlSeg(b,3) - BidPwlSeg(b,4) - 22000*BidPwlBin(b,1) - 70000*BidPwlBin(b,2) - 100000*BidPwlBin(b,3) - 150000*BidPwlBin(b,4) + x(b) =E= 0 ; (LHS = 0)
     
defx(c)..  - BidPwlSeg(c,1) + x(c) =E= 0 ; (LHS = 0)
     
REMAINING 2 ENTRIES SKIPPED


---- demand  =E=  demand constraint

demand..  - x(a) - x(b) - x(c) - x(d) - x(e) =E= -239600.48 ; (LHS = 0, INFES = 239600.48 ****)
     

---- defy  =E=  define cost of vendor units

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 11:43:34 Page 9
Piecewise Linear Function include file
Equation Listing    SOLVE bideval Using MIP From line 203


     defy  =E=  define cost of vendor units

defy(a)..  - 61.15*BidPwlSeg(a,1) - 3855.84*BidPwlBin(a,1) + y(a) =E= 0 ; (LHS = 0)
     
defy(b)..  - 68.099*BidPwlSeg(b,1) - 66.049*BidPwlSeg(b,2) - 64.099*BidPwlSeg(b,3) - 62.119*BidPwlSeg(b,4) - 1623982.84*BidPwlBin(b,1) - 4892734.84*BidPwlBin(b,2) - 6874204.84*BidPwlBin(b,3) - 10079154.84*BidPwlBin(b,4) + y(b) =E= 0 ; (LHS = 0)
     
defy(c)..  - 62.19*BidPwlSeg(c,1) - 13456*BidPwlBin(c,1) + y(c) =E= 0 ; (LHS = 0)
     
REMAINING 2 ENTRIES SKIPPED


---- costdef  =E=  cost definition

costdef..  c - y(a) - y(b) - y(c) - y(d) - y(e) =E= 0 ; (LHS = 0)
     
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:43:34 Page 10
Piecewise Linear Function include file
Column Listing      SOLVE bideval Using MIP From line 203


---- BidPwlSeg  

BidPwlSeg(a,0)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        1       defBidPwlSeg(a,0)

BidPwlSeg(a,1)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        1       defBidPwlSeg(a,1)
       -1       defx(a)
      -61.15    defy(a)

BidPwlSeg(b,0)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        1       defBidPwlSeg(b,0)

REMAINING 11 ENTRIES SKIPPED

---- BidPwlBin  

BidPwlBin(a,0)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       defBidPwlOne(a)

BidPwlBin(a,1)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -33000       defBidPwlSeg(a,1)
        1       defBidPwlOne(a)
    -3855.84    defy(a)

BidPwlBin(b,0)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       defBidPwlOne(b)

REMAINING 11 ENTRIES SKIPPED

---- c  total cost

c
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       costdef


---- x  vendor units

x(a)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       defx(a)
       -1       demand

x(b)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       defx(b)
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:43:34 Page 11
Piecewise Linear Function include file
Column Listing      SOLVE bideval Using MIP From line 203


     x  vendor units

       -1       demand

x(c)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       defx(c)
       -1       demand

REMAINING 2 ENTRIES SKIPPED

---- y  vendor units

y(a)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       defy(a)
       -1       costdef

y(b)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       defy(b)
       -1       costdef

y(c)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       defy(c)
       -1       costdef

REMAINING 2 ENTRIES SKIPPED
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:43:34 Page 12
Piecewise Linear Function include file
Model Statistics    SOLVE bideval Using MIP From line 203


MODEL STATISTICS

BLOCKS OF EQUATIONS           8     SINGLE EQUATIONS           31
BLOCKS OF VARIABLES           5     SINGLE VARIABLES           39
NON ZERO ELEMENTS            89     DISCRETE VARIABLES         14


GENERATION TIME      =        0.003 SECONDS      4 MB  24.7.4 r58773 LEX-LEG


EXECUTION TIME       =        0.004 SECONDS      4 MB  24.7.4 r58773 LEX-LEG
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:43:34 Page 13
Piecewise Linear Function include file
Solution Report     SOLVE bideval Using MIP From line 203


               S O L V E      S U M M A R Y

     MODEL   bideval             OBJECTIVE  c
     TYPE    MIP                 DIRECTION  MINIMIZE
     SOLVER  CONVERT             FROM LINE  203

**** SOLVER STATUS     1 Normal Completion         
**** MODEL STATUS      14 No Solution Returned     
**** OBJECTIVE VALUE                0.0000

 RESOURCE USAGE, LIMIT          0.000      1000.000
 ITERATION COUNT, LIMIT         0    2000000000

Convert 2.0      24.7.4 r58773 Released Sep 19, 2016 LEG x86 64bit/Linux      

--- Using Option File
Reading parameter(s) from "/home/renigijus/gams/opt-mod-lib/gamslib/bidpwl/convert.opt"
>>  pyomo bidpwl-scalar.py
Finished reading from "/home/renigijus/gams/opt-mod-lib/gamslib/bidpwl/convert.opt"
Pyomo     : bidpwl-scalar.py


No solution returned
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                     12/13/18 11:43:34 Page 14
Piecewise Linear Function include file
E x e c u t i o n


----    212 PARAMETER rep  

                      ( ALL       0.000 )



EXECUTION TIME       =        0.001 SECONDS      3 MB  24.7.4 r58773 LEX-LEG


USER: Remigijus Paulavicius, Single User License     S170731:0859AO-LNX
      Imperial College London, Dept. of Chemical Engineering    DC13449
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      /home/renigijus/gams/opt-mod-lib/gamslib/bidpwl/bidpwl.gms
Output     /home/renigijus/gams/opt-mod-lib/gamslib/bidpwl/bidpwl-scalar.py.lst
