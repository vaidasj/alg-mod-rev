GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 10:32:28 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1  option NLP=convert;
   2  option NLP=convert;
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 10:32:28 Page 2
Haverly's pooling problem example (HAVERLY,SEQ=214)
C o m p i l a t i o n


       
         Haverly's pooling problem example. This is a non-convex problem.
         Setting initial levels for the nonlinear variables is a good
         approach to find the global optimum.
       
       
      Haverly, C A, Studies of the Behavior of Recursion for the Pooling
      Problem. ACM SIGMAP Bull 25 (1978), 29-32.
       
      Adhya, N, Tawaralani, M, and Sahinidis, N, A Lagrangian Approach to
      the Pooling Problem. Independent Engineering Chemical Research 38
      (1999), 1956-1972.
       
       
      ----- crudeA ------/--- pool --|
                        /            |--- finalX
      ----- crudeB ----/             |
                                     |--- finalY
      ----- crudeC ------------------|
       
  26   
  27  sets s supplies (crudes) / crudeA, crudeB, crudeC /
  28       f final products    / finalX, finalY /
  29       i intermediate sources for final products / Pool, CrudeC /
  30       poolin(s) crudes going into pool tank / crudeA, crudeB /
  31   
  32  table data_S(s,*) supply data summary
  33   
  34           price  sulfur
  35  crudeA     6     3
  36  crudeB    16     1
  37  crudeC    10     2
  38   
  39  table data_f(f,*) final product data
  40   
  41           price  sulfur demand
  42  finalX     9     2.5    100
  43  finalY    15     1.5    200
  44   
  45  parameters sulfur_content(s) supply quality in (percent)
  46             req_sulfur(f)     required max sulfur content (percentage)
  47             demand(f)         final product demand;
  48   
  49  sulfur_content(s) = data_S(s,'sulfur');
  50  req_sulfur(f)     = data_F(f,'sulfur');
  51  demand(f)         = data_F(f,'demand');
  52   
  53  equations
  54     costdef       cost equation
  55     incomedef     income equation
  56     blend(f)      blending of final products
  57     poolbal       pool tank balance
  58     crudeCbal     balance for crudeC
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 10:32:28 Page 3
Haverly's pooling problem example (HAVERLY,SEQ=214)
C o m p i l a t i o n


  59     poolqualbal   pool quality balance
  60     blendqualbal  quality balance for blending
  61     profitdef     profit equation
  62   
  63  positive variables
  64     crude(s)    amount of crudes being used
  65     stream(i,f) streams
  66     q           pool quality
  67  variables
  68     profit      total profit
  69     cost        total costs
  70     income      total income
  71     final(f)    amount of final products sold;
  72   
  73   
  74  profitdef.. profit =e= income - cost;
  75   
  76  costdef..   cost   =e= sum(s, data_S(s,'price')*crude(s));
  77   
  78  incomedef.. income =e= sum(f, data_F(f,'price')*final(f));
  79   
  80  blend(f)..  final(f) =e=  sum(i, stream(i,f));
  81   
  82  poolbal..   sum(poolin, crude(poolin)) =e= sum(f, stream('pool',f));
  83   
  84  crudeCbal.. crude('crudeC') =e= sum(f, stream('crudeC',f));
  85   
  86  poolqualbal.. q*sum(f, stream('pool', f)) =e=
  87                     sum(poolin, sulfur_content(poolin)*crude(poolin));
  88   
  89  blendqualbal(f)..
  90              q*stream('pool',f) + sulfur_content('CrudeC')*stream('CrudeC',f)
  91                       =l=  req_sulfur(f)*sum(i,stream(i,f));
  92   
  93  final.up(f) = demand(f);
  94   
  95  model m /all/;
  96   
  97  * Because of the product terms, some local solver may get
  98  * trapped at 0*0, we therefore set an initial value for q.
  99  q.l=1;
 100   
 101  solve m maximizing profit using nlp;


COMPILATION TIME     =        0.001 SECONDS      3 MB  24.7.4 r58773 LEX-LEG
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 10:32:28 Page 4
Haverly's pooling problem example (HAVERLY,SEQ=214)
Equation Listing    SOLVE m Using NLP From line 101


---- costdef  =E=  cost equation

costdef..  - 6*crude(crudeA) - 16*crude(crudeB) - 10*crude(crudeC) + cost =E= 0 ; (LHS = 0)
     

---- incomedef  =E=  income equation

incomedef..  income - 9*final(finalX) - 15*final(finalY) =E= 0 ; (LHS = 0)
     

---- blend  =E=  blending of final products

blend(finalX)..  - stream(crudeC,finalX) - stream(Pool,finalX) + final(finalX) =E= 0 ; (LHS = 0)
     
blend(finalY)..  - stream(crudeC,finalY) - stream(Pool,finalY) + final(finalY) =E= 0 ; (LHS = 0)
     

---- poolbal  =E=  pool tank balance

poolbal..  crude(crudeA) + crude(crudeB) - stream(Pool,finalX) - stream(Pool,finalY) =E= 0 ; (LHS = 0)
     

---- crudeCbal  =E=  balance for crudeC

crudeCbal..  crude(crudeC) - stream(crudeC,finalX) - stream(crudeC,finalY) =E= 0 ; (LHS = 0)
     

---- poolqualbal  =E=  pool quality balance

poolqualbal..  - 3*crude(crudeA) - crude(crudeB) + (1)*stream(Pool,finalX) + (1)*stream(Pool,finalY) + (0)*q =E= 0 ; (LHS = 0)
     

---- blendqualbal  =L=  quality balance for blending

blendqualbal(finalX)..  - 0.5*stream(crudeC,finalX) - (1.5)*stream(Pool,finalX) + (0)*q =L= 0 ; (LHS = 0)
     
blendqualbal(finalY)..  0.5*stream(crudeC,finalY) - (0.5)*stream(Pool,finalY) + (0)*q =L= 0 ; (LHS = 0)
     

---- profitdef  =E=  profit equation

profitdef..  profit + cost - income =E= 0 ; (LHS = 0)
     
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 10:32:28 Page 5
Haverly's pooling problem example (HAVERLY,SEQ=214)
Column Listing      SOLVE m Using NLP From line 101


---- crude  amount of crudes being used

crude(crudeA)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -6       costdef
        1       poolbal
       -3       poolqualbal

crude(crudeB)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
      -16       costdef
        1       poolbal
       -1       poolqualbal

crude(crudeC)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
      -10       costdef
        1       crudeCbal


---- stream  streams

stream(crudeC,finalX)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -1       blend(finalX)
       -1       crudeCbal
       -0.5     blendqualbal(finalX)

stream(crudeC,finalY)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -1       blend(finalY)
       -1       crudeCbal
        0.5     blendqualbal(finalY)

stream(Pool,finalX)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -1       blend(finalX)
       -1       poolbal
       (1)      poolqualbal
      (-1.5)    blendqualbal(finalX)

REMAINING ENTRY SKIPPED

---- q  pool quality

q
                (.LO, .L, .UP, .M = 0, 1, +INF, 0)
       (0)      poolqualbal
       (0)      blendqualbal(finalX)
       (0)      blendqualbal(finalY)

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 10:32:28 Page 6
Haverly's pooling problem example (HAVERLY,SEQ=214)
Column Listing      SOLVE m Using NLP From line 101


---- profit  total profit

profit
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       profitdef


---- cost  total costs

cost
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       costdef
        1       profitdef


---- income  total income

income
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       incomedef
       -1       profitdef


---- final  amount of final products sold

final(finalX)
                (.LO, .L, .UP, .M = -INF, 0, 100, 0)
       -9       incomedef
        1       blend(finalX)

final(finalY)
                (.LO, .L, .UP, .M = -INF, 0, 200, 0)
      -15       incomedef
        1       blend(finalY)

GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 10:32:28 Page 7
Haverly's pooling problem example (HAVERLY,SEQ=214)
Model Statistics    SOLVE m Using NLP From line 101


MODEL STATISTICS

BLOCKS OF EQUATIONS           8     SINGLE EQUATIONS           10
BLOCKS OF VARIABLES           7     SINGLE VARIABLES           13
NON ZERO ELEMENTS            34     NON LINEAR N-Z              7
DERIVATIVE POOL              20     CONSTANT POOL              18
CODE LENGTH                  18


GENERATION TIME      =        0.003 SECONDS      4 MB  24.7.4 r58773 LEX-LEG


EXECUTION TIME       =        0.003 SECONDS      4 MB  24.7.4 r58773 LEX-LEG
GAMS 24.7.4  r58773 Released Sep 19, 2016 LEX-LEG x86 64bit/Linux                                                                                                                                                                      12/13/18 10:32:28 Page 8
Haverly's pooling problem example (HAVERLY,SEQ=214)
Solution Report     SOLVE m Using NLP From line 101


               S O L V E      S U M M A R Y

     MODEL   m                   OBJECTIVE  profit
     TYPE    NLP                 DIRECTION  MAXIMIZE
     SOLVER  CONVERT             FROM LINE  101

**** SOLVER STATUS     1 Normal Completion         
**** MODEL STATUS      14 No Solution Returned     
**** OBJECTIVE VALUE                0.0000

 RESOURCE USAGE, LIMIT          0.000      1000.000
 ITERATION COUNT, LIMIT         0    2000000000
 EVALUATION ERRORS              0             0

Convert 2.0      24.7.4 r58773 Released Sep 19, 2016 LEG x86 64bit/Linux      

--- Using Option File
Reading parameter(s) from "/home/renigijus/gams/opt-mod-lib/gamslib/haverly/convert.opt"
>>  gams haverly-scalar.gms
Finished reading from "/home/renigijus/gams/opt-mod-lib/gamslib/haverly/convert.opt"
Gams      : haverly-scalar.gms


No solution returned


EXECUTION TIME       =        0.000 SECONDS      2 MB  24.7.4 r58773 LEX-LEG


USER: Remigijus Paulavicius, Single User License     S170731:0859AO-LNX
      Imperial College London, Dept. of Chemical Engineering    DC13449
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      /home/renigijus/gams/opt-mod-lib/gamslib/haverly/haverly.gms
Output     /home/renigijus/gams/opt-mod-lib/gamslib/haverly/haverly-scalar.gms.lst
